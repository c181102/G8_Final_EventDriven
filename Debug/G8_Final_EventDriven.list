
G8_Final_EventDriven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a80c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800a920  0800a920  0001a920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0cc  0800b0cc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0cc  0800b0cc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0cc  0800b0cc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0cc  0800b0cc  0001b0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0d0  0800b0d0  0001b0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200001e4  0800b2b8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800b2b8  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a9c  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a9  00000000  00000000  00032ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00035558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00036668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019549  00000000  00000000  00037690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014453  00000000  00000000  00050bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb3b  00000000  00000000  0006502c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3b67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ebc  00000000  00000000  000f3bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a904 	.word	0x0800a904

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800a904 	.word	0x0800a904

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4605      	mov	r5, r0
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2300      	movs	r3, #0
 8000da2:	4628      	mov	r0, r5
 8000da4:	4621      	mov	r1, r4
 8000da6:	f7ff fe13 	bl	80009d0 <__aeabi_dcmplt>
 8000daa:	b928      	cbnz	r0, 8000db8 <__aeabi_d2lz+0x20>
 8000dac:	4628      	mov	r0, r5
 8000dae:	4621      	mov	r1, r4
 8000db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db4:	f000 b80a 	b.w	8000dcc <__aeabi_d2ulz>
 8000db8:	4628      	mov	r0, r5
 8000dba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000dbe:	f000 f805 	bl	8000dcc <__aeabi_d2ulz>
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc8:	bd38      	pop	{r3, r4, r5, pc}
 8000dca:	bf00      	nop

08000dcc <__aeabi_d2ulz>:
 8000dcc:	b5d0      	push	{r4, r6, r7, lr}
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <__aeabi_d2ulz+0x34>)
 8000dd2:	4606      	mov	r6, r0
 8000dd4:	460f      	mov	r7, r1
 8000dd6:	f7ff fb89 	bl	80004ec <__aeabi_dmul>
 8000dda:	f7ff fe5f 	bl	8000a9c <__aeabi_d2uiz>
 8000dde:	4604      	mov	r4, r0
 8000de0:	f7ff fb0a 	bl	80003f8 <__aeabi_ui2d>
 8000de4:	2200      	movs	r2, #0
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <__aeabi_d2ulz+0x38>)
 8000de8:	f7ff fb80 	bl	80004ec <__aeabi_dmul>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4630      	mov	r0, r6
 8000df2:	4639      	mov	r1, r7
 8000df4:	f7ff f9c2 	bl	800017c <__aeabi_dsub>
 8000df8:	f7ff fe50 	bl	8000a9c <__aeabi_d2uiz>
 8000dfc:	4621      	mov	r1, r4
 8000dfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000e00:	3df00000 	.word	0x3df00000
 8000e04:	41f00000 	.word	0x41f00000

08000e08 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f003 fa33 	bl	800427c <HAL_TIM_Base_Start>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8000e32:	bf00      	nop
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3f9      	bcc.n	8000e34 <DELAY_TIM_Us+0x16>
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <DHT11_SetPinIn>:
static DHT11_Status DHT11_Start(DHT11_Sensor* dht);
static uint8_t DHT11_ReadByte(DHT11_Sensor* dht);

/* Private user code ---------------------------------------------------------*/
static void DHT11_SetPinIn(DHT11_Sensor* dht)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 ff4e 	bl	8002d1c <HAL_GPIO_Init>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <DHT11_SetPinOut>:

static void DHT11_SetPinOut(DHT11_Sensor* dht)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	889b      	ldrh	r3, [r3, #4]
 8000ea2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f107 0208 	add.w	r2, r7, #8
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 ff30 	bl	8002d1c <HAL_GPIO_Init>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <DHT11_WritePin>:

static void DHT11_WritePin(DHT11_Sensor* dht, uint8_t value)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dht->Port, dht->Pin, value);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	889b      	ldrh	r3, [r3, #4]
 8000ed8:	78fa      	ldrb	r2, [r7, #3]
 8000eda:	4619      	mov	r1, r3
 8000edc:	f002 f8b9 	bl	8003052 <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DHT11_ReadPin>:

static uint8_t DHT11_ReadPin(DHT11_Sensor* dht)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4610      	mov	r0, r2
 8000efc:	f002 f892 	bl	8003024 <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
    return value;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <DHT11_DelayInit>:

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff74 	bl	8000e08 <DELAY_TIM_Init>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <DHT11_DelayUs>:

static void DHT11_DelayUs(DHT11_Sensor* dht, uint16_t time)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(dht->Timer, time);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff6e 	bl	8000e1e <DELAY_TIM_Us>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <DHT11_Start>:

static DHT11_Status DHT11_Start(DHT11_Sensor* dht)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_ERR_RESPONSE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]

    DHT11_SetPinOut(dht);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff96 	bl	8000e88 <DHT11_SetPinOut>

    /* MCU sends out start signal and pulls down  voltage for at least 18 ms */
    DHT11_WritePin(dht, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffb0 	bl	8000ec4 <DHT11_WritePin>
    DHT11_DelayUs(dht, 18000);
 8000f64:	f244 6150 	movw	r1, #18000	; 0x4650
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffdd 	bl	8000f28 <DHT11_DelayUs>

    /* MCU waits for DHT response (20-40us) */
    DHT11_SetPinIn(dht);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff6c 	bl	8000e4c <DHT11_SetPinIn>
    DHT11_DelayUs(dht, 50);
 8000f74:	2132      	movs	r1, #50	; 0x32
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffd6 	bl	8000f28 <DHT11_DelayUs>

    /* DHT sends out response signal and keeps it for 80 us */
    if (DHT11_ReadPin(dht) == 0)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ffb3 	bl	8000ee8 <DHT11_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d112      	bne.n	8000fae <DHT11_Start+0x64>
    {
        DHT11_DelayUs(dht, 80);
 8000f88:	2150      	movs	r1, #80	; 0x50
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffcc 	bl	8000f28 <DHT11_DelayUs>
        if (DHT11_ReadPin(dht) == 1)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ffa9 	bl	8000ee8 <DHT11_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d108      	bne.n	8000fae <DHT11_Start+0x64>
        {
            status = DHT11_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
            /* Wait for data transmission */
            while(DHT11_ReadPin(dht) == 1);
 8000fa0:	bf00      	nop
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <DHT11_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d0f9      	beq.n	8000fa2 <DHT11_Start+0x58>
        }
    }

    return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(DHT11_Sensor* dht)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    DHT11_SetPinIn(dht);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff41 	bl	8000e4c <DHT11_SetPinIn>

    for (idx = 0; idx < 8; idx++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]
 8000fce:	e035      	b.n	800103c <DHT11_ReadByte+0x84>
    {
        /* Wait for old signal to end */
        while(DHT11_ReadPin(dht) == 0);
 8000fd0:	bf00      	nop
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff88 	bl	8000ee8 <DHT11_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f9      	beq.n	8000fd2 <DHT11_ReadByte+0x1a>

        DHT11_DelayUs(dht, 40);
 8000fde:	2128      	movs	r1, #40	; 0x28
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffa1 	bl	8000f28 <DHT11_DelayUs>

        /* Bit 1 */
        if (DHT11_ReadPin(dht) == 1)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff7e 	bl	8000ee8 <DHT11_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d10c      	bne.n	800100c <DHT11_ReadByte+0x54>
        {
            /* Set bit at (7-idx) position */
            value |= (0x01 << (7 - idx));
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	f1c3 0307 	rsb	r3, r3, #7
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	b25a      	sxtb	r2, r3
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	4313      	orrs	r3, r2
 8001006:	b25b      	sxtb	r3, r3
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e00d      	b.n	8001028 <DHT11_ReadByte+0x70>

        /* Bit 0 */
        else
        {
            /* Clear bit at (7-idx) position */
            value &= ~(0x01 << (7-idx));
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2201      	movs	r2, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	b25b      	sxtb	r3, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	b25a      	sxtb	r2, r3
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4013      	ands	r3, r2
 8001024:	b25b      	sxtb	r3, r3
 8001026:	73fb      	strb	r3, [r7, #15]
        }

        while(DHT11_ReadPin(dht) == 1);
 8001028:	bf00      	nop
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff5c 	bl	8000ee8 <DHT11_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d0f9      	beq.n	800102a <DHT11_ReadByte+0x72>
    for (idx = 0; idx < 8; idx++)
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	3301      	adds	r3, #1
 800103a:	73bb      	strb	r3, [r7, #14]
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9c6      	bls.n	8000fd0 <DHT11_ReadByte+0x18>
    }

    return value;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <DHT11_Init>:

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	4613      	mov	r3, r2
 800105a:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <DHT11_Init+0x3c>)
 8001072:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <DHT11_Init+0x3c>)
 8001078:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f7ff ff47 	bl	8000f0e <DHT11_DelayInit>
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	bf800000 	.word	0xbf800000

0800108c <DHT11_GetData>:

DHT11_Status DHT11_GetData(DHT11_Sensor* dht)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

    uint8_t rh_integral, rh_decimal, temp_integral, temp_decimal, sum;

	status = DHT11_Start(dht);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff56 	bl	8000f4a <DHT11_Start>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]

    if (status == DHT11_OK)
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d15f      	bne.n	8001168 <DHT11_GetData+0xdc>
    {
        /* Read 5 byte from DHT */
        rh_integral     = DHT11_ReadByte(dht);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff85 	bl	8000fb8 <DHT11_ReadByte>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73bb      	strb	r3, [r7, #14]
        rh_decimal      = DHT11_ReadByte(dht);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff80 	bl	8000fb8 <DHT11_ReadByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	737b      	strb	r3, [r7, #13]
        temp_integral   = DHT11_ReadByte(dht);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff7b 	bl	8000fb8 <DHT11_ReadByte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	733b      	strb	r3, [r7, #12]
        temp_decimal    = DHT11_ReadByte(dht);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff76 	bl	8000fb8 <DHT11_ReadByte>
 80010cc:	4603      	mov	r3, r0
 80010ce:	72fb      	strb	r3, [r7, #11]
        sum             = DHT11_ReadByte(dht);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff71 	bl	8000fb8 <DHT11_ReadByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	72bb      	strb	r3, [r7, #10]

        if (sum == rh_integral + rh_decimal + temp_integral + temp_decimal)
 80010da:	7aba      	ldrb	r2, [r7, #10]
 80010dc:	7bb9      	ldrb	r1, [r7, #14]
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	4419      	add	r1, r3
 80010e2:	7b3b      	ldrb	r3, [r7, #12]
 80010e4:	4419      	add	r1, r3
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	440b      	add	r3, r1
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d13a      	bne.n	8001164 <DHT11_GetData+0xd8>
        {
            dht->Humi = rh_integral + (float)(rh_decimal/10.0);
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fdfd 	bl	8000cf0 <__aeabi_i2f>
 80010f6:	4604      	mov	r4, r0
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f98c 	bl	8000418 <__aeabi_i2d>
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <DHT11_GetData+0xe8>)
 8001106:	f7ff fb1b 	bl	8000740 <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fce3 	bl	8000adc <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	4619      	mov	r1, r3
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fd34 	bl	8000b88 <__addsf3>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
            dht->Temp = temp_integral + (float)(temp_decimal/10.0);
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fde0 	bl	8000cf0 <__aeabi_i2f>
 8001130:	4604      	mov	r4, r0
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f96f 	bl	8000418 <__aeabi_i2d>
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <DHT11_GetData+0xe8>)
 8001140:	f7ff fafe 	bl	8000740 <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fcc6 	bl	8000adc <__aeabi_d2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fd17 	bl	8000b88 <__addsf3>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	e001      	b.n	8001168 <DHT11_GetData+0xdc>
        }

        else
        {
            status = DHT11_ERR_CHECKSUM;
 8001164:	2302      	movs	r3, #2
 8001166:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	40240000 	.word	0x40240000

08001178 <LCD_Write>:
static void LCD_WriteChar(LCD_I2C_Name* lcd, char character);

/* Private user code ---------------------------------------------------------*/

static void LCD_Write(LCD_I2C_Name* lcd, uint8_t data, uint8_t mode)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
 8001184:	4613      	mov	r3, r2
 8001186:	70bb      	strb	r3, [r7, #2]
    uint8_t Data_H, Data_L;
	uint8_t Data_I2C[4];

	Data_H = data & 0xF0;
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	f023 030f 	bic.w	r3, r3, #15
 800118e:	73fb      	strb	r3, [r7, #15]
	Data_L = (data << 4) & 0xF0;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	73bb      	strb	r3, [r7, #14]

	if(lcd->BackLight)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7adb      	ldrb	r3, [r3, #11]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <LCD_Write+0x36>
	{
        /* Set bit */
		Data_H |= LCD_BACKLIGHT; 
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA)
 80011ae:	78bb      	ldrb	r3, [r7, #2]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <LCD_Write+0x4e>
	{
        /* Set bit */
		Data_H |= LCD_RS;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	73bb      	strb	r3, [r7, #14]
 80011c4:	e00a      	b.n	80011dc <LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d107      	bne.n	80011dc <LCD_Write+0x64>
	{
        /* Clear bit */
		Data_H &= ~LCD_RS;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	73bb      	strb	r3, [r7, #14]
	}

    /* Assign data to higher bits */
	Data_I2C[0] = Data_H|LCD_EN;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	723b      	strb	r3, [r7, #8]
	LCD_DelayMs(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f001 fbb4 	bl	8002954 <HAL_Delay>
	Data_I2C[1] = Data_H;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	727b      	strb	r3, [r7, #9]

    /* Assign data to lower bits */
	Data_I2C[2] = Data_L|LCD_EN;
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	72bb      	strb	r3, [r7, #10]
	LCD_DelayMs(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f001 fbaa 	bl	8002954 <HAL_Delay>
	Data_I2C[3] = Data_L;
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->I2c, lcd->Address, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);   
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	b299      	uxth	r1, r3
 800120e:	f107 0208 	add.w	r2, r7, #8
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2304      	movs	r3, #4
 800121a:	f002 f877 	bl	800330c <HAL_I2C_Master_Transmit>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <LCD_Init>:

void LCD_Init(LCD_I2C_Name* lcd, I2C_HandleTypeDef* i2c, uint8_t address, uint8_t columns, uint8_t rows)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	4611      	mov	r1, r2
 8001232:	461a      	mov	r2, r3
 8001234:	460b      	mov	r3, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
    lcd->I2c        = i2c;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	601a      	str	r2, [r3, #0]
    lcd->Address    = address;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	711a      	strb	r2, [r3, #4]
    lcd->Columns    = columns;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	715a      	strb	r2, [r3, #5]
    lcd->Rows       = rows;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	7e3a      	ldrb	r2, [r7, #24]
 8001252:	719a      	strb	r2, [r3, #6]

    lcd->FunctionSet    = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2228      	movs	r2, #40	; 0x28
 8001258:	729a      	strb	r2, [r3, #10]
    lcd->EntryMode      = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2206      	movs	r2, #6
 800125e:	71da      	strb	r2, [r3, #7]
    lcd->DisplayControl = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	220c      	movs	r2, #12
 8001264:	721a      	strb	r2, [r3, #8]
    lcd->CursorShift    = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2214      	movs	r2, #20
 800126a:	725a      	strb	r2, [r3, #9]
    lcd->BackLight      = LCD_BACKLIGHT;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2208      	movs	r2, #8
 8001270:	72da      	strb	r2, [r3, #11]

    LCD_DelayMs(50);
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f001 fb6e 	bl	8002954 <HAL_Delay>
	LCD_Write(lcd, 0x33, LCD_COMMAND);
 8001278:	2200      	movs	r2, #0
 800127a:	2133      	movs	r1, #51	; 0x33
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff ff7b 	bl	8001178 <LCD_Write>

	LCD_Write(lcd, 0x33, LCD_COMMAND);
 8001282:	2200      	movs	r2, #0
 8001284:	2133      	movs	r1, #51	; 0x33
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff ff76 	bl	8001178 <LCD_Write>
	LCD_DelayMs(5);
 800128c:	2005      	movs	r0, #5
 800128e:	f001 fb61 	bl	8002954 <HAL_Delay>
	LCD_Write(lcd, 0x32, LCD_COMMAND);
 8001292:	2200      	movs	r2, #0
 8001294:	2132      	movs	r1, #50	; 0x32
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff ff6e 	bl	8001178 <LCD_Write>
	LCD_DelayMs(5);
 800129c:	2005      	movs	r0, #5
 800129e:	f001 fb59 	bl	8002954 <HAL_Delay>
	LCD_Write(lcd, 0x20, LCD_COMMAND);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2120      	movs	r1, #32
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff ff66 	bl	8001178 <LCD_Write>
	LCD_DelayMs(5);
 80012ac:	2005      	movs	r0, #5
 80012ae:	f001 fb51 	bl	8002954 <HAL_Delay>
	
	LCD_Write(lcd, lcd->EntryMode, LCD_COMMAND);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	79db      	ldrb	r3, [r3, #7]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff ff5c 	bl	8001178 <LCD_Write>
	LCD_Write(lcd, lcd->DisplayControl, LCD_COMMAND);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	7a1b      	ldrb	r3, [r3, #8]
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff ff55 	bl	8001178 <LCD_Write>
	LCD_Write(lcd, lcd->CursorShift, LCD_COMMAND);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	7a5b      	ldrb	r3, [r3, #9]
 80012d2:	2200      	movs	r2, #0
 80012d4:	4619      	mov	r1, r3
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff ff4e 	bl	8001178 <LCD_Write>
	LCD_Write(lcd, lcd->FunctionSet, LCD_COMMAND);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	7a9b      	ldrb	r3, [r3, #10]
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f7ff ff47 	bl	8001178 <LCD_Write>
	
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2101      	movs	r1, #1
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7ff ff42 	bl	8001178 <LCD_Write>
	LCD_Write(lcd, LCD_RETURNHOME, LCD_COMMAND);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2102      	movs	r1, #2
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff ff3d 	bl	8001178 <LCD_Write>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <LCD_WriteChar>:

static void LCD_WriteChar(LCD_I2C_Name* lcd, char character)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]
	LCD_Write(lcd, character, LCD_DATA);
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	2201      	movs	r2, #1
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff2d 	bl	8001178 <LCD_Write>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <LCD_WriteString>:

void LCD_WriteString(LCD_I2C_Name* lcd, char *string)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
	while(*string)
 8001330:	e007      	b.n	8001342 <LCD_WriteString+0x1c>
	{
		LCD_WriteChar(lcd, *string++);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	603a      	str	r2, [r7, #0]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffe2 	bl	8001306 <LCD_WriteChar>
	while(*string)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f3      	bne.n	8001332 <LCD_WriteString+0xc>
	}
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <LCD_Clear>:

void LCD_Clear(LCD_I2C_Name* lcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 800135c:	2200      	movs	r2, #0
 800135e:	2101      	movs	r1, #1
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff09 	bl	8001178 <LCD_Write>
	LCD_DelayMs(5);
 8001366:	2005      	movs	r0, #5
 8001368:	f001 faf4 	bl	8002954 <HAL_Delay>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <LCD_SetCursor>:

void LCD_SetCursor(LCD_I2C_Name* lcd, uint8_t x_pos, uint8_t y_pos)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
 8001380:	4613      	mov	r3, r2
 8001382:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]

	if(x_pos >= lcd->Columns)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	795b      	ldrb	r3, [r3, #5]
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	429a      	cmp	r2, r3
 8001390:	d303      	bcc.n	800139a <LCD_SetCursor+0x26>
	{
		x_pos = lcd->Columns - 1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	795b      	ldrb	r3, [r3, #5]
 8001396:	3b01      	subs	r3, #1
 8001398:	70fb      	strb	r3, [r7, #3]
	}

	if(y_pos >= lcd->Rows)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	799b      	ldrb	r3, [r3, #6]
 800139e:	78ba      	ldrb	r2, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d303      	bcc.n	80013ac <LCD_SetCursor+0x38>
	{
		y_pos = lcd->Rows -1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	70bb      	strb	r3, [r7, #2]
	}

	switch (y_pos)
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d819      	bhi.n	80013e6 <LCD_SetCursor+0x72>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <LCD_SetCursor+0x44>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013cf 	.word	0x080013cf
 80013c0:	080013d7 	.word	0x080013d7
 80013c4:	080013df 	.word	0x080013df
	{
		case 0:
			DRAM_ADDRESS = 0x00 + x_pos;
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	73fb      	strb	r3, [r7, #15]
			break;
 80013cc:	e00b      	b.n	80013e6 <LCD_SetCursor+0x72>
		case 1:
			DRAM_ADDRESS = 0x40 + x_pos;
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	3340      	adds	r3, #64	; 0x40
 80013d2:	73fb      	strb	r3, [r7, #15]
			break;
 80013d4:	e007      	b.n	80013e6 <LCD_SetCursor+0x72>
		case 2:
			DRAM_ADDRESS = 0x14 + x_pos;
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	3314      	adds	r3, #20
 80013da:	73fb      	strb	r3, [r7, #15]
			break;
 80013dc:	e003      	b.n	80013e6 <LCD_SetCursor+0x72>
		case 3:
			DRAM_ADDRESS = 0x54 + x_pos;
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	3354      	adds	r3, #84	; 0x54
 80013e2:	73fb      	strb	r3, [r7, #15]
			break;
 80013e4:	bf00      	nop
	}

	LCD_Write(lcd, LCD_SETDDRAMADDR|DRAM_ADDRESS, LCD_COMMAND);
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fec0 	bl	8001178 <LCD_Write>
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4906      	ldr	r1, [pc, #24]	; (8001434 <__NVIC_EnableIRQ+0x34>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db12      	blt.n	8001470 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	490a      	ldr	r1, [pc, #40]	; (800147c <__NVIC_DisableIRQ+0x44>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	3320      	adds	r3, #32
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001464:	f3bf 8f4f 	dsb	sy
}
 8001468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146a:	f3bf 8f6f 	isb	sy
}
 800146e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001488:	1d39      	adds	r1, r7, #4
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	2201      	movs	r2, #1
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <__io_putchar+0x20>)
 8001492:	f003 fea3 	bl	80051dc <HAL_UART_Transmit>

	return ch;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000032c 	.word	0x2000032c

080014a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_UART_RxCpltCallback+0x70>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d11e      	bne.n	80014f6 <HAL_UART_RxCpltCallback+0x52>
	{
		if (rxData[rxDataIndex] == '@')
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_UART_RxCpltCallback+0x74>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_UART_RxCpltCallback+0x78>)
 80014c0:	5c9b      	ldrb	r3, [r3, r2]
 80014c2:	2b40      	cmp	r3, #64	; 0x40
 80014c4:	d111      	bne.n	80014ea <HAL_UART_RxCpltCallback+0x46>
		{
			rxData[rxDataIndex] = '\0';
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_UART_RxCpltCallback+0x74>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_UART_RxCpltCallback+0x78>)
 80014ce:	2100      	movs	r1, #0
 80014d0:	5499      	strb	r1, [r3, r2]
			queueStatus = Queue_PushFront(&queue, vTask_HandleInterrupt);
 80014d2:	4913      	ldr	r1, [pc, #76]	; (8001520 <HAL_UART_RxCpltCallback+0x7c>)
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <HAL_UART_RxCpltCallback+0x80>)
 80014d6:	f001 f922 	bl	800271e <Queue_PushFront>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_UART_RxCpltCallback+0x84>)
 80014e0:	701a      	strb	r2, [r3, #0]
			rxDataIndex = 0;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_UART_RxCpltCallback+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e005      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x52>
		}
		else
		{
			rxDataIndex ++;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_UART_RxCpltCallback+0x74>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_UART_RxCpltCallback+0x74>)
 80014f4:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxData[rxDataIndex], 1);
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_UART_RxCpltCallback+0x74>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_UART_RxCpltCallback+0x78>)
 80014fe:	4413      	add	r3, r2
 8001500:	2201      	movs	r2, #1
 8001502:	4619      	mov	r1, r3
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <HAL_UART_RxCpltCallback+0x70>)
 8001506:	f003 feec 	bl	80052e2 <HAL_UART_Receive_IT>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000032c 	.word	0x2000032c
 8001518:	20000555 	.word	0x20000555
 800151c:	20000548 	.word	0x20000548
 8001520:	0800152d 	.word	0x0800152d
 8001524:	200003a0 	.word	0x200003a0
 8001528:	20000534 	.word	0x20000534

0800152c <vTask_HandleInterrupt>:

void vTask_HandleInterrupt()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(USART1_IRQn);
 8001532:	2025      	movs	r0, #37	; 0x25
 8001534:	f7ff ff80 	bl	8001438 <__NVIC_DisableIRQ>
	const uint8_t* numPart;
	uint8_t buffer[5];
	printf("\n");
 8001538:	200a      	movs	r0, #10
 800153a:	f005 fb33 	bl	8006ba4 <putchar>
	switch (strlen((const char*)rxData))
 800153e:	4878      	ldr	r0, [pc, #480]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 8001540:	f7fe fe10 	bl	8000164 <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d008      	beq.n	800155c <vTask_HandleInterrupt+0x30>
 800154a:	2b0c      	cmp	r3, #12
 800154c:	f200 80da 	bhi.w	8001704 <vTask_HandleInterrupt+0x1d8>
 8001550:	2b08      	cmp	r3, #8
 8001552:	f000 8091 	beq.w	8001678 <vTask_HandleInterrupt+0x14c>
 8001556:	2b0b      	cmp	r3, #11
 8001558:	d060      	beq.n	800161c <vTask_HandleInterrupt+0xf0>
 800155a:	e0d3      	b.n	8001704 <vTask_HandleInterrupt+0x1d8>
	{
		case RGB_COMMAND_LEN:
			if (rxData[0] == 'r' && rxData[1] == 'g' && rxData[2] == 'b')
 800155c:	4b70      	ldr	r3, [pc, #448]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b72      	cmp	r3, #114	; 0x72
 8001562:	d157      	bne.n	8001614 <vTask_HandleInterrupt+0xe8>
 8001564:	4b6e      	ldr	r3, [pc, #440]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	2b67      	cmp	r3, #103	; 0x67
 800156a:	d153      	bne.n	8001614 <vTask_HandleInterrupt+0xe8>
 800156c:	4b6c      	ldr	r3, [pc, #432]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	2b62      	cmp	r3, #98	; 0x62
 8001572:	d14f      	bne.n	8001614 <vTask_HandleInterrupt+0xe8>
			{
				numPart = rxData + 3;
 8001574:	4b6b      	ldr	r3, [pc, #428]	; (8001724 <vTask_HandleInterrupt+0x1f8>)
 8001576:	613b      	str	r3, [r7, #16]
				for (int i = 0; i < 3; i++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e038      	b.n	80015f0 <vTask_HandleInterrupt+0xc4>
				{
					strncpy(buffer, (const char*)(numPart + i * 3), 3);
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	461a      	mov	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1899      	adds	r1, r3, r2
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2203      	movs	r2, #3
 8001590:	4618      	mov	r0, r3
 8001592:	f005 fbb5 	bl	8006d00 <strncpy>
					buffer[3] = '\0'; // Null-terminate the buffer
 8001596:	2300      	movs	r3, #0
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d01b      	beq.n	80015d8 <vTask_HandleInterrupt+0xac>
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	dc21      	bgt.n	80015ea <vTask_HandleInterrupt+0xbe>
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <vTask_HandleInterrupt+0x88>
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d009      	beq.n	80015c6 <vTask_HandleInterrupt+0x9a>
 80015b2:	e01a      	b.n	80015ea <vTask_HandleInterrupt+0xbe>

					switch (i)
					{
						case 0: red = (uint8_t)atoi((const char*)buffer); break;
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 fc38 	bl	8005e2c <atoi>
 80015bc:	4603      	mov	r3, r0
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <vTask_HandleInterrupt+0x1fc>)
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	e011      	b.n	80015ea <vTask_HandleInterrupt+0xbe>
						case 1: green = (uint8_t)atoi((const char*)buffer); break;
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fc2f 	bl	8005e2c <atoi>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b56      	ldr	r3, [pc, #344]	; (800172c <vTask_HandleInterrupt+0x200>)
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	e008      	b.n	80015ea <vTask_HandleInterrupt+0xbe>
						case 2: blue = (uint8_t)atoi((const char*)buffer); break;
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fc26 	bl	8005e2c <atoi>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b52      	ldr	r3, [pc, #328]	; (8001730 <vTask_HandleInterrupt+0x204>)
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	bf00      	nop
				for (int i = 0; i < 3; i++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	ddc3      	ble.n	800157e <vTask_HandleInterrupt+0x52>
					}
				}
				printf("Change RGB color:\r\n");
 80015f6:	484f      	ldr	r0, [pc, #316]	; (8001734 <vTask_HandleInterrupt+0x208>)
 80015f8:	f005 fb56 	bl	8006ca8 <puts>
				printf("RED = %d\r\nGREEN = %d\r\nBLUE = %d\r\n\n", red, green, blue);
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <vTask_HandleInterrupt+0x1fc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	4b4a      	ldr	r3, [pc, #296]	; (800172c <vTask_HandleInterrupt+0x200>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b49      	ldr	r3, [pc, #292]	; (8001730 <vTask_HandleInterrupt+0x204>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	484a      	ldr	r0, [pc, #296]	; (8001738 <vTask_HandleInterrupt+0x20c>)
 800160e:	f005 fab1 	bl	8006b74 <iprintf>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
			}
			break;
 8001612:	e07b      	b.n	800170c <vTask_HandleInterrupt+0x1e0>
				printf("Error Command Syntax\r\n\n");
 8001614:	4849      	ldr	r0, [pc, #292]	; (800173c <vTask_HandleInterrupt+0x210>)
 8001616:	f005 fb47 	bl	8006ca8 <puts>
			break;
 800161a:	e077      	b.n	800170c <vTask_HandleInterrupt+0x1e0>
		case DISPLAY_COMMAND_LEN:
			if (strcmp((const char*)rxData, "displaytemp") == 0)
 800161c:	4948      	ldr	r1, [pc, #288]	; (8001740 <vTask_HandleInterrupt+0x214>)
 800161e:	4840      	ldr	r0, [pc, #256]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 8001620:	f7fe fd96 	bl	8000150 <strcmp>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <vTask_HandleInterrupt+0x10c>
			{
				DisplayMode = DISPLAY_TEMP;
 800162a:	4b46      	ldr	r3, [pc, #280]	; (8001744 <vTask_HandleInterrupt+0x218>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_TEMP\r\n\n");
 8001630:	4845      	ldr	r0, [pc, #276]	; (8001748 <vTask_HandleInterrupt+0x21c>)
 8001632:	f005 fb39 	bl	8006ca8 <puts>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
			}
			break;
 8001636:	e069      	b.n	800170c <vTask_HandleInterrupt+0x1e0>
			else if (strcmp((const char*)rxData, "displayhumi") == 0)
 8001638:	4944      	ldr	r1, [pc, #272]	; (800174c <vTask_HandleInterrupt+0x220>)
 800163a:	4839      	ldr	r0, [pc, #228]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 800163c:	f7fe fd88 	bl	8000150 <strcmp>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d106      	bne.n	8001654 <vTask_HandleInterrupt+0x128>
				DisplayMode = DISPLAY_HUMI;
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <vTask_HandleInterrupt+0x218>)
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_HUMI\r\n\n");
 800164c:	4840      	ldr	r0, [pc, #256]	; (8001750 <vTask_HandleInterrupt+0x224>)
 800164e:	f005 fb2b 	bl	8006ca8 <puts>
			break;
 8001652:	e05b      	b.n	800170c <vTask_HandleInterrupt+0x1e0>
			else if (strcmp((const char*)rxData, "displayboth") == 0)
 8001654:	493f      	ldr	r1, [pc, #252]	; (8001754 <vTask_HandleInterrupt+0x228>)
 8001656:	4832      	ldr	r0, [pc, #200]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 8001658:	f7fe fd7a 	bl	8000150 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <vTask_HandleInterrupt+0x144>
				DisplayMode = DISPLAY_TEMP_HUMI;
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <vTask_HandleInterrupt+0x218>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_TEMP_HUMI\r\n\n");
 8001668:	483b      	ldr	r0, [pc, #236]	; (8001758 <vTask_HandleInterrupt+0x22c>)
 800166a:	f005 fb1d 	bl	8006ca8 <puts>
			break;
 800166e:	e04d      	b.n	800170c <vTask_HandleInterrupt+0x1e0>
				printf("Error Command Syntax\r\n\n");
 8001670:	4832      	ldr	r0, [pc, #200]	; (800173c <vTask_HandleInterrupt+0x210>)
 8001672:	f005 fb19 	bl	8006ca8 <puts>
			break;
 8001676:	e049      	b.n	800170c <vTask_HandleInterrupt+0x1e0>
		case TIME_COMMAND_LEN:
			if(rxData[0] == 't' && rxData[1] == 'i' && rxData[2] == 'm' && rxData[3] == 'e')
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b74      	cmp	r3, #116	; 0x74
 800167e:	d13c      	bne.n	80016fa <vTask_HandleInterrupt+0x1ce>
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	2b69      	cmp	r3, #105	; 0x69
 8001686:	d138      	bne.n	80016fa <vTask_HandleInterrupt+0x1ce>
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	2b6d      	cmp	r3, #109	; 0x6d
 800168e:	d134      	bne.n	80016fa <vTask_HandleInterrupt+0x1ce>
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <vTask_HandleInterrupt+0x1f4>)
 8001692:	78db      	ldrb	r3, [r3, #3]
 8001694:	2b65      	cmp	r3, #101	; 0x65
 8001696:	d130      	bne.n	80016fa <vTask_HandleInterrupt+0x1ce>
			{
				numPart = rxData + 4;
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <vTask_HandleInterrupt+0x230>)
 800169a:	613b      	str	r3, [r7, #16]
				strncpy(buffer, (const char*)numPart, 4);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2204      	movs	r2, #4
 80016a0:	6939      	ldr	r1, [r7, #16]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 fb2c 	bl	8006d00 <strncpy>
				buffer[4] = '\0'; // Null-terminate the buffer
 80016a8:	2300      	movs	r3, #0
 80016aa:	723b      	strb	r3, [r7, #8]
				uint32_t old_dhtInterval = dhtInterval;
 80016ac:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <vTask_HandleInterrupt+0x234>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
				dhtInterval = (uint32_t)atoi((const char*)buffer);
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 fbb9 	bl	8005e2c <atoi>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <vTask_HandleInterrupt+0x234>)
 80016c0:	601a      	str	r2, [r3, #0]

				if (dhtInterval >= 1500 && dhtInterval < 10000)
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <vTask_HandleInterrupt+0x234>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f240 52db 	movw	r2, #1499	; 0x5db
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d90d      	bls.n	80016ea <vTask_HandleInterrupt+0x1be>
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <vTask_HandleInterrupt+0x234>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d807      	bhi.n	80016ea <vTask_HandleInterrupt+0x1be>
				{
					printf("Change DHT11 Period from %d to %d\r\n\n", old_dhtInterval, dhtInterval);
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <vTask_HandleInterrupt+0x234>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	4820      	ldr	r0, [pc, #128]	; (8001764 <vTask_HandleInterrupt+0x238>)
 80016e4:	f005 fa46 	bl	8006b74 <iprintf>
			{
 80016e8:	e00b      	b.n	8001702 <vTask_HandleInterrupt+0x1d6>
				}
				else
				{
					printf("The new Period is invalid! DHT11 Period stays the same: %d\r\n\n", old_dhtInterval);
 80016ea:	68f9      	ldr	r1, [r7, #12]
 80016ec:	481e      	ldr	r0, [pc, #120]	; (8001768 <vTask_HandleInterrupt+0x23c>)
 80016ee:	f005 fa41 	bl	8006b74 <iprintf>
					dhtInterval = old_dhtInterval;
 80016f2:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <vTask_HandleInterrupt+0x234>)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6013      	str	r3, [r2, #0]
			{
 80016f8:	e003      	b.n	8001702 <vTask_HandleInterrupt+0x1d6>
				}
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
 80016fa:	4810      	ldr	r0, [pc, #64]	; (800173c <vTask_HandleInterrupt+0x210>)
 80016fc:	f005 fad4 	bl	8006ca8 <puts>
			}
			break;
 8001700:	e004      	b.n	800170c <vTask_HandleInterrupt+0x1e0>
 8001702:	e003      	b.n	800170c <vTask_HandleInterrupt+0x1e0>
		default:
			printf("Error Command Syntax\r\n\n");
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <vTask_HandleInterrupt+0x210>)
 8001706:	f005 facf 	bl	8006ca8 <puts>
			break;
 800170a:	bf00      	nop
	}

	count = 0;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <vTask_HandleInterrupt+0x240>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(USART1_IRQn);
 8001712:	2025      	movs	r0, #37	; 0x25
 8001714:	f7ff fe74 	bl	8001400 <__NVIC_EnableIRQ>

}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000548 	.word	0x20000548
 8001724:	2000054b 	.word	0x2000054b
 8001728:	20000544 	.word	0x20000544
 800172c:	20000545 	.word	0x20000545
 8001730:	20000546 	.word	0x20000546
 8001734:	0800a920 	.word	0x0800a920
 8001738:	0800a934 	.word	0x0800a934
 800173c:	0800a958 	.word	0x0800a958
 8001740:	0800a970 	.word	0x0800a970
 8001744:	20000556 	.word	0x20000556
 8001748:	0800a97c 	.word	0x0800a97c
 800174c:	0800a9a4 	.word	0x0800a9a4
 8001750:	0800a9b0 	.word	0x0800a9b0
 8001754:	0800a9d8 	.word	0x0800a9d8
 8001758:	0800a9e4 	.word	0x0800a9e4
 800175c:	2000054c 	.word	0x2000054c
 8001760:	20000000 	.word	0x20000000
 8001764:	0800aa10 	.word	0x0800aa10
 8001768:	0800aa38 	.word	0x0800aa38
 800176c:	2000055c 	.word	0x2000055c

08001770 <vTask_ReadData>:

void vTask_ReadData()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	printf("vTask_ReadData IN: %ld\r\n", uwTick);
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <vTask_ReadData+0x60>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	4816      	ldr	r0, [pc, #88]	; (80017d4 <vTask_ReadData+0x64>)
 800177c:	f005 f9fa 	bl	8006b74 <iprintf>

	NVIC_DisableIRQ(USART1_IRQn);
 8001780:	2025      	movs	r0, #37	; 0x25
 8001782:	f7ff fe59 	bl	8001438 <__NVIC_DisableIRQ>
	dhtStatus = DHT11_GetData(&dht);
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <vTask_ReadData+0x68>)
 8001788:	f7ff fc80 	bl	800108c <DHT11_GetData>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <vTask_ReadData+0x6c>)
 8001792:	701a      	strb	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8001794:	2025      	movs	r0, #37	; 0x25
 8001796:	f7ff fe33 	bl	8001400 <__NVIC_EnableIRQ>

	switch(dhtStatus)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <vTask_ReadData+0x6c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d005      	beq.n	80017ae <vTask_ReadData+0x3e>
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d107      	bne.n	80017b6 <vTask_ReadData+0x46>
	{
		case DHT11_ERR_CHECKSUM:
			printf("DHT11 ERROR CHECKSUM\r\n");
 80017a6:	480e      	ldr	r0, [pc, #56]	; (80017e0 <vTask_ReadData+0x70>)
 80017a8:	f005 fa7e 	bl	8006ca8 <puts>
			break;
 80017ac:	e007      	b.n	80017be <vTask_ReadData+0x4e>
		case DHT11_ERR_RESPONSE:
			printf("DHT11 ERROR RESPONSE\r\n");
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <vTask_ReadData+0x74>)
 80017b0:	f005 fa7a 	bl	8006ca8 <puts>
			break;
 80017b4:	e003      	b.n	80017be <vTask_ReadData+0x4e>
		default:
			printf("Get Data from DHT11 successfully\r\n");
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <vTask_ReadData+0x78>)
 80017b8:	f005 fa76 	bl	8006ca8 <puts>
			break;
 80017bc:	bf00      	nop
	}

	printf("vTask_ReadData OUT: %ld\r\n\n", uwTick);
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <vTask_ReadData+0x60>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4619      	mov	r1, r3
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <vTask_ReadData+0x7c>)
 80017c6:	f005 f9d5 	bl	8006b74 <iprintf>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000564 	.word	0x20000564
 80017d4:	0800aa78 	.word	0x0800aa78
 80017d8:	20000388 	.word	0x20000388
 80017dc:	2000039c 	.word	0x2000039c
 80017e0:	0800aa94 	.word	0x0800aa94
 80017e4:	0800aaac 	.word	0x0800aaac
 80017e8:	0800aac4 	.word	0x0800aac4
 80017ec:	0800aae8 	.word	0x0800aae8

080017f0 <vTask_Display>:

void vTask_Display()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
	char temp[18], humi[15];

	printf("vTask_Display IN: %ld\r\n", uwTick);
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <vTask_Display+0xcc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4830      	ldr	r0, [pc, #192]	; (80018c0 <vTask_Display+0xd0>)
 80017fe:	f005 f9b9 	bl	8006b74 <iprintf>

  	if (dhtStatus == DHT11_OK)
 8001802:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <vTask_Display+0xd4>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d14d      	bne.n	80018a6 <vTask_Display+0xb6>
  	{
  	  	sprintf(temp, "Temp: %.2f", dht.Temp);
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <vTask_Display+0xd8>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe14 	bl	800043c <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	f107 0014 	add.w	r0, r7, #20
 800181c:	492b      	ldr	r1, [pc, #172]	; (80018cc <vTask_Display+0xdc>)
 800181e:	f005 fa4f 	bl	8006cc0 <siprintf>
  	  	sprintf(humi, "Humi: %.2f", dht.Humi);
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <vTask_Display+0xd8>)
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe08 	bl	800043c <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	1d38      	adds	r0, r7, #4
 8001832:	4927      	ldr	r1, [pc, #156]	; (80018d0 <vTask_Display+0xe0>)
 8001834:	f005 fa44 	bl	8006cc0 <siprintf>

  	  	LCD_Clear(&lcd);
 8001838:	4826      	ldr	r0, [pc, #152]	; (80018d4 <vTask_Display+0xe4>)
 800183a:	f7ff fd8b 	bl	8001354 <LCD_Clear>

  	  	switch (DisplayMode)
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <vTask_Display+0xe8>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d002      	beq.n	800184c <vTask_Display+0x5c>
 8001846:	2b02      	cmp	r3, #2
 8001848:	d00c      	beq.n	8001864 <vTask_Display+0x74>
 800184a:	e016      	b.n	800187a <vTask_Display+0x8a>
  	  	{
  	  		case DISPLAY_TEMP:
  	  			LCD_SetCursor(&lcd, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	4820      	ldr	r0, [pc, #128]	; (80018d4 <vTask_Display+0xe4>)
 8001852:	f7ff fd8f 	bl	8001374 <LCD_SetCursor>
  	  			LCD_WriteString(&lcd, temp);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	481d      	ldr	r0, [pc, #116]	; (80018d4 <vTask_Display+0xe4>)
 800185e:	f7ff fd62 	bl	8001326 <LCD_WriteString>
  	  			break;
 8001862:	e021      	b.n	80018a8 <vTask_Display+0xb8>
  	  		case DISPLAY_HUMI:
  	  			LCD_SetCursor(&lcd, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	481a      	ldr	r0, [pc, #104]	; (80018d4 <vTask_Display+0xe4>)
 800186a:	f7ff fd83 	bl	8001374 <LCD_SetCursor>
  	  			LCD_WriteString(&lcd, humi);
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	4619      	mov	r1, r3
 8001872:	4818      	ldr	r0, [pc, #96]	; (80018d4 <vTask_Display+0xe4>)
 8001874:	f7ff fd57 	bl	8001326 <LCD_WriteString>
  	  			break;
 8001878:	e016      	b.n	80018a8 <vTask_Display+0xb8>
  	  		default:
  	  			LCD_SetCursor(&lcd, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	4815      	ldr	r0, [pc, #84]	; (80018d4 <vTask_Display+0xe4>)
 8001880:	f7ff fd78 	bl	8001374 <LCD_SetCursor>
  	  			LCD_WriteString(&lcd, temp);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4812      	ldr	r0, [pc, #72]	; (80018d4 <vTask_Display+0xe4>)
 800188c:	f7ff fd4b 	bl	8001326 <LCD_WriteString>
  	  			LCD_SetCursor(&lcd, 0, 1);
 8001890:	2201      	movs	r2, #1
 8001892:	2100      	movs	r1, #0
 8001894:	480f      	ldr	r0, [pc, #60]	; (80018d4 <vTask_Display+0xe4>)
 8001896:	f7ff fd6d 	bl	8001374 <LCD_SetCursor>
  	  			LCD_WriteString(&lcd, humi);
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <vTask_Display+0xe4>)
 80018a0:	f7ff fd41 	bl	8001326 <LCD_WriteString>
  	  			break;
 80018a4:	e000      	b.n	80018a8 <vTask_Display+0xb8>
  	  	}
  	}
 80018a6:	bf00      	nop

  	printf("vTask_Display OUT: %ld\r\n\n", uwTick);
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <vTask_Display+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <vTask_Display+0xec>)
 80018b0:	f005 f960 	bl	8006b74 <iprintf>
}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000564 	.word	0x20000564
 80018c0:	0800ab04 	.word	0x0800ab04
 80018c4:	2000039c 	.word	0x2000039c
 80018c8:	20000388 	.word	0x20000388
 80018cc:	0800ab1c 	.word	0x0800ab1c
 80018d0:	0800ab28 	.word	0x0800ab28
 80018d4:	20000538 	.word	0x20000538
 80018d8:	20000556 	.word	0x20000556
 80018dc:	0800ab34 	.word	0x0800ab34

080018e0 <vTask_ControlRgb>:

void vTask_ControlRgb()
{
 80018e0:	b598      	push	{r3, r4, r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	printf("vTask_ControlRgb IN: %ld\r\n", uwTick);
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <vTask_ControlRgb+0x4c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4811      	ldr	r0, [pc, #68]	; (8001930 <vTask_ControlRgb+0x50>)
 80018ec:	f005 f942 	bl	8006b74 <iprintf>

	RGB_SetValue(&rgb, red++, green++, blue++);
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <vTask_ControlRgb+0x54>)
 80018f2:	7819      	ldrb	r1, [r3, #0]
 80018f4:	1c4b      	adds	r3, r1, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <vTask_ControlRgb+0x54>)
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <vTask_ControlRgb+0x58>)
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	1c53      	adds	r3, r2, #1
 8001902:	b2d8      	uxtb	r0, r3
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <vTask_ControlRgb+0x58>)
 8001906:	7018      	strb	r0, [r3, #0]
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <vTask_ControlRgb+0x5c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	1c58      	adds	r0, r3, #1
 800190e:	b2c4      	uxtb	r4, r0
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <vTask_ControlRgb+0x5c>)
 8001912:	7004      	strb	r4, [r0, #0]
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <vTask_ControlRgb+0x60>)
 8001916:	f000 fc56 	bl	80021c6 <RGB_SetValue>

	printf("vTask_ControlRgb OUT: %ld\r\n\n", uwTick);
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <vTask_ControlRgb+0x4c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	4808      	ldr	r0, [pc, #32]	; (8001944 <vTask_ControlRgb+0x64>)
 8001922:	f005 f927 	bl	8006b74 <iprintf>
}
 8001926:	bf00      	nop
 8001928:	bd98      	pop	{r3, r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20000564 	.word	0x20000564
 8001930:	0800ab50 	.word	0x0800ab50
 8001934:	20000544 	.word	0x20000544
 8001938:	20000545 	.word	0x20000545
 800193c:	20000546 	.word	0x20000546
 8001940:	20000374 	.word	0x20000374
 8001944:	0800ab6c 	.word	0x0800ab6c

08001948 <vTask_SendToCom>:

void vTask_SendToCom()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	printf("vTask_SendToCom IN: %ld\r\n", uwTick);
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <vTask_SendToCom+0x98>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	4824      	ldr	r0, [pc, #144]	; (80019e4 <vTask_SendToCom+0x9c>)
 8001954:	f005 f90e 	bl	8006b74 <iprintf>

	if (dhtStatus == DHT11_OK)
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <vTask_SendToCom+0xa0>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d135      	bne.n	80019cc <vTask_SendToCom+0x84>
	{
		switch (DisplayMode)
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <vTask_SendToCom+0xa4>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d006      	beq.n	8001976 <vTask_SendToCom+0x2e>
 8001968:	2b02      	cmp	r3, #2
 800196a:	dc30      	bgt.n	80019ce <vTask_SendToCom+0x86>
 800196c:	2b00      	cmp	r3, #0
 800196e:	d018      	beq.n	80019a2 <vTask_SendToCom+0x5a>
 8001970:	2b01      	cmp	r3, #1
 8001972:	d00b      	beq.n	800198c <vTask_SendToCom+0x44>
 8001974:	e02b      	b.n	80019ce <vTask_SendToCom+0x86>
		{
			case DISPLAY_HUMI:
				printf("Humidity: %.2f\r\n", dht.Humi);
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <vTask_SendToCom+0xa8>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fd5e 	bl	800043c <__aeabi_f2d>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	481b      	ldr	r0, [pc, #108]	; (80019f4 <vTask_SendToCom+0xac>)
 8001986:	f005 f8f5 	bl	8006b74 <iprintf>
				break;
 800198a:	e020      	b.n	80019ce <vTask_SendToCom+0x86>
			case DISPLAY_TEMP:
				printf("Temperature: %.2f\r\n", dht.Temp);
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <vTask_SendToCom+0xa8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fd53 	bl	800043c <__aeabi_f2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4817      	ldr	r0, [pc, #92]	; (80019f8 <vTask_SendToCom+0xb0>)
 800199c:	f005 f8ea 	bl	8006b74 <iprintf>
				break;
 80019a0:	e015      	b.n	80019ce <vTask_SendToCom+0x86>
			case DISPLAY_TEMP_HUMI:
				printf("Temperature: %.2f\r\n", dht.Temp);
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <vTask_SendToCom+0xa8>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd48 	bl	800043c <__aeabi_f2d>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4811      	ldr	r0, [pc, #68]	; (80019f8 <vTask_SendToCom+0xb0>)
 80019b2:	f005 f8df 	bl	8006b74 <iprintf>
				printf("Humidity: %.2f\r\n", dht.Humi);
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <vTask_SendToCom+0xa8>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd3e 	bl	800043c <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <vTask_SendToCom+0xac>)
 80019c6:	f005 f8d5 	bl	8006b74 <iprintf>
				break;
 80019ca:	e000      	b.n	80019ce <vTask_SendToCom+0x86>
		}
	}
 80019cc:	bf00      	nop

	printf("vTask_SendToCom OUT: %ld\r\n\n", uwTick);
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <vTask_SendToCom+0x98>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <vTask_SendToCom+0xb4>)
 80019d6:	f005 f8cd 	bl	8006b74 <iprintf>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000564 	.word	0x20000564
 80019e4:	0800ab8c 	.word	0x0800ab8c
 80019e8:	2000039c 	.word	0x2000039c
 80019ec:	20000556 	.word	0x20000556
 80019f0:	20000388 	.word	0x20000388
 80019f4:	0800aba8 	.word	0x0800aba8
 80019f8:	0800abbc 	.word	0x0800abbc
 80019fc:	0800abd0 	.word	0x0800abd0

08001a00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == htim1.Instance)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d12d      	bne.n	8001a70 <HAL_TIM_PeriodElapsedCallback+0x70>
	 {
		 if (count == dhtInterval)
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d113      	bne.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0x48>
		 {
			 Queue_PushRear(&queue, vTask_ReadData);
 8001a20:	4918      	ldr	r1, [pc, #96]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001a22:	4819      	ldr	r0, [pc, #100]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a24:	f000 fe4f 	bl	80026c6 <Queue_PushRear>
			 Queue_PushRear(&queue, vTask_Display);
 8001a28:	4918      	ldr	r1, [pc, #96]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a2a:	4817      	ldr	r0, [pc, #92]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a2c:	f000 fe4b 	bl	80026c6 <Queue_PushRear>
			 Queue_PushRear(&queue, vTask_SendToCom);
 8001a30:	4917      	ldr	r1, [pc, #92]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a32:	4815      	ldr	r0, [pc, #84]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a34:	f000 fe47 	bl	80026c6 <Queue_PushRear>
			 Queue_PushRear(&queue, vTask_ControlRgb);
 8001a38:	4916      	ldr	r1, [pc, #88]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a3a:	4813      	ldr	r0, [pc, #76]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a3c:	f000 fe43 	bl	80026c6 <Queue_PushRear>
			 count = 0;
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e00e      	b.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x66>
		 }
		 else if (count % rgbInterval == 0)
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a50:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a54:	fb01 f202 	mul.w	r2, r1, r2
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x66>
		 {
			 Queue_PushRear(&queue, vTask_ControlRgb);
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a60:	4809      	ldr	r0, [pc, #36]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a62:	f000 fe30 	bl	80026c6 <Queue_PushRear>
		 }
		 count++;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a6e:	6013      	str	r3, [r2, #0]
	 }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000254 	.word	0x20000254
 8001a7c:	2000055c 	.word	0x2000055c
 8001a80:	20000000 	.word	0x20000000
 8001a84:	08001771 	.word	0x08001771
 8001a88:	200003a0 	.word	0x200003a0
 8001a8c:	080017f1 	.word	0x080017f1
 8001a90:	08001949 	.word	0x08001949
 8001a94:	080018e1 	.word	0x080018e1

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a9e:	f000 fef7 	bl	8002890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa2:	f000 f863 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa6:	f000 fa29 	bl	8001efc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001aaa:	f000 f923 	bl	8001cf4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001aae:	f000 f9ad 	bl	8001e0c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001ab2:	f000 f9f9 	bl	8001ea8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001ab6:	f000 f89f 	bl	8001bf8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001aba:	f000 f8cb 	bl	8001c54 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  printf("Start\r\n\n");
 8001abe:	481d      	ldr	r0, [pc, #116]	; (8001b34 <main+0x9c>)
 8001ac0:	f005 f8f2 	bl	8006ca8 <puts>

  DHT11_Init(&dht, DHT_GPIO_Port, DHT_Pin, &htim4);
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <main+0xa0>)
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	491c      	ldr	r1, [pc, #112]	; (8001b3c <main+0xa4>)
 8001aca:	481d      	ldr	r0, [pc, #116]	; (8001b40 <main+0xa8>)
 8001acc:	f7ff fabe 	bl	800104c <DHT11_Init>
  RGB_Init(&rgb, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3);
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	491a      	ldr	r1, [pc, #104]	; (8001b44 <main+0xac>)
 8001ada:	481b      	ldr	r0, [pc, #108]	; (8001b48 <main+0xb0>)
 8001adc:	f000 fb3e 	bl	800215c <RGB_Init>
  Queue_Init(&queue, MAX_TASKS);
 8001ae0:	2164      	movs	r1, #100	; 0x64
 8001ae2:	481a      	ldr	r0, [pc, #104]	; (8001b4c <main+0xb4>)
 8001ae4:	f000 fdd2 	bl	800268c <Queue_Init>
  LCD_Init(&lcd, &hi2c2, LDC_DEFAULT_ADDRESS, 20, 4);
 8001ae8:	2304      	movs	r3, #4
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2314      	movs	r3, #20
 8001aee:	224e      	movs	r2, #78	; 0x4e
 8001af0:	4917      	ldr	r1, [pc, #92]	; (8001b50 <main+0xb8>)
 8001af2:	4818      	ldr	r0, [pc, #96]	; (8001b54 <main+0xbc>)
 8001af4:	f7ff fb97 	bl	8001226 <LCD_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001af8:	4817      	ldr	r0, [pc, #92]	; (8001b58 <main+0xc0>)
 8001afa:	f002 fc09 	bl	8004310 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxData[rxDataIndex],  1);
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <main+0xc4>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <main+0xc8>)
 8001b06:	4413      	add	r3, r2
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4815      	ldr	r0, [pc, #84]	; (8001b64 <main+0xcc>)
 8001b0e:	f003 fbe8 	bl	80052e2 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (queue.Size > 0)
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <main+0xb4>)
 8001b14:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0fa      	beq.n	8001b12 <main+0x7a>
	  {
		  Queue_Pop(&queue, &currentTask);
 8001b1c:	4912      	ldr	r1, [pc, #72]	; (8001b68 <main+0xd0>)
 8001b1e:	480b      	ldr	r0, [pc, #44]	; (8001b4c <main+0xb4>)
 8001b20:	f000 fe48 	bl	80027b4 <Queue_Pop>
		  if (currentTask != NULL)
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <main+0xd0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f2      	beq.n	8001b12 <main+0x7a>
		  {
			  currentTask();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <main+0xd0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4798      	blx	r3
	  if (queue.Size > 0)
 8001b32:	e7ee      	b.n	8001b12 <main+0x7a>
 8001b34:	0800abec 	.word	0x0800abec
 8001b38:	200002e4 	.word	0x200002e4
 8001b3c:	40010c00 	.word	0x40010c00
 8001b40:	20000388 	.word	0x20000388
 8001b44:	2000029c 	.word	0x2000029c
 8001b48:	20000374 	.word	0x20000374
 8001b4c:	200003a0 	.word	0x200003a0
 8001b50:	20000200 	.word	0x20000200
 8001b54:	20000538 	.word	0x20000538
 8001b58:	20000254 	.word	0x20000254
 8001b5c:	20000555 	.word	0x20000555
 8001b60:	20000548 	.word	0x20000548
 8001b64:	2000032c 	.word	0x2000032c
 8001b68:	20000558 	.word	0x20000558

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b090      	sub	sp, #64	; 0x40
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0318 	add.w	r3, r7, #24
 8001b76:	2228      	movs	r2, #40	; 0x28
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 f984 	bl	8005e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001baa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 ff01 	bl	80039bc <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001bc0:	f000 fa02 	bl	8001fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2102      	movs	r1, #2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 f96e 	bl	8003ec0 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bea:	f000 f9ed 	bl	8001fc8 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3740      	adds	r7, #64	; 0x40
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <MX_I2C2_Init+0x54>)
 8001c00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <MX_I2C2_Init+0x58>)
 8001c06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c36:	f001 fa25 	bl	8003084 <HAL_I2C_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c40:	f000 f9c2 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000200 	.word	0x20000200
 8001c4c:	40005800 	.word	0x40005800
 8001c50:	000186a0 	.word	0x000186a0

08001c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_TIM1_Init+0x98>)
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <MX_TIM1_Init+0x9c>)
 8001c74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_TIM1_Init+0x98>)
 8001c78:	f240 1267 	movw	r2, #359	; 0x167
 8001c7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_TIM1_Init+0x98>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_TIM1_Init+0x98>)
 8001c86:	22c7      	movs	r2, #199	; 0xc7
 8001c88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_TIM1_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_TIM1_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_TIM1_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c9c:	4813      	ldr	r0, [pc, #76]	; (8001cec <MX_TIM1_Init+0x98>)
 8001c9e:	f002 fa9d 	bl	80041dc <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ca8:	f000 f98e 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_TIM1_Init+0x98>)
 8001cba:	f002 fe3f 	bl	800493c <HAL_TIM_ConfigClockSource>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001cc4:	f000 f980 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_TIM1_Init+0x98>)
 8001cd6:	f003 f9c1 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ce0:	f000 f972 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000254 	.word	0x20000254
 8001cf0:	40012c00 	.word	0x40012c00

08001cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08e      	sub	sp, #56	; 0x38
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	f107 0320 	add.w	r3, r7, #32
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	615a      	str	r2, [r3, #20]
 8001d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d24:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 554-1;
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d2e:	f240 2229 	movw	r2, #553	; 0x229
 8001d32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d3c:	22fe      	movs	r2, #254	; 0xfe
 8001d3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d4c:	482e      	ldr	r0, [pc, #184]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d4e:	f002 fa45 	bl	80041dc <HAL_TIM_Base_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d58:	f000 f936 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d66:	4619      	mov	r1, r3
 8001d68:	4827      	ldr	r0, [pc, #156]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d6a:	f002 fde7 	bl	800493c <HAL_TIM_ConfigClockSource>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d74:	f000 f928 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d78:	4823      	ldr	r0, [pc, #140]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d7a:	f002 fb1b 	bl	80043b4 <HAL_TIM_PWM_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d84:	f000 f920 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d90:	f107 0320 	add.w	r3, r7, #32
 8001d94:	4619      	mov	r1, r3
 8001d96:	481c      	ldr	r0, [pc, #112]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001d98:	f003 f960 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001da2:	f000 f911 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da6:	2360      	movs	r3, #96	; 0x60
 8001da8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4812      	ldr	r0, [pc, #72]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001dbe:	f002 fcfb 	bl	80047b8 <HAL_TIM_PWM_ConfigChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dc8:	f000 f8fe 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001dd4:	f002 fcf0 	bl	80047b8 <HAL_TIM_PWM_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001dde:	f000 f8f3 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2208      	movs	r2, #8
 8001de6:	4619      	mov	r1, r3
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001dea:	f002 fce5 	bl	80047b8 <HAL_TIM_PWM_ConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001df4:	f000 f8e8 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <MX_TIM2_Init+0x114>)
 8001dfa:	f000 fab7 	bl	800236c <HAL_TIM_MspPostInit>

}
 8001dfe:	bf00      	nop
 8001e00:	3738      	adds	r7, #56	; 0x38
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000029c 	.word	0x2000029c

08001e0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	463b      	mov	r3, r7
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <MX_TIM4_Init+0x98>)
 8001e2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e30:	2247      	movs	r2, #71	; 0x47
 8001e32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e4e:	4814      	ldr	r0, [pc, #80]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e50:	f002 f9c4 	bl	80041dc <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001e5a:	f000 f8b5 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e6c:	f002 fd66 	bl	800493c <HAL_TIM_ConfigClockSource>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e76:	f000 f8a7 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e82:	463b      	mov	r3, r7
 8001e84:	4619      	mov	r1, r3
 8001e86:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <MX_TIM4_Init+0x94>)
 8001e88:	f003 f8e8 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e92:	f000 f899 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200002e4 	.word	0x200002e4
 8001ea4:	40000800 	.word	0x40000800

08001ea8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <MX_USART1_UART_Init+0x50>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	f003 f92c 	bl	800513c <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eea:	f000 f86d 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000032c 	.word	0x2000032c
 8001ef8:	40013800 	.word	0x40013800

08001efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f16:	f043 0310 	orr.w	r3, r3, #16
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f2e:	f043 0320 	orr.w	r3, r3, #32
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f70:	2200      	movs	r2, #0
 8001f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f76:	4812      	ldr	r0, [pc, #72]	; (8001fc0 <MX_GPIO_Init+0xc4>)
 8001f78:	f001 f86b 	bl	8003052 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	480a      	ldr	r0, [pc, #40]	; (8001fc0 <MX_GPIO_Init+0xc4>)
 8001f96:	f000 fec1 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_GPIO_Init+0xc8>)
 8001fae:	f000 feb5 	bl	8002d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fb2:	bf00      	nop
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40010c00 	.word	0x40010c00

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <Error_Handler+0x8>
	...

08001fd4 <assign_value>:


/* Private user code ---------------------------------------------------------*/

static void assign_value(RGB_t *rgb)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	switch (rgb->red_channel)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d839      	bhi.n	8002058 <assign_value+0x84>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <assign_value+0x18>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08002021 	.word	0x08002021
 8001ff0:	08002059 	.word	0x08002059
 8001ff4:	08002059 	.word	0x08002059
 8001ff8:	08002059 	.word	0x08002059
 8001ffc:	0800202f 	.word	0x0800202f
 8002000:	08002059 	.word	0x08002059
 8002004:	08002059 	.word	0x08002059
 8002008:	08002059 	.word	0x08002059
 800200c:	0800203d 	.word	0x0800203d
 8002010:	08002059 	.word	0x08002059
 8002014:	08002059 	.word	0x08002059
 8002018:	08002059 	.word	0x08002059
 800201c:	0800204b 	.word	0x0800204b
	{
		case TIM_CHANNEL_1:
			rgb->Timer->Instance->CCR1 = rgb->Data.red_value;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7c1a      	ldrb	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800202c:	e014      	b.n	8002058 <assign_value+0x84>
		case TIM_CHANNEL_2:
			rgb->Timer->Instance->CCR2 = rgb->Data.red_value;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7c1a      	ldrb	r2, [r3, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800203a:	e00d      	b.n	8002058 <assign_value+0x84>
		case TIM_CHANNEL_3:
			rgb->Timer->Instance->CCR3 = rgb->Data.red_value;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7c1a      	ldrb	r2, [r3, #16]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002048:	e006      	b.n	8002058 <assign_value+0x84>
		case TIM_CHANNEL_4:
			rgb->Timer->Instance->CCR4 = rgb->Data.red_value;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7c1a      	ldrb	r2, [r3, #16]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002056:	bf00      	nop
	}

	switch (rgb->green_channel)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d839      	bhi.n	80020d4 <assign_value+0x100>
 8002060:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <assign_value+0x94>)
 8002062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002066:	bf00      	nop
 8002068:	0800209d 	.word	0x0800209d
 800206c:	080020d5 	.word	0x080020d5
 8002070:	080020d5 	.word	0x080020d5
 8002074:	080020d5 	.word	0x080020d5
 8002078:	080020ab 	.word	0x080020ab
 800207c:	080020d5 	.word	0x080020d5
 8002080:	080020d5 	.word	0x080020d5
 8002084:	080020d5 	.word	0x080020d5
 8002088:	080020b9 	.word	0x080020b9
 800208c:	080020d5 	.word	0x080020d5
 8002090:	080020d5 	.word	0x080020d5
 8002094:	080020d5 	.word	0x080020d5
 8002098:	080020c7 	.word	0x080020c7
	{
		case TIM_CHANNEL_1:
			rgb->Timer->Instance->CCR1 = rgb->Data.green_value;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7c5a      	ldrb	r2, [r3, #17]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80020a8:	e014      	b.n	80020d4 <assign_value+0x100>
		case TIM_CHANNEL_2:
			rgb->Timer->Instance->CCR2 = rgb->Data.green_value;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7c5a      	ldrb	r2, [r3, #17]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80020b6:	e00d      	b.n	80020d4 <assign_value+0x100>
		case TIM_CHANNEL_3:
			rgb->Timer->Instance->CCR3 = rgb->Data.green_value;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7c5a      	ldrb	r2, [r3, #17]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80020c4:	e006      	b.n	80020d4 <assign_value+0x100>
		case TIM_CHANNEL_4:
			rgb->Timer->Instance->CCR4 = rgb->Data.green_value;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7c5a      	ldrb	r2, [r3, #17]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80020d2:	bf00      	nop
	}

	switch (rgb->blue_channel)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d839      	bhi.n	8002150 <assign_value+0x17c>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <assign_value+0x110>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	08002119 	.word	0x08002119
 80020e8:	08002151 	.word	0x08002151
 80020ec:	08002151 	.word	0x08002151
 80020f0:	08002151 	.word	0x08002151
 80020f4:	08002127 	.word	0x08002127
 80020f8:	08002151 	.word	0x08002151
 80020fc:	08002151 	.word	0x08002151
 8002100:	08002151 	.word	0x08002151
 8002104:	08002135 	.word	0x08002135
 8002108:	08002151 	.word	0x08002151
 800210c:	08002151 	.word	0x08002151
 8002110:	08002151 	.word	0x08002151
 8002114:	08002143 	.word	0x08002143
	{
		case TIM_CHANNEL_1:
			rgb->Timer->Instance->CCR1 = rgb->Data.blue_value;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7c9a      	ldrb	r2, [r3, #18]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002124:	e014      	b.n	8002150 <assign_value+0x17c>
		case TIM_CHANNEL_2:
			rgb->Timer->Instance->CCR2 = rgb->Data.blue_value;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7c9a      	ldrb	r2, [r3, #18]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8002132:	e00d      	b.n	8002150 <assign_value+0x17c>
		case TIM_CHANNEL_3:
			rgb->Timer->Instance->CCR3 = rgb->Data.blue_value;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7c9a      	ldrb	r2, [r3, #18]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002140:	e006      	b.n	8002150 <assign_value+0x17c>
		case TIM_CHANNEL_4:
			rgb->Timer->Instance->CCR4 = rgb->Data.blue_value;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7c9a      	ldrb	r2, [r3, #18]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800214e:	bf00      	nop
	}
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <RGB_Init>:

void RGB_Init(RGB_t* rgb, TIM_HandleTypeDef* htim, uint32_t red_channel, uint32_t green_channel, uint32_t blue_channel)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
    rgb->Timer = htim;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	601a      	str	r2, [r3, #0]
    rgb->red_channel  = red_channel;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	605a      	str	r2, [r3, #4]
    rgb->green_channel = green_channel;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	609a      	str	r2, [r3, #8]
    rgb->blue_channel = blue_channel;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	60da      	str	r2, [r3, #12]

    HAL_TIM_PWM_Start(rgb->Timer, red_channel);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4618      	mov	r0, r3
 800218a:	f002 f96b 	bl	8004464 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(rgb->Timer, green_channel);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f002 f965 	bl	8004464 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(rgb->Timer, blue_channel);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 f95f 	bl	8004464 <HAL_TIM_PWM_Start>

 	rgb->Data.red_value = 0;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	741a      	strb	r2, [r3, #16]
 	rgb->Data.green_value = 0;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	745a      	strb	r2, [r3, #17]
 	rgb->Data.blue_value = 0;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	749a      	strb	r2, [r3, #18]

    assign_value(rgb);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff ff0b 	bl	8001fd4 <assign_value>
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <RGB_SetValue>:

void RGB_SetValue(RGB_t *rgb, uint8_t red, uint8_t green, uint8_t blue)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	4608      	mov	r0, r1
 80021d0:	4611      	mov	r1, r2
 80021d2:	461a      	mov	r2, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	70fb      	strb	r3, [r7, #3]
 80021d8:	460b      	mov	r3, r1
 80021da:	70bb      	strb	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
 	rgb->Data.red_value = red;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	741a      	strb	r2, [r3, #16]
 	rgb->Data.green_value = green;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	78ba      	ldrb	r2, [r7, #2]
 80021ea:	745a      	strb	r2, [r3, #17]
 	rgb->Data.blue_value = blue;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	787a      	ldrb	r2, [r7, #1]
 80021f0:	749a      	strb	r2, [r3, #18]

	assign_value(rgb);   
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff feee 	bl	8001fd4 <assign_value>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_MspInit+0x40>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_MspInit+0x40>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6193      	str	r3, [r2, #24]
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_MspInit+0x40>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_MspInit+0x40>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_MspInit+0x40>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_MspInit+0x40>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <HAL_I2C_MspInit+0x74>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d124      	bne.n	80022ae <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_I2C_MspInit+0x78>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_I2C_MspInit+0x78>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_I2C_MspInit+0x78>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800227c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002280:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002282:	2312      	movs	r3, #18
 8002284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4619      	mov	r1, r3
 8002290:	480b      	ldr	r0, [pc, #44]	; (80022c0 <HAL_I2C_MspInit+0x7c>)
 8002292:	f000 fd43 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_I2C_MspInit+0x78>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_I2C_MspInit+0x78>)
 800229c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_I2C_MspInit+0x78>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40005800 	.word	0x40005800
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010c00 	.word	0x40010c00

080022c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_TIM_Base_MspInit+0x9c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11c      	bne.n	8002310 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4a22      	ldr	r2, [pc, #136]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 80022dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022e0:	6193      	str	r3, [r2, #24]
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2018      	movs	r0, #24
 80022f4:	f000 fc29 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022f8:	2018      	movs	r0, #24
 80022fa:	f000 fc42 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2019      	movs	r0, #25
 8002304:	f000 fc21 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002308:	2019      	movs	r0, #25
 800230a:	f000 fc3a 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800230e:	e022      	b.n	8002356 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d10c      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	61d3      	str	r3, [r2, #28]
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
}
 8002332:	e010      	b.n	8002356 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <HAL_TIM_Base_MspInit+0xa4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10b      	bne.n	8002356 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	61d3      	str	r3, [r2, #28]
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_TIM_Base_MspInit+0xa0>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40000800 	.word	0x40000800

0800236c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238a:	d117      	bne.n	80023bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_TIM_MspPostInit+0x58>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_TIM_MspPostInit+0x58>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_TIM_MspPostInit+0x58>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80023a4:	2307      	movs	r3, #7
 80023a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2302      	movs	r3, #2
 80023ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4619      	mov	r1, r3
 80023b6:	4804      	ldr	r0, [pc, #16]	; (80023c8 <HAL_TIM_MspPostInit+0x5c>)
 80023b8:	f000 fcb0 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023bc:	bf00      	nop
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010800 	.word	0x40010800

080023cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a20      	ldr	r2, [pc, #128]	; (8002468 <HAL_UART_MspInit+0x9c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d139      	bne.n	8002460 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_UART_MspInit+0xa0>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a1e      	ldr	r2, [pc, #120]	; (800246c <HAL_UART_MspInit+0xa0>)
 80023f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_UART_MspInit+0xa0>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_UART_MspInit+0xa0>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_UART_MspInit+0xa0>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_UART_MspInit+0xa0>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800241c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	4619      	mov	r1, r3
 8002430:	480f      	ldr	r0, [pc, #60]	; (8002470 <HAL_UART_MspInit+0xa4>)
 8002432:	f000 fc73 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800243a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	4619      	mov	r1, r3
 800244a:	4809      	ldr	r0, [pc, #36]	; (8002470 <HAL_UART_MspInit+0xa4>)
 800244c:	f000 fc66 	bl	8002d1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	2025      	movs	r0, #37	; 0x25
 8002456:	f000 fb78 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800245a:	2025      	movs	r0, #37	; 0x25
 800245c:	f000 fb91 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3720      	adds	r7, #32
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40013800 	.word	0x40013800
 800246c:	40021000 	.word	0x40021000
 8002470:	40010800 	.word	0x40010800

08002474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <NMI_Handler+0x4>

0800247a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <HardFault_Handler+0x4>

08002480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <MemManage_Handler+0x4>

08002486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <UsageFault_Handler+0x4>

08002492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ba:	f000 fa2f 	bl	800291c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM1_BRK_IRQHandler+0x10>)
 80024ca:	f002 f86d 	bl	80045a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000254 	.word	0x20000254

080024d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIM1_UP_IRQHandler+0x10>)
 80024de:	f002 f863 	bl	80045a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000254 	.word	0x20000254

080024ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <USART1_IRQHandler+0x10>)
 80024f2:	f002 ff1b 	bl	800532c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000032c 	.word	0x2000032c

08002500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return 1;
 8002504:	2301      	movs	r3, #1
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <_kill>:

int _kill(int pid, int sig)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002518:	f003 fc8c 	bl	8005e34 <__errno>
 800251c:	4603      	mov	r3, r0
 800251e:	2216      	movs	r2, #22
 8002520:	601a      	str	r2, [r3, #0]
  return -1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_exit>:

void _exit (int status)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002536:	f04f 31ff 	mov.w	r1, #4294967295
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffe7 	bl	800250e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002540:	e7fe      	b.n	8002540 <_exit+0x12>

08002542 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e00a      	b.n	800256a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002554:	f3af 8000 	nop.w
 8002558:	4601      	mov	r1, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	60ba      	str	r2, [r7, #8]
 8002560:	b2ca      	uxtb	r2, r1
 8002562:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3301      	adds	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	dbf0      	blt.n	8002554 <_read+0x12>
  }

  return len;
 8002572:	687b      	ldr	r3, [r7, #4]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e009      	b.n	80025a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	60ba      	str	r2, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe ff72 	bl	8001480 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3301      	adds	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	dbf1      	blt.n	800258e <_write+0x12>
  }
  return len;
 80025aa:	687b      	ldr	r3, [r7, #4]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_close>:

int _close(int file)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025da:	605a      	str	r2, [r3, #4]
  return 0;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <_isatty>:

int _isatty(int file)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f003 fbf6 	bl	8005e34 <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20005000 	.word	0x20005000
 8002674:	00000400 	.word	0x00000400
 8002678:	20000560 	.word	0x20000560
 800267c:	20000578 	.word	0x20000578

08002680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <Queue_Init>:


/* Private user code ---------------------------------------------------------*/

void Queue_Init(TaskQueue_t *queue, uint8_t capacity)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
	queue->Size = 0;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
	queue->Front = capacity - 1;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	queue->Rear = capacity;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	queue->Capacity = capacity;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <Queue_PushRear>:

Queue_Status Queue_PushRear(TaskQueue_t* queue, pTaskFunction pTask)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
	Queue_Status status = QUEUE_FULL;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]

	if (queue->Size < MAX_TASKS)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 80026da:	2b63      	cmp	r3, #99	; 0x63
 80026dc:	d819      	bhi.n	8002712 <Queue_PushRear+0x4c>
	{
		(queue->Rear)--;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		queue->Task[queue->Rear] = pTask;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 80026f4:	4619      	mov	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		(queue->Size)++;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8002704:	3301      	adds	r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		status = QUEUE_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <Queue_PushFront>:

Queue_Status Queue_PushFront(TaskQueue_t* queue, pTaskFunction pTask)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
	Queue_Status status = QUEUE_FULL;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
	uint8_t idx;

	if (queue->Size < MAX_TASKS)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8002732:	2b63      	cmp	r3, #99	; 0x63
 8002734:	d838      	bhi.n	80027a8 <Queue_PushFront+0x8a>
	{
		for (idx = 0; idx < queue->Size; idx++)
 8002736:	2300      	movs	r3, #0
 8002738:	73bb      	strb	r3, [r7, #14]
 800273a:	e015      	b.n	8002768 <Queue_PushFront+0x4a>
		{
			queue->Task[queue->Rear + idx - 1] = queue->Task[queue->Rear + idx];
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8002742:	461a      	mov	r2, r3
 8002744:	7bbb      	ldrb	r3, [r7, #14]
 8002746:	18d1      	adds	r1, r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 800274e:	461a      	mov	r2, r3
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	4413      	add	r3, r2
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (idx = 0; idx < queue->Size; idx++)
 8002762:	7bbb      	ldrb	r3, [r7, #14]
 8002764:	3301      	adds	r3, #1
 8002766:	73bb      	strb	r3, [r7, #14]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 800276e:	7bba      	ldrb	r2, [r7, #14]
 8002770:	429a      	cmp	r2, r3
 8002772:	d3e3      	bcc.n	800273c <Queue_PushFront+0x1e>
		}
		queue->Task[queue->Front] = pTask;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800277a:	4619      	mov	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		(queue->Rear)--;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 800278a:	3b01      	subs	r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		(queue->Size)++;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 800279a:	3301      	adds	r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192

		status = QUEUE_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <Queue_Pop>:

Queue_Status Queue_Pop(TaskQueue_t* queue, pTaskFunction* pTask)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	Queue_Status status = QUEUE_EMPTY;
 80027be:	2302      	movs	r3, #2
 80027c0:	73bb      	strb	r3, [r7, #14]
	uint8_t idx;

	if (queue->Size >= 0)
	{
		status = QUEUE_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73bb      	strb	r3, [r7, #14]
		*pTask = queue->Task[queue->Front];
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	601a      	str	r2, [r3, #0]
		(queue->Size)--;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 80027de:	3b01      	subs	r3, #1
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		(queue->Rear)++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 80027ee:	3301      	adds	r3, #1
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		for (idx = 0; idx < queue->Size; idx++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e015      	b.n	800282a <Queue_Pop+0x76>
		{
			queue->Task[queue->Front - idx] = queue->Task[queue->Front - idx - 1];
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8002804:	461a      	mov	r2, r3
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	1e59      	subs	r1, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8002812:	461a      	mov	r2, r3
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (idx = 0; idx < queue->Size; idx++)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	3301      	adds	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3e3      	bcc.n	80027fe <Queue_Pop+0x4a>
		}
	}

	return status;
 8002836:	7bbb      	ldrb	r3, [r7, #14]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
	...

08002844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002844:	f7ff ff1c 	bl	8002680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480b      	ldr	r0, [pc, #44]	; (8002878 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800284a:	490c      	ldr	r1, [pc, #48]	; (800287c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <LoopFillZerobss+0x16>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002860:	4c09      	ldr	r4, [pc, #36]	; (8002888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f003 fae7 	bl	8005e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002872:	f7ff f911 	bl	8001a98 <main>
  bx lr
 8002876:	4770      	bx	lr
  ldr r0, =_sdata
 8002878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800287c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002880:	0800b0d4 	.word	0x0800b0d4
  ldr r2, =_sbss
 8002884:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002888:	20000578 	.word	0x20000578

0800288c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800288c:	e7fe      	b.n	800288c <ADC1_2_IRQHandler>
	...

08002890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_Init+0x28>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_Init+0x28>)
 800289a:	f043 0310 	orr.w	r3, r3, #16
 800289e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a0:	2003      	movs	r0, #3
 80028a2:	f000 f947 	bl	8002b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028a6:	200f      	movs	r0, #15
 80028a8:	f000 f808 	bl	80028bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ac:	f7ff fca8 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40022000 	.word	0x40022000

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_InitTick+0x54>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_InitTick+0x58>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f95f 	bl	8002b9e <HAL_SYSTICK_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00e      	b.n	8002908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0f      	cmp	r3, #15
 80028ee:	d80a      	bhi.n	8002906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f000 f927 	bl	8002b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <HAL_InitTick+0x5c>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000004 	.word	0x20000004
 8002914:	2000000c 	.word	0x2000000c
 8002918:	20000008 	.word	0x20000008

0800291c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_IncTick+0x1c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_IncTick+0x20>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a03      	ldr	r2, [pc, #12]	; (800293c <HAL_IncTick+0x20>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	2000000c 	.word	0x2000000c
 800293c:	20000564 	.word	0x20000564

08002940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return uwTick;
 8002944:	4b02      	ldr	r3, [pc, #8]	; (8002950 <HAL_GetTick+0x10>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	20000564 	.word	0x20000564

08002954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff fff0 	bl	8002940 <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d005      	beq.n	800297a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_Delay+0x44>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800297a:	bf00      	nop
 800297c:	f7ff ffe0 	bl	8002940 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	429a      	cmp	r2, r3
 800298a:	d8f7      	bhi.n	800297c <HAL_Delay+0x28>
  {
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000000c 	.word	0x2000000c

0800299c <__NVIC_SetPriorityGrouping>:
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4906      	ldr	r1, [pc, #24]	; (8002a34 <__NVIC_EnableIRQ+0x34>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100

08002a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	db0a      	blt.n	8002a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	490c      	ldr	r1, [pc, #48]	; (8002a84 <__NVIC_SetPriority+0x4c>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a60:	e00a      	b.n	8002a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4908      	ldr	r1, [pc, #32]	; (8002a88 <__NVIC_SetPriority+0x50>)
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	3b04      	subs	r3, #4
 8002a70:	0112      	lsls	r2, r2, #4
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	440b      	add	r3, r1
 8002a76:	761a      	strb	r2, [r3, #24]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f1c3 0307 	rsb	r3, r3, #7
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	bf28      	it	cs
 8002aaa:	2304      	movcs	r3, #4
 8002aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d902      	bls.n	8002abc <NVIC_EncodePriority+0x30>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3b03      	subs	r3, #3
 8002aba:	e000      	b.n	8002abe <NVIC_EncodePriority+0x32>
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	4313      	orrs	r3, r2
         );
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b00:	d301      	bcc.n	8002b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00f      	b.n	8002b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <SysTick_Config+0x40>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b0e:	210f      	movs	r1, #15
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	f7ff ff90 	bl	8002a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <SysTick_Config+0x40>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <SysTick_Config+0x40>)
 8002b20:	2207      	movs	r2, #7
 8002b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	e000e010 	.word	0xe000e010

08002b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff2d 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5c:	f7ff ff42 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff ff90 	bl	8002a8c <NVIC_EncodePriority>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff5f 	bl	8002a38 <__NVIC_SetPriority>
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff35 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffa2 	bl	8002af0 <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d008      	beq.n	8002be0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e020      	b.n	8002c22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 020e 	bic.w	r2, r2, #14
 8002bee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	2101      	movs	r1, #1
 8002c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d005      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2204      	movs	r2, #4
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e051      	b.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 020e 	bic.w	r2, r2, #14
 8002c5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_DMA_Abort_IT+0xd4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d029      	beq.n	8002cce <HAL_DMA_Abort_IT+0xa2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <HAL_DMA_Abort_IT+0xd8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_Abort_IT+0x9e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_DMA_Abort_IT+0xdc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x98>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_DMA_Abort_IT+0xe0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d012      	beq.n	8002cbe <HAL_DMA_Abort_IT+0x92>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_DMA_Abort_IT+0xe4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0x8c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <HAL_DMA_Abort_IT+0xe8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d102      	bne.n	8002cb2 <HAL_DMA_Abort_IT+0x86>
 8002cac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cb0:	e00e      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb6:	e00b      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cbc:	e008      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc2:	e005      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cc8:	e002      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cca:	2310      	movs	r3, #16
 8002ccc:	e000      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <HAL_DMA_Abort_IT+0xec>)
 8002cd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
    } 
  }
  return status;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40020008 	.word	0x40020008
 8002d04:	4002001c 	.word	0x4002001c
 8002d08:	40020030 	.word	0x40020030
 8002d0c:	40020044 	.word	0x40020044
 8002d10:	40020058 	.word	0x40020058
 8002d14:	4002006c 	.word	0x4002006c
 8002d18:	40020000 	.word	0x40020000

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b08b      	sub	sp, #44	; 0x2c
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	e169      	b.n	8003004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d30:	2201      	movs	r2, #1
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 8158 	bne.w	8002ffe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a9a      	ldr	r2, [pc, #616]	; (8002fbc <HAL_GPIO_Init+0x2a0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d05e      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d58:	4a98      	ldr	r2, [pc, #608]	; (8002fbc <HAL_GPIO_Init+0x2a0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d875      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d5e:	4a98      	ldr	r2, [pc, #608]	; (8002fc0 <HAL_GPIO_Init+0x2a4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d058      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d64:	4a96      	ldr	r2, [pc, #600]	; (8002fc0 <HAL_GPIO_Init+0x2a4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d86f      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d6a:	4a96      	ldr	r2, [pc, #600]	; (8002fc4 <HAL_GPIO_Init+0x2a8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d052      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d70:	4a94      	ldr	r2, [pc, #592]	; (8002fc4 <HAL_GPIO_Init+0x2a8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d869      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d76:	4a94      	ldr	r2, [pc, #592]	; (8002fc8 <HAL_GPIO_Init+0x2ac>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04c      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d7c:	4a92      	ldr	r2, [pc, #584]	; (8002fc8 <HAL_GPIO_Init+0x2ac>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d863      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d82:	4a92      	ldr	r2, [pc, #584]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d046      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d88:	4a90      	ldr	r2, [pc, #576]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d85d      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d82a      	bhi.n	8002de8 <HAL_GPIO_Init+0xcc>
 8002d92:	2b12      	cmp	r3, #18
 8002d94:	d859      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_GPIO_Init+0x80>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002e17 	.word	0x08002e17
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002e03 	.word	0x08002e03
 8002da8:	08002e45 	.word	0x08002e45
 8002dac:	08002e4b 	.word	0x08002e4b
 8002db0:	08002e4b 	.word	0x08002e4b
 8002db4:	08002e4b 	.word	0x08002e4b
 8002db8:	08002e4b 	.word	0x08002e4b
 8002dbc:	08002e4b 	.word	0x08002e4b
 8002dc0:	08002e4b 	.word	0x08002e4b
 8002dc4:	08002e4b 	.word	0x08002e4b
 8002dc8:	08002e4b 	.word	0x08002e4b
 8002dcc:	08002e4b 	.word	0x08002e4b
 8002dd0:	08002e4b 	.word	0x08002e4b
 8002dd4:	08002e4b 	.word	0x08002e4b
 8002dd8:	08002e4b 	.word	0x08002e4b
 8002ddc:	08002e4b 	.word	0x08002e4b
 8002de0:	08002df9 	.word	0x08002df9
 8002de4:	08002e0d 	.word	0x08002e0d
 8002de8:	4a79      	ldr	r2, [pc, #484]	; (8002fd0 <HAL_GPIO_Init+0x2b4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dee:	e02c      	b.n	8002e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	623b      	str	r3, [r7, #32]
          break;
 8002df6:	e029      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	623b      	str	r3, [r7, #32]
          break;
 8002e00:	e024      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	3308      	adds	r3, #8
 8002e08:	623b      	str	r3, [r7, #32]
          break;
 8002e0a:	e01f      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	330c      	adds	r3, #12
 8002e12:	623b      	str	r3, [r7, #32]
          break;
 8002e14:	e01a      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e1e:	2304      	movs	r3, #4
 8002e20:	623b      	str	r3, [r7, #32]
          break;
 8002e22:	e013      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	611a      	str	r2, [r3, #16]
          break;
 8002e36:	e009      	b.n	8002e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e38:	2308      	movs	r3, #8
 8002e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	615a      	str	r2, [r3, #20]
          break;
 8002e42:	e003      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e44:	2300      	movs	r3, #0
 8002e46:	623b      	str	r3, [r7, #32]
          break;
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          break;
 8002e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2bff      	cmp	r3, #255	; 0xff
 8002e50:	d801      	bhi.n	8002e56 <HAL_GPIO_Init+0x13a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	e001      	b.n	8002e5a <HAL_GPIO_Init+0x13e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2bff      	cmp	r3, #255	; 0xff
 8002e60:	d802      	bhi.n	8002e68 <HAL_GPIO_Init+0x14c>
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	e002      	b.n	8002e6e <HAL_GPIO_Init+0x152>
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	3b08      	subs	r3, #8
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	210f      	movs	r1, #15
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	6a39      	ldr	r1, [r7, #32]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80b1 	beq.w	8002ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e9c:	4b4d      	ldr	r3, [pc, #308]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a4c      	ldr	r2, [pc, #304]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6193      	str	r3, [r2, #24]
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_GPIO_Init+0x2bc>)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a40      	ldr	r2, [pc, #256]	; (8002fdc <HAL_GPIO_Init+0x2c0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_GPIO_Init+0x1ec>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <HAL_GPIO_Init+0x2c4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00d      	beq.n	8002f04 <HAL_GPIO_Init+0x1e8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <HAL_GPIO_Init+0x2c8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <HAL_GPIO_Init+0x1e4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <HAL_GPIO_Init+0x1e0>
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e006      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002efc:	2304      	movs	r3, #4
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f1a:	492f      	ldr	r1, [pc, #188]	; (8002fd8 <HAL_GPIO_Init+0x2bc>)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d006      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	492c      	ldr	r1, [pc, #176]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	4928      	ldr	r1, [pc, #160]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4922      	ldr	r1, [pc, #136]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60cb      	str	r3, [r1, #12]
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	491e      	ldr	r1, [pc, #120]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4918      	ldr	r1, [pc, #96]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	4914      	ldr	r1, [pc, #80]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d021      	beq.n	8002ff0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	e021      	b.n	8002ffe <HAL_GPIO_Init+0x2e2>
 8002fba:	bf00      	nop
 8002fbc:	10320000 	.word	0x10320000
 8002fc0:	10310000 	.word	0x10310000
 8002fc4:	10220000 	.word	0x10220000
 8002fc8:	10210000 	.word	0x10210000
 8002fcc:	10120000 	.word	0x10120000
 8002fd0:	10110000 	.word	0x10110000
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	40010c00 	.word	0x40010c00
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	40011400 	.word	0x40011400
 8002fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	4909      	ldr	r1, [pc, #36]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	3301      	adds	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	f47f ae8e 	bne.w	8002d30 <HAL_GPIO_Init+0x14>
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	372c      	adds	r7, #44	; 0x2c
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40010400 	.word	0x40010400

08003024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e001      	b.n	8003046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	807b      	strh	r3, [r7, #2]
 800305e:	4613      	mov	r3, r2
 8003060:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003062:	787b      	ldrb	r3, [r7, #1]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003068:	887a      	ldrh	r2, [r7, #2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800306e:	e003      	b.n	8003078 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	041a      	lsls	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	611a      	str	r2, [r3, #16]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
	...

08003084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e12b      	b.n	80032ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff f8ca 	bl	8002244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e8:	f001 f832 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 80030ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4a81      	ldr	r2, [pc, #516]	; (80032f8 <HAL_I2C_Init+0x274>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d807      	bhi.n	8003108 <HAL_I2C_Init+0x84>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a80      	ldr	r2, [pc, #512]	; (80032fc <HAL_I2C_Init+0x278>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bf94      	ite	ls
 8003100:	2301      	movls	r3, #1
 8003102:	2300      	movhi	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e006      	b.n	8003116 <HAL_I2C_Init+0x92>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a7d      	ldr	r2, [pc, #500]	; (8003300 <HAL_I2C_Init+0x27c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	bf94      	ite	ls
 8003110:	2301      	movls	r3, #1
 8003112:	2300      	movhi	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0e7      	b.n	80032ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a78      	ldr	r2, [pc, #480]	; (8003304 <HAL_I2C_Init+0x280>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0c9b      	lsrs	r3, r3, #18
 8003128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a6a      	ldr	r2, [pc, #424]	; (80032f8 <HAL_I2C_Init+0x274>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d802      	bhi.n	8003158 <HAL_I2C_Init+0xd4>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3301      	adds	r3, #1
 8003156:	e009      	b.n	800316c <HAL_I2C_Init+0xe8>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a69      	ldr	r2, [pc, #420]	; (8003308 <HAL_I2C_Init+0x284>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	3301      	adds	r3, #1
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	430b      	orrs	r3, r1
 8003172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800317e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	495c      	ldr	r1, [pc, #368]	; (80032f8 <HAL_I2C_Init+0x274>)
 8003188:	428b      	cmp	r3, r1
 800318a:	d819      	bhi.n	80031c0 <HAL_I2C_Init+0x13c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e59      	subs	r1, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fbb1 f3f3 	udiv	r3, r1, r3
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a0:	400b      	ands	r3, r1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_I2C_Init+0x138>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e59      	subs	r1, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ba:	e051      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 80031bc:	2304      	movs	r3, #4
 80031be:	e04f      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <HAL_I2C_Init+0x168>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e012      	b.n	8003212 <HAL_I2C_Init+0x18e>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	0099      	lsls	r1, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Init+0x196>
 8003216:	2301      	movs	r3, #1
 8003218:	e022      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10e      	bne.n	8003240 <HAL_I2C_Init+0x1bc>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1e58      	subs	r0, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	440b      	add	r3, r1
 8003230:	fbb0 f3f3 	udiv	r3, r0, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323e:	e00f      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	0099      	lsls	r1, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	6809      	ldr	r1, [r1, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800328e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6911      	ldr	r1, [r2, #16]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	4311      	orrs	r1, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	000186a0 	.word	0x000186a0
 80032fc:	001e847f 	.word	0x001e847f
 8003300:	003d08ff 	.word	0x003d08ff
 8003304:	431bde83 	.word	0x431bde83
 8003308:	10624dd3 	.word	0x10624dd3

0800330c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	460b      	mov	r3, r1
 800331a:	817b      	strh	r3, [r7, #10]
 800331c:	4613      	mov	r3, r2
 800331e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff fb0e 	bl	8002940 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	f040 80e0 	bne.w	80034f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2319      	movs	r3, #25
 800333a:	2201      	movs	r2, #1
 800333c:	4970      	ldr	r1, [pc, #448]	; (8003500 <HAL_I2C_Master_Transmit+0x1f4>)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f964 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
 800334c:	e0d3      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_I2C_Master_Transmit+0x50>
 8003358:	2302      	movs	r3, #2
 800335a:	e0cc      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d007      	beq.n	8003382 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003390:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2221      	movs	r2, #33	; 0x21
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2210      	movs	r2, #16
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	893a      	ldrh	r2, [r7, #8]
 80033b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a50      	ldr	r2, [pc, #320]	; (8003504 <HAL_I2C_Master_Transmit+0x1f8>)
 80033c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f89c 	bl	8003508 <I2C_MasterRequestWrite>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e08d      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033f0:	e066      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	6a39      	ldr	r1, [r7, #32]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa22 	bl	8003840 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b04      	cmp	r3, #4
 8003408:	d107      	bne.n	800341a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06b      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	781a      	ldrb	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d11b      	bne.n	8003494 <HAL_I2C_Master_Transmit+0x188>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d017      	beq.n	8003494 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6a39      	ldr	r1, [r7, #32]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fa19 	bl	80038d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e01a      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d194      	bne.n	80033f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	00100002 	.word	0x00100002
 8003504:	ffff0000 	.word	0xffff0000

08003508 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	460b      	mov	r3, r1
 8003516:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d006      	beq.n	8003532 <I2C_MasterRequestWrite+0x2a>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d003      	beq.n	8003532 <I2C_MasterRequestWrite+0x2a>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003530:	d108      	bne.n	8003544 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e00b      	b.n	800355c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	2b12      	cmp	r3, #18
 800354a:	d107      	bne.n	800355c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f84f 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003582:	d103      	bne.n	800358c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e035      	b.n	80035fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003598:	d108      	bne.n	80035ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800359a:	897b      	ldrh	r3, [r7, #10]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035a8:	611a      	str	r2, [r3, #16]
 80035aa:	e01b      	b.n	80035e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035ac:	897b      	ldrh	r3, [r7, #10]
 80035ae:	11db      	asrs	r3, r3, #7
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0306 	and.w	r3, r3, #6
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f063 030f 	orn	r3, r3, #15
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <I2C_MasterRequestWrite+0xfc>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f898 	bl	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e010      	b.n	80035fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4907      	ldr	r1, [pc, #28]	; (8003608 <I2C_MasterRequestWrite+0x100>)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f888 	bl	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	00010008 	.word	0x00010008
 8003608:	00010002 	.word	0x00010002

0800360c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	e048      	b.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d044      	beq.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7ff f98b 	bl	8002940 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d139      	bne.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	0c1b      	lsrs	r3, r3, #16
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10d      	bne.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	43da      	mvns	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	e00c      	b.n	800367c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	43da      	mvns	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d116      	bne.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e023      	b.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	0c1b      	lsrs	r3, r3, #16
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d10d      	bne.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	43da      	mvns	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4013      	ands	r3, r2
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	e00c      	b.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	43da      	mvns	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d093      	beq.n	800361e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800370e:	e071      	b.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371e:	d123      	bne.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f043 0204 	orr.w	r2, r3, #4
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e067      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d041      	beq.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003770:	f7ff f8e6 	bl	8002940 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d136      	bne.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10c      	bne.n	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e00b      	b.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	43da      	mvns	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e021      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	0c1b      	lsrs	r3, r3, #16
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d10c      	bne.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	43da      	mvns	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e00b      	b.n	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	f47f af6d 	bne.w	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800384c:	e034      	b.n	80038b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f886 	bl	8003960 <I2C_IsAcknowledgeFailed>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e034      	b.n	80038c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d028      	beq.n	80038b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7ff f86b 	bl	8002940 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d11d      	bne.n	80038b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b80      	cmp	r3, #128	; 0x80
 8003888:	d016      	beq.n	80038b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f043 0220 	orr.w	r2, r3, #32
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e007      	b.n	80038c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d1c3      	bne.n	800384e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038dc:	e034      	b.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f83e 	bl	8003960 <I2C_IsAcknowledgeFailed>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e034      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d028      	beq.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7ff f823 	bl	8002940 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11d      	bne.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b04      	cmp	r3, #4
 8003918:	d016      	beq.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e007      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d1c3      	bne.n	80038de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003976:	d11b      	bne.n	80039b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003980:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f043 0204 	orr.w	r2, r3, #4
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e272      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8087 	beq.w	8003aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039dc:	4b92      	ldr	r3, [pc, #584]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d00c      	beq.n	8003a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039e8:	4b8f      	ldr	r3, [pc, #572]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d112      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5e>
 80039f4:	4b8c      	ldr	r3, [pc, #560]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d10b      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a02:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x12c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d168      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e24c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x76>
 8003a24:	4b80      	ldr	r3, [pc, #512]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a7f      	ldr	r2, [pc, #508]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02e      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x98>
 8003a3a:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7a      	ldr	r2, [pc, #488]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b78      	ldr	r3, [pc, #480]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a77      	ldr	r2, [pc, #476]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e01d      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0xbc>
 8003a5e:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a71      	ldr	r2, [pc, #452]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b6f      	ldr	r3, [pc, #444]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6e      	ldr	r2, [pc, #440]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a78:	4b6b      	ldr	r3, [pc, #428]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6a      	ldr	r2, [pc, #424]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a67      	ldr	r2, [pc, #412]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe ff52 	bl	8002940 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe ff4e 	bl	8002940 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e200      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe4>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe ff3e 	bl	8002940 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fe ff3a 	bl	8002940 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e1ec      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x10c>
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d063      	beq.n	8003bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af6:	4b4c      	ldr	r3, [pc, #304]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b02:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x18c>
 8003b0e:	4b46      	ldr	r3, [pc, #280]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d116      	bne.n	8003b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_RCC_OscConfig+0x176>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1c0      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4939      	ldr	r1, [pc, #228]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	e03a      	b.n	8003bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d020      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b50:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe fef3 	bl	8002940 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fe feef 	bl	8002940 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1a1      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4927      	ldr	r1, [pc, #156]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
 8003b90:	e015      	b.n	8003bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe fed2 	bl	8002940 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fece 	bl	8002940 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e180      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d03a      	beq.n	8003c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d019      	beq.n	8003c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd2:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd8:	f7fe feb2 	bl	8002940 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fe feae 	bl	8002940 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e160      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f000 face 	bl	80041a0 <RCC_Delay>
 8003c04:	e01c      	b.n	8003c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0c:	f7fe fe98 	bl	8002940 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c12:	e00f      	b.n	8003c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fe fe94 	bl	8002940 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d908      	bls.n	8003c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e146      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	42420000 	.word	0x42420000
 8003c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b92      	ldr	r3, [pc, #584]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e9      	bne.n	8003c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a6 	beq.w	8003d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10d      	bne.n	8003c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4a87      	ldr	r2, [pc, #540]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	61d3      	str	r3, [r2, #28]
 8003c6a:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b82      	ldr	r3, [pc, #520]	; (8003e84 <HAL_RCC_OscConfig+0x4c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b7f      	ldr	r3, [pc, #508]	; (8003e84 <HAL_RCC_OscConfig+0x4c8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7e      	ldr	r2, [pc, #504]	; (8003e84 <HAL_RCC_OscConfig+0x4c8>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7fe fe55 	bl	8002940 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7fe fe51 	bl	8002940 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	; 0x64
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e103      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b75      	ldr	r3, [pc, #468]	; (8003e84 <HAL_RCC_OscConfig+0x4c8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x312>
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4a6e      	ldr	r2, [pc, #440]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6213      	str	r3, [r2, #32]
 8003ccc:	e02d      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x334>
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a69      	ldr	r2, [pc, #420]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6213      	str	r3, [r2, #32]
 8003ce2:	4b67      	ldr	r3, [pc, #412]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a66      	ldr	r2, [pc, #408]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	6213      	str	r3, [r2, #32]
 8003cee:	e01c      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCC_OscConfig+0x356>
 8003cf8:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4a60      	ldr	r2, [pc, #384]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	6213      	str	r3, [r2, #32]
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4a5d      	ldr	r2, [pc, #372]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6213      	str	r3, [r2, #32]
 8003d10:	e00b      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003d12:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4a5a      	ldr	r2, [pc, #360]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6213      	str	r3, [r2, #32]
 8003d1e:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d015      	beq.n	8003d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d32:	f7fe fe05 	bl	8002940 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fe fe01 	bl	8002940 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e0b1      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ee      	beq.n	8003d3a <HAL_RCC_OscConfig+0x37e>
 8003d5c:	e014      	b.n	8003d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fe fdef 	bl	8002940 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fe fdeb 	bl	8002940 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e09b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	4b40      	ldr	r3, [pc, #256]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1ee      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8e:	4b3c      	ldr	r3, [pc, #240]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4a3b      	ldr	r2, [pc, #236]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8087 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da4:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d061      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d146      	bne.n	8003e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fe fdbf 	bl	8002940 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fe fdbb 	bl	8002940 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e06d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd8:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dec:	d108      	bne.n	8003e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dee:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4921      	ldr	r1, [pc, #132]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e00:	4b1f      	ldr	r3, [pc, #124]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a19      	ldr	r1, [r3, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	430b      	orrs	r3, r1
 8003e12:	491b      	ldr	r1, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x4cc>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fe fd8f 	bl	8002940 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fe fd8b 	bl	8002940 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e03d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x46a>
 8003e44:	e035      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fd78 	bl	8002940 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fd74 	bl	8002940 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e026      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x498>
 8003e72:	e01e      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e019      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_OscConfig+0x500>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0d0      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b6a      	ldr	r3, [pc, #424]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d910      	bls.n	8003f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b67      	ldr	r3, [pc, #412]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 0207 	bic.w	r2, r3, #7
 8003eea:	4965      	ldr	r1, [pc, #404]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b63      	ldr	r3, [pc, #396]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0b8      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f1c:	4b59      	ldr	r3, [pc, #356]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a58      	ldr	r2, [pc, #352]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f34:	4b53      	ldr	r3, [pc, #332]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a52      	ldr	r2, [pc, #328]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f40:	4b50      	ldr	r3, [pc, #320]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	494d      	ldr	r1, [pc, #308]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d040      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d115      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07f      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7e:	4b41      	ldr	r3, [pc, #260]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e073      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8e:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e06b      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9e:	4b39      	ldr	r3, [pc, #228]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4936      	ldr	r1, [pc, #216]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb0:	f7fe fcc6 	bl	8002940 <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fe fcc2 	bl	8002940 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e053      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 020c 	and.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1eb      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d210      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b24      	ldr	r3, [pc, #144]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 0207 	bic.w	r2, r3, #7
 8003ff6:	4922      	ldr	r1, [pc, #136]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e032      	b.n	8004076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401c:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4916      	ldr	r1, [pc, #88]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	490e      	ldr	r1, [pc, #56]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800404e:	f000 f821 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8004052:	4602      	mov	r2, r0
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	490a      	ldr	r1, [pc, #40]	; (8004088 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	5ccb      	ldrb	r3, [r1, r3]
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	4a09      	ldr	r2, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1cc>)
 8004068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_ClockConfig+0x1d0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fc24 	bl	80028bc <HAL_InitTick>

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40022000 	.word	0x40022000
 8004084:	40021000 	.word	0x40021000
 8004088:	0800abf4 	.word	0x0800abf4
 800408c:	20000004 	.word	0x20000004
 8004090:	20000008 	.word	0x20000008

08004094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <HAL_RCC_GetSysClockFreq+0x94>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d002      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x30>
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x36>
 80040c2:	e027      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_GetSysClockFreq+0x98>)
 80040c6:	613b      	str	r3, [r7, #16]
      break;
 80040c8:	e027      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0c9b      	lsrs	r3, r3, #18
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040d4:	5cd3      	ldrb	r3, [r2, r3]
 80040d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d010      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_RCC_GetSysClockFreq+0x94>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0c5b      	lsrs	r3, r3, #17
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	4a11      	ldr	r2, [pc, #68]	; (8004134 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a0d      	ldr	r2, [pc, #52]	; (800412c <HAL_RCC_GetSysClockFreq+0x98>)
 80040f6:	fb03 f202 	mul.w	r2, r3, r2
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e004      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	613b      	str	r3, [r7, #16]
      break;
 8004112:	e002      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetSysClockFreq+0x98>)
 8004116:	613b      	str	r3, [r7, #16]
      break;
 8004118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411a:	693b      	ldr	r3, [r7, #16]
}
 800411c:	4618      	mov	r0, r3
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	007a1200 	.word	0x007a1200
 8004130:	0800ac0c 	.word	0x0800ac0c
 8004134:	0800ac1c 	.word	0x0800ac1c
 8004138:	003d0900 	.word	0x003d0900

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b02      	ldr	r3, [pc, #8]	; (800414c <HAL_RCC_GetHCLKFreq+0x10>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004154:	f7ff fff2 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	0800ac04 	.word	0x0800ac04

08004178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800417c:	f7ff ffde 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	0adb      	lsrs	r3, r3, #11
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4903      	ldr	r1, [pc, #12]	; (800419c <HAL_RCC_GetPCLK2Freq+0x24>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	0800ac04 	.word	0x0800ac04

080041a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <RCC_Delay+0x34>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <RCC_Delay+0x38>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0a5b      	lsrs	r3, r3, #9
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041bc:	bf00      	nop
  }
  while (Delay --);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e5a      	subs	r2, r3, #1
 80041c2:	60fa      	str	r2, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f9      	bne.n	80041bc <RCC_Delay+0x1c>
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	20000004 	.word	0x20000004
 80041d8:	10624dd3 	.word	0x10624dd3

080041dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e041      	b.n	8004272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fe f85e 	bl	80022c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 fc7a 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d001      	beq.n	8004294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e032      	b.n	80042fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_TIM_Base_Start+0x88>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00e      	beq.n	80042c4 <HAL_TIM_Base_Start+0x48>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d009      	beq.n	80042c4 <HAL_TIM_Base_Start+0x48>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_TIM_Base_Start+0x8c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_TIM_Base_Start+0x48>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a13      	ldr	r2, [pc, #76]	; (800430c <HAL_TIM_Base_Start+0x90>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d111      	bne.n	80042e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d010      	beq.n	80042f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e6:	e007      	b.n	80042f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800

08004310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d001      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e03a      	b.n	800439e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_TIM_Base_Start_IT+0x98>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x58>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d009      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x58>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <HAL_TIM_Base_Start_IT+0x9c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x58>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d111      	bne.n	800438c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b06      	cmp	r3, #6
 8004378:	d010      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438a:	e007      	b.n	800439c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800

080043b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e041      	b.n	800444a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f839 	bl	8004452 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f000 fb8e 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_TIM_PWM_Start+0x24>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e022      	b.n	80044ce <HAL_TIM_PWM_Start+0x6a>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d109      	bne.n	80044a2 <HAL_TIM_PWM_Start+0x3e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e015      	b.n	80044ce <HAL_TIM_PWM_Start+0x6a>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d109      	bne.n	80044bc <HAL_TIM_PWM_Start+0x58>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e008      	b.n	80044ce <HAL_TIM_PWM_Start+0x6a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e05e      	b.n	8004594 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x82>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e4:	e013      	b.n	800450e <HAL_TIM_PWM_Start+0xaa>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Start+0x92>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f4:	e00b      	b.n	800450e <HAL_TIM_PWM_Start+0xaa>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Start+0xa2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	e003      	b.n	800450e <HAL_TIM_PWM_Start+0xaa>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2201      	movs	r2, #1
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fd7c 	bl	8005014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1e      	ldr	r2, [pc, #120]	; (800459c <HAL_TIM_PWM_Start+0x138>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d107      	bne.n	8004536 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a18      	ldr	r2, [pc, #96]	; (800459c <HAL_TIM_PWM_Start+0x138>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_TIM_PWM_Start+0xfa>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004548:	d009      	beq.n	800455e <HAL_TIM_PWM_Start+0xfa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <HAL_TIM_PWM_Start+0x13c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIM_PWM_Start+0xfa>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a12      	ldr	r2, [pc, #72]	; (80045a4 <HAL_TIM_PWM_Start+0x140>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d111      	bne.n	8004582 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b06      	cmp	r3, #6
 800456e:	d010      	beq.n	8004592 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	e007      	b.n	8004592 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40000400 	.word	0x40000400
 80045a4:	40000800 	.word	0x40000800

080045a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d122      	bne.n	8004604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d11b      	bne.n	8004604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0202 	mvn.w	r2, #2
 80045d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fa76 	bl	8004adc <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fa69 	bl	8004aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa78 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b04      	cmp	r3, #4
 8004610:	d122      	bne.n	8004658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11b      	bne.n	8004658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0204 	mvn.w	r2, #4
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fa4c 	bl	8004adc <HAL_TIM_IC_CaptureCallback>
 8004644:	e005      	b.n	8004652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa3f 	bl	8004aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fa4e 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b08      	cmp	r3, #8
 8004664:	d122      	bne.n	80046ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b08      	cmp	r3, #8
 8004672:	d11b      	bne.n	80046ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0208 	mvn.w	r2, #8
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2204      	movs	r2, #4
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fa22 	bl	8004adc <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa15 	bl	8004aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fa24 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d122      	bne.n	8004700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d11b      	bne.n	8004700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0210 	mvn.w	r2, #16
 80046d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2208      	movs	r2, #8
 80046d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9f8 	bl	8004adc <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9eb 	bl	8004aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f9fa 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10e      	bne.n	800472c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d107      	bne.n	800472c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0201 	mvn.w	r2, #1
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd f96a 	bl	8001a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b80      	cmp	r3, #128	; 0x80
 8004738:	d10e      	bne.n	8004758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b80      	cmp	r3, #128	; 0x80
 8004746:	d107      	bne.n	8004758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fce9 	bl	800512a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b40      	cmp	r3, #64	; 0x40
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9be 	bl	8004b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b20      	cmp	r3, #32
 8004790:	d10e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b20      	cmp	r3, #32
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0220 	mvn.w	r2, #32
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fcb4 	bl	8005118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e0ae      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	f200 809f 	bhi.w	8004924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047e6:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	08004821 	.word	0x08004821
 80047f0:	08004925 	.word	0x08004925
 80047f4:	08004925 	.word	0x08004925
 80047f8:	08004925 	.word	0x08004925
 80047fc:	08004861 	.word	0x08004861
 8004800:	08004925 	.word	0x08004925
 8004804:	08004925 	.word	0x08004925
 8004808:	08004925 	.word	0x08004925
 800480c:	080048a3 	.word	0x080048a3
 8004810:	08004925 	.word	0x08004925
 8004814:	08004925 	.word	0x08004925
 8004818:	08004925 	.word	0x08004925
 800481c:	080048e3 	.word	0x080048e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f9d6 	bl	8004bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0208 	orr.w	r2, r2, #8
 800483a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6999      	ldr	r1, [r3, #24]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	619a      	str	r2, [r3, #24]
      break;
 800485e:	e064      	b.n	800492a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fa1c 	bl	8004ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800487a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6999      	ldr	r1, [r3, #24]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	021a      	lsls	r2, r3, #8
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	619a      	str	r2, [r3, #24]
      break;
 80048a0:	e043      	b.n	800492a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fa65 	bl	8004d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0208 	orr.w	r2, r2, #8
 80048bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0204 	bic.w	r2, r2, #4
 80048cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69d9      	ldr	r1, [r3, #28]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	61da      	str	r2, [r3, #28]
      break;
 80048e0:	e023      	b.n	800492a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 faaf 	bl	8004e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69d9      	ldr	r1, [r3, #28]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	021a      	lsls	r2, r3, #8
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	61da      	str	r2, [r3, #28]
      break;
 8004922:	e002      	b.n	800492a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	75fb      	strb	r3, [r7, #23]
      break;
 8004928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIM_ConfigClockSource+0x1c>
 8004954:	2302      	movs	r3, #2
 8004956:	e0b4      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x186>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800497e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004990:	d03e      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0xd4>
 8004992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004996:	f200 8087 	bhi.w	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499e:	f000 8086 	beq.w	8004aae <HAL_TIM_ConfigClockSource+0x172>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d87f      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	2b70      	cmp	r3, #112	; 0x70
 80049aa:	d01a      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0xa6>
 80049ac:	2b70      	cmp	r3, #112	; 0x70
 80049ae:	d87b      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b60      	cmp	r3, #96	; 0x60
 80049b2:	d050      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x11a>
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d877      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b50      	cmp	r3, #80	; 0x50
 80049ba:	d03c      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0xfa>
 80049bc:	2b50      	cmp	r3, #80	; 0x50
 80049be:	d873      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d058      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x13a>
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d86f      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c8:	2b30      	cmp	r3, #48	; 0x30
 80049ca:	d064      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x15a>
 80049cc:	2b30      	cmp	r3, #48	; 0x30
 80049ce:	d86b      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d060      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x15a>
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d867      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d05c      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x15a>
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d05a      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x15a>
 80049e0:	e062      	b.n	8004aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f000 faf0 	bl	8004fd6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	609a      	str	r2, [r3, #8]
      break;
 8004a0e:	e04f      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6899      	ldr	r1, [r3, #8]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f000 fad9 	bl	8004fd6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a32:	609a      	str	r2, [r3, #8]
      break;
 8004a34:	e03c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 fa50 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2150      	movs	r1, #80	; 0x50
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 faa7 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004a54:	e02c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 fa6e 	bl	8004f44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2160      	movs	r1, #96	; 0x60
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fa97 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004a74:	e01c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f000 fa30 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2140      	movs	r1, #64	; 0x40
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fa87 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004a94:	e00c      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f000 fa7e 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004aa6:	e003      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8004aac:	e000      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
	...

08004b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a29      	ldr	r2, [pc, #164]	; (8004bcc <TIM_Base_SetConfig+0xb8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <TIM_Base_SetConfig+0x30>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b32:	d007      	beq.n	8004b44 <TIM_Base_SetConfig+0x30>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <TIM_Base_SetConfig+0xbc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <TIM_Base_SetConfig+0x30>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a25      	ldr	r2, [pc, #148]	; (8004bd4 <TIM_Base_SetConfig+0xc0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d108      	bne.n	8004b56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <TIM_Base_SetConfig+0xb8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM_Base_SetConfig+0x62>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b64:	d007      	beq.n	8004b76 <TIM_Base_SetConfig+0x62>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <TIM_Base_SetConfig+0xbc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_Base_SetConfig+0x62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <TIM_Base_SetConfig+0xc0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d108      	bne.n	8004b88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <TIM_Base_SetConfig+0xb8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d103      	bne.n	8004bbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	615a      	str	r2, [r3, #20]
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800

08004bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f023 0201 	bic.w	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0303 	bic.w	r3, r3, #3
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f023 0302 	bic.w	r3, r3, #2
 8004c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ca0 <TIM_OC1_SetConfig+0xc8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d10c      	bne.n	8004c4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0308 	bic.w	r3, r3, #8
 8004c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f023 0304 	bic.w	r3, r3, #4
 8004c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <TIM_OC1_SetConfig+0xc8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d111      	bne.n	8004c7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40012c00 	.word	0x40012c00

08004ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f023 0210 	bic.w	r2, r3, #16
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0320 	bic.w	r3, r3, #32
 8004cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <TIM_OC2_SetConfig+0xd0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10d      	bne.n	8004d20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <TIM_OC2_SetConfig+0xd0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d113      	bne.n	8004d50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00

08004d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <TIM_OC3_SetConfig+0xd0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10d      	bne.n	8004df2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <TIM_OC3_SetConfig+0xd0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d113      	bne.n	8004e22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	621a      	str	r2, [r3, #32]
}
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40012c00 	.word	0x40012c00

08004e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	031b      	lsls	r3, r3, #12
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0f      	ldr	r2, [pc, #60]	; (8004ee4 <TIM_OC4_SetConfig+0x98>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d109      	bne.n	8004ec0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00

08004ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 030a 	bic.w	r3, r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0210 	bic.w	r2, r3, #16
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	031b      	lsls	r3, r3, #12
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f043 0307 	orr.w	r3, r3, #7
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	021a      	lsls	r2, r3, #8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	609a      	str	r2, [r3, #8]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2201      	movs	r2, #1
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	43db      	mvns	r3, r3
 8005036:	401a      	ands	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005070:	2302      	movs	r3, #2
 8005072:	e046      	b.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a16      	ldr	r2, [pc, #88]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c0:	d009      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a10      	ldr	r2, [pc, #64]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10c      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800

08005118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e042      	b.n	80051d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fd f932 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2224      	movs	r2, #36	; 0x24
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800517e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fdc5 	bl	8005d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4613      	mov	r3, r2
 80051ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d16d      	bne.n	80052d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_UART_Transmit+0x2c>
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e066      	b.n	80052da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2221      	movs	r2, #33	; 0x21
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800521a:	f7fd fb91 	bl	8002940 <HAL_GetTick>
 800521e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	88fa      	ldrh	r2, [r7, #6]
 800522a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d108      	bne.n	8005248 <HAL_UART_Transmit+0x6c>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d104      	bne.n	8005248 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e003      	b.n	8005250 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005250:	e02a      	b.n	80052a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fb14 	bl	800588a <UART_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e036      	b.n	80052da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	3302      	adds	r3, #2
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e007      	b.n	800529a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	781a      	ldrb	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	3301      	adds	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1cf      	bne.n	8005252 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	2140      	movs	r1, #64	; 0x40
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fae4 	bl	800588a <UART_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	4613      	mov	r3, r2
 80052ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d112      	bne.n	8005322 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_UART_Receive_IT+0x26>
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e00b      	b.n	8005324 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	461a      	mov	r2, r3
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fb24 	bl	8005966 <UART_Start_Receive_IT>
 800531e:	4603      	mov	r3, r0
 8005320:	e000      	b.n	8005324 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005322:	2302      	movs	r3, #2
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0ba      	sub	sp, #232	; 0xe8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800536a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10f      	bne.n	8005392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_UART_IRQHandler+0x66>
 800537e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fc01 	bl	8005b92 <UART_Receive_IT>
      return;
 8005390:	e25b      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80de 	beq.w	8005558 <HAL_UART_IRQHandler+0x22c>
 800539c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80d1 	beq.w	8005558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <HAL_UART_IRQHandler+0xae>
 80053c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_UART_IRQHandler+0xd2>
 80053e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	f043 0202 	orr.w	r2, r3, #2
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_UART_IRQHandler+0xf6>
 800540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	f043 0204 	orr.w	r2, r3, #4
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d011      	beq.n	8005452 <HAL_UART_IRQHandler+0x126>
 800542e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800543a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f043 0208 	orr.w	r2, r3, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 81f2 	beq.w	8005840 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_UART_IRQHandler+0x14e>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb8c 	bl	8005b92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <HAL_UART_IRQHandler+0x17a>
 800549e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d04f      	beq.n	8005546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa96 	bl	80059d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d041      	beq.n	800553e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1d9      	bne.n	80054ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d013      	beq.n	8005536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	4a7e      	ldr	r2, [pc, #504]	; (800570c <HAL_UART_IRQHandler+0x3e0>)
 8005514:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd fb86 	bl	8002c2c <HAL_DMA_Abort_IT>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005530:	4610      	mov	r0, r2
 8005532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	e00e      	b.n	8005554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f993 	bl	8005862 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	e00a      	b.n	8005554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f98f 	bl	8005862 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005544:	e006      	b.n	8005554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f98b 	bl	8005862 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005552:	e175      	b.n	8005840 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	bf00      	nop
    return;
 8005556:	e173      	b.n	8005840 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 814f 	bne.w	8005800 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8148 	beq.w	8005800 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8141 	beq.w	8005800 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80b6 	beq.w	8005710 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8145 	beq.w	8005844 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055c2:	429a      	cmp	r2, r3
 80055c4:	f080 813e 	bcs.w	8005844 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	f000 8088 	beq.w	80056ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005608:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800560c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005614:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1d9      	bne.n	80055dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3314      	adds	r3, #20
 8005648:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800564c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005650:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005654:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800565e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e1      	bne.n	8005628 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3314      	adds	r3, #20
 800566a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3314      	adds	r3, #20
 8005684:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005688:	66fa      	str	r2, [r7, #108]	; 0x6c
 800568a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800568e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e3      	bne.n	8005664 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056bc:	f023 0310 	bic.w	r3, r3, #16
 80056c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80056d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e3      	bne.n	80056aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd fa65 	bl	8002bb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	b29b      	uxth	r3, r3
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8b6 	bl	8005874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005708:	e09c      	b.n	8005844 <HAL_UART_IRQHandler+0x518>
 800570a:	bf00      	nop
 800570c:	08005a9d 	.word	0x08005a9d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005718:	b29b      	uxth	r3, r3
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 808e 	beq.w	8005848 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800572c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8089 	beq.w	8005848 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800574c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800575a:	647a      	str	r2, [r7, #68]	; 0x44
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e3      	bne.n	8005736 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	623b      	str	r3, [r7, #32]
   return(result);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005792:	633a      	str	r2, [r7, #48]	; 0x30
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e3      	bne.n	800576e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0310 	bic.w	r3, r3, #16
 80057ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057d8:	61fa      	str	r2, [r7, #28]
 80057da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e3      	bne.n	80057b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f83b 	bl	8005874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057fe:	e023      	b.n	8005848 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_UART_IRQHandler+0x4f4>
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f953 	bl	8005ac4 <UART_Transmit_IT>
    return;
 800581e:	e014      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00e      	beq.n	800584a <HAL_UART_IRQHandler+0x51e>
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f992 	bl	8005b62 <UART_EndTransmit_IT>
    return;
 800583e:	e004      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
    return;
 8005840:	bf00      	nop
 8005842:	e002      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
      return;
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
      return;
 8005848:	bf00      	nop
  }
}
 800584a:	37e8      	adds	r7, #232	; 0xe8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b090      	sub	sp, #64	; 0x40
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	603b      	str	r3, [r7, #0]
 8005896:	4613      	mov	r3, r2
 8005898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589a:	e050      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d04c      	beq.n	800593e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <UART_WaitOnFlagUntilTimeout+0x30>
 80058aa:	f7fd f849 	bl	8002940 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d241      	bcs.n	800593e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058da:	637a      	str	r2, [r7, #52]	; 0x34
 80058dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e5      	bne.n	80058ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3314      	adds	r3, #20
 80058f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	613b      	str	r3, [r7, #16]
   return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3314      	adds	r3, #20
 800590c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590e:	623a      	str	r2, [r7, #32]
 8005910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	69f9      	ldr	r1, [r7, #28]
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	61bb      	str	r3, [r7, #24]
   return(result);
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e00f      	b.n	800595e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4013      	ands	r3, r2
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	bf0c      	ite	eq
 800594e:	2301      	moveq	r3, #1
 8005950:	2300      	movne	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	429a      	cmp	r2, r3
 800595a:	d09f      	beq.n	800589c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3740      	adds	r7, #64	; 0x40
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	4613      	mov	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2222      	movs	r2, #34	; 0x22
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0220 	orr.w	r2, r2, #32
 80059ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b095      	sub	sp, #84	; 0x54
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a00:	643a      	str	r2, [r7, #64]	; 0x40
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e5      	bne.n	8005a14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d119      	bne.n	8005a84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 0310 	bic.w	r3, r3, #16
 8005a66:	647b      	str	r3, [r7, #68]	; 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a70:	61ba      	str	r2, [r7, #24]
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a92:	bf00      	nop
 8005a94:	3754      	adds	r7, #84	; 0x54
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff fed3 	bl	8005862 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b21      	cmp	r3, #33	; 0x21
 8005ad6:	d13e      	bne.n	8005b56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae0:	d114      	bne.n	8005b0c <UART_Transmit_IT+0x48>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d110      	bne.n	8005b0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005afe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	1c9a      	adds	r2, r3, #2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]
 8005b0a:	e008      	b.n	8005b1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	1c59      	adds	r1, r3, #1
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6211      	str	r1, [r2, #32]
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr

08005b62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fe64 	bl	8005850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b08c      	sub	sp, #48	; 0x30
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b22      	cmp	r3, #34	; 0x22
 8005ba4:	f040 80ae 	bne.w	8005d04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d117      	bne.n	8005be2 <UART_Receive_IT+0x50>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d113      	bne.n	8005be2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	1c9a      	adds	r2, r3, #2
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
 8005be0:	e026      	b.n	8005c30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf4:	d007      	beq.n	8005c06 <UART_Receive_IT+0x74>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10a      	bne.n	8005c14 <UART_Receive_IT+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e008      	b.n	8005c26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d15d      	bne.n	8005d00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0220 	bic.w	r2, r2, #32
 8005c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d135      	bne.n	8005cf6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f023 0310 	bic.w	r3, r3, #16
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb0:	623a      	str	r2, [r7, #32]
 8005cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	69f9      	ldr	r1, [r7, #28]
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e5      	bne.n	8005c90 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b10      	cmp	r3, #16
 8005cd0:	d10a      	bne.n	8005ce8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff fdc0 	bl	8005874 <HAL_UARTEx_RxEventCallback>
 8005cf4:	e002      	b.n	8005cfc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fb fbd4 	bl	80014a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e002      	b.n	8005d06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3730      	adds	r7, #48	; 0x30
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d4a:	f023 030c 	bic.w	r3, r3, #12
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	430b      	orrs	r3, r1
 8005d56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a2c      	ldr	r2, [pc, #176]	; (8005e24 <UART_SetConfig+0x114>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d103      	bne.n	8005d80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d78:	f7fe f9fe 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	e002      	b.n	8005d86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d80:	f7fe f9e6 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8005d84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009a      	lsls	r2, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <UART_SetConfig+0x118>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	0119      	lsls	r1, r3, #4
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	009a      	lsls	r2, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <UART_SetConfig+0x118>)
 8005dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	2064      	movs	r0, #100	; 0x64
 8005dc6:	fb00 f303 	mul.w	r3, r0, r3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	3332      	adds	r3, #50	; 0x32
 8005dd0:	4a15      	ldr	r2, [pc, #84]	; (8005e28 <UART_SetConfig+0x118>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ddc:	4419      	add	r1, r3
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009a      	lsls	r2, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df4:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <UART_SetConfig+0x118>)
 8005df6:	fba3 0302 	umull	r0, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2064      	movs	r0, #100	; 0x64
 8005dfe:	fb00 f303 	mul.w	r3, r0, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	3332      	adds	r3, #50	; 0x32
 8005e08:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <UART_SetConfig+0x118>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	440a      	add	r2, r1
 8005e1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40013800 	.word	0x40013800
 8005e28:	51eb851f 	.word	0x51eb851f

08005e2c <atoi>:
 8005e2c:	220a      	movs	r2, #10
 8005e2e:	2100      	movs	r1, #0
 8005e30:	f001 be06 	b.w	8007a40 <strtol>

08005e34 <__errno>:
 8005e34:	4b01      	ldr	r3, [pc, #4]	; (8005e3c <__errno+0x8>)
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	20000010 	.word	0x20000010

08005e40 <__libc_init_array>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	2600      	movs	r6, #0
 8005e44:	4d0c      	ldr	r5, [pc, #48]	; (8005e78 <__libc_init_array+0x38>)
 8005e46:	4c0d      	ldr	r4, [pc, #52]	; (8005e7c <__libc_init_array+0x3c>)
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	42a6      	cmp	r6, r4
 8005e4e:	d109      	bne.n	8005e64 <__libc_init_array+0x24>
 8005e50:	f004 fd58 	bl	800a904 <_init>
 8005e54:	2600      	movs	r6, #0
 8005e56:	4d0a      	ldr	r5, [pc, #40]	; (8005e80 <__libc_init_array+0x40>)
 8005e58:	4c0a      	ldr	r4, [pc, #40]	; (8005e84 <__libc_init_array+0x44>)
 8005e5a:	1b64      	subs	r4, r4, r5
 8005e5c:	10a4      	asrs	r4, r4, #2
 8005e5e:	42a6      	cmp	r6, r4
 8005e60:	d105      	bne.n	8005e6e <__libc_init_array+0x2e>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e68:	4798      	blx	r3
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7ee      	b.n	8005e4c <__libc_init_array+0xc>
 8005e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e72:	4798      	blx	r3
 8005e74:	3601      	adds	r6, #1
 8005e76:	e7f2      	b.n	8005e5e <__libc_init_array+0x1e>
 8005e78:	0800b0cc 	.word	0x0800b0cc
 8005e7c:	0800b0cc 	.word	0x0800b0cc
 8005e80:	0800b0cc 	.word	0x0800b0cc
 8005e84:	0800b0d0 	.word	0x0800b0d0

08005e88 <memset>:
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4402      	add	r2, r0
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d100      	bne.n	8005e92 <memset+0xa>
 8005e90:	4770      	bx	lr
 8005e92:	f803 1b01 	strb.w	r1, [r3], #1
 8005e96:	e7f9      	b.n	8005e8c <memset+0x4>

08005e98 <__cvt>:
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9e:	461f      	mov	r7, r3
 8005ea0:	bfbb      	ittet	lt
 8005ea2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005ea6:	461f      	movlt	r7, r3
 8005ea8:	2300      	movge	r3, #0
 8005eaa:	232d      	movlt	r3, #45	; 0x2d
 8005eac:	b088      	sub	sp, #32
 8005eae:	4614      	mov	r4, r2
 8005eb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005eb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005eb4:	7013      	strb	r3, [r2, #0]
 8005eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005eb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005ebc:	f023 0820 	bic.w	r8, r3, #32
 8005ec0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ec4:	d005      	beq.n	8005ed2 <__cvt+0x3a>
 8005ec6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005eca:	d100      	bne.n	8005ece <__cvt+0x36>
 8005ecc:	3501      	adds	r5, #1
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e000      	b.n	8005ed4 <__cvt+0x3c>
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	aa07      	add	r2, sp, #28
 8005ed6:	9204      	str	r2, [sp, #16]
 8005ed8:	aa06      	add	r2, sp, #24
 8005eda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ede:	e9cd 3500 	strd	r3, r5, [sp]
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	f001 ff03 	bl	8007cf0 <_dtoa_r>
 8005eea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005eee:	4606      	mov	r6, r0
 8005ef0:	d102      	bne.n	8005ef8 <__cvt+0x60>
 8005ef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ef4:	07db      	lsls	r3, r3, #31
 8005ef6:	d522      	bpl.n	8005f3e <__cvt+0xa6>
 8005ef8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005efc:	eb06 0905 	add.w	r9, r6, r5
 8005f00:	d110      	bne.n	8005f24 <__cvt+0x8c>
 8005f02:	7833      	ldrb	r3, [r6, #0]
 8005f04:	2b30      	cmp	r3, #48	; 0x30
 8005f06:	d10a      	bne.n	8005f1e <__cvt+0x86>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa fd54 	bl	80009bc <__aeabi_dcmpeq>
 8005f14:	b918      	cbnz	r0, 8005f1e <__cvt+0x86>
 8005f16:	f1c5 0501 	rsb	r5, r5, #1
 8005f1a:	f8ca 5000 	str.w	r5, [sl]
 8005f1e:	f8da 3000 	ldr.w	r3, [sl]
 8005f22:	4499      	add	r9, r3
 8005f24:	2200      	movs	r2, #0
 8005f26:	2300      	movs	r3, #0
 8005f28:	4620      	mov	r0, r4
 8005f2a:	4639      	mov	r1, r7
 8005f2c:	f7fa fd46 	bl	80009bc <__aeabi_dcmpeq>
 8005f30:	b108      	cbz	r0, 8005f36 <__cvt+0x9e>
 8005f32:	f8cd 901c 	str.w	r9, [sp, #28]
 8005f36:	2230      	movs	r2, #48	; 0x30
 8005f38:	9b07      	ldr	r3, [sp, #28]
 8005f3a:	454b      	cmp	r3, r9
 8005f3c:	d307      	bcc.n	8005f4e <__cvt+0xb6>
 8005f3e:	4630      	mov	r0, r6
 8005f40:	9b07      	ldr	r3, [sp, #28]
 8005f42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f44:	1b9b      	subs	r3, r3, r6
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	b008      	add	sp, #32
 8005f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4e:	1c59      	adds	r1, r3, #1
 8005f50:	9107      	str	r1, [sp, #28]
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e7f0      	b.n	8005f38 <__cvt+0xa0>

08005f56 <__exponent>:
 8005f56:	4603      	mov	r3, r0
 8005f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f5a:	2900      	cmp	r1, #0
 8005f5c:	f803 2b02 	strb.w	r2, [r3], #2
 8005f60:	bfb6      	itet	lt
 8005f62:	222d      	movlt	r2, #45	; 0x2d
 8005f64:	222b      	movge	r2, #43	; 0x2b
 8005f66:	4249      	neglt	r1, r1
 8005f68:	2909      	cmp	r1, #9
 8005f6a:	7042      	strb	r2, [r0, #1]
 8005f6c:	dd2b      	ble.n	8005fc6 <__exponent+0x70>
 8005f6e:	f10d 0407 	add.w	r4, sp, #7
 8005f72:	46a4      	mov	ip, r4
 8005f74:	270a      	movs	r7, #10
 8005f76:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	46a6      	mov	lr, r4
 8005f7e:	fb07 1516 	mls	r5, r7, r6, r1
 8005f82:	2a63      	cmp	r2, #99	; 0x63
 8005f84:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005f88:	4631      	mov	r1, r6
 8005f8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f92:	dcf0      	bgt.n	8005f76 <__exponent+0x20>
 8005f94:	3130      	adds	r1, #48	; 0x30
 8005f96:	f1ae 0502 	sub.w	r5, lr, #2
 8005f9a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	1c44      	adds	r4, r0, #1
 8005fa2:	4561      	cmp	r1, ip
 8005fa4:	d30a      	bcc.n	8005fbc <__exponent+0x66>
 8005fa6:	f10d 0209 	add.w	r2, sp, #9
 8005faa:	eba2 020e 	sub.w	r2, r2, lr
 8005fae:	4565      	cmp	r5, ip
 8005fb0:	bf88      	it	hi
 8005fb2:	2200      	movhi	r2, #0
 8005fb4:	4413      	add	r3, r2
 8005fb6:	1a18      	subs	r0, r3, r0
 8005fb8:	b003      	add	sp, #12
 8005fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fc0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005fc4:	e7ed      	b.n	8005fa2 <__exponent+0x4c>
 8005fc6:	2330      	movs	r3, #48	; 0x30
 8005fc8:	3130      	adds	r1, #48	; 0x30
 8005fca:	7083      	strb	r3, [r0, #2]
 8005fcc:	70c1      	strb	r1, [r0, #3]
 8005fce:	1d03      	adds	r3, r0, #4
 8005fd0:	e7f1      	b.n	8005fb6 <__exponent+0x60>
	...

08005fd4 <_printf_float>:
 8005fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd8:	b091      	sub	sp, #68	; 0x44
 8005fda:	460c      	mov	r4, r1
 8005fdc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005fe0:	4616      	mov	r6, r2
 8005fe2:	461f      	mov	r7, r3
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	f003 f98b 	bl	8009300 <_localeconv_r>
 8005fea:	6803      	ldr	r3, [r0, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff0:	f7fa f8b8 	bl	8000164 <strlen>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	930e      	str	r3, [sp, #56]	; 0x38
 8005ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffc:	900a      	str	r0, [sp, #40]	; 0x28
 8005ffe:	3307      	adds	r3, #7
 8006000:	f023 0307 	bic.w	r3, r3, #7
 8006004:	f103 0208 	add.w	r2, r3, #8
 8006008:	f894 9018 	ldrb.w	r9, [r4, #24]
 800600c:	f8d4 b000 	ldr.w	fp, [r4]
 8006010:	f8c8 2000 	str.w	r2, [r8]
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800601c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006020:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006024:	930b      	str	r3, [sp, #44]	; 0x2c
 8006026:	f04f 32ff 	mov.w	r2, #4294967295
 800602a:	4640      	mov	r0, r8
 800602c:	4b9c      	ldr	r3, [pc, #624]	; (80062a0 <_printf_float+0x2cc>)
 800602e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006030:	f7fa fcf6 	bl	8000a20 <__aeabi_dcmpun>
 8006034:	bb70      	cbnz	r0, 8006094 <_printf_float+0xc0>
 8006036:	f04f 32ff 	mov.w	r2, #4294967295
 800603a:	4640      	mov	r0, r8
 800603c:	4b98      	ldr	r3, [pc, #608]	; (80062a0 <_printf_float+0x2cc>)
 800603e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006040:	f7fa fcd0 	bl	80009e4 <__aeabi_dcmple>
 8006044:	bb30      	cbnz	r0, 8006094 <_printf_float+0xc0>
 8006046:	2200      	movs	r2, #0
 8006048:	2300      	movs	r3, #0
 800604a:	4640      	mov	r0, r8
 800604c:	4651      	mov	r1, sl
 800604e:	f7fa fcbf 	bl	80009d0 <__aeabi_dcmplt>
 8006052:	b110      	cbz	r0, 800605a <_printf_float+0x86>
 8006054:	232d      	movs	r3, #45	; 0x2d
 8006056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800605a:	4b92      	ldr	r3, [pc, #584]	; (80062a4 <_printf_float+0x2d0>)
 800605c:	4892      	ldr	r0, [pc, #584]	; (80062a8 <_printf_float+0x2d4>)
 800605e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006062:	bf94      	ite	ls
 8006064:	4698      	movls	r8, r3
 8006066:	4680      	movhi	r8, r0
 8006068:	2303      	movs	r3, #3
 800606a:	f04f 0a00 	mov.w	sl, #0
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	f02b 0304 	bic.w	r3, fp, #4
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	4633      	mov	r3, r6
 8006078:	4621      	mov	r1, r4
 800607a:	4628      	mov	r0, r5
 800607c:	9700      	str	r7, [sp, #0]
 800607e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006080:	f000 f9d4 	bl	800642c <_printf_common>
 8006084:	3001      	adds	r0, #1
 8006086:	f040 8090 	bne.w	80061aa <_printf_float+0x1d6>
 800608a:	f04f 30ff 	mov.w	r0, #4294967295
 800608e:	b011      	add	sp, #68	; 0x44
 8006090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006094:	4642      	mov	r2, r8
 8006096:	4653      	mov	r3, sl
 8006098:	4640      	mov	r0, r8
 800609a:	4651      	mov	r1, sl
 800609c:	f7fa fcc0 	bl	8000a20 <__aeabi_dcmpun>
 80060a0:	b148      	cbz	r0, 80060b6 <_printf_float+0xe2>
 80060a2:	f1ba 0f00 	cmp.w	sl, #0
 80060a6:	bfb8      	it	lt
 80060a8:	232d      	movlt	r3, #45	; 0x2d
 80060aa:	4880      	ldr	r0, [pc, #512]	; (80062ac <_printf_float+0x2d8>)
 80060ac:	bfb8      	it	lt
 80060ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060b2:	4b7f      	ldr	r3, [pc, #508]	; (80062b0 <_printf_float+0x2dc>)
 80060b4:	e7d3      	b.n	800605e <_printf_float+0x8a>
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	d142      	bne.n	8006146 <_printf_float+0x172>
 80060c0:	2306      	movs	r3, #6
 80060c2:	6063      	str	r3, [r4, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	9206      	str	r2, [sp, #24]
 80060c8:	aa0e      	add	r2, sp, #56	; 0x38
 80060ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80060ce:	aa0d      	add	r2, sp, #52	; 0x34
 80060d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80060d4:	9203      	str	r2, [sp, #12]
 80060d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80060da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	4642      	mov	r2, r8
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	4628      	mov	r0, r5
 80060e8:	4653      	mov	r3, sl
 80060ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80060ec:	f7ff fed4 	bl	8005e98 <__cvt>
 80060f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060f2:	4680      	mov	r8, r0
 80060f4:	2947      	cmp	r1, #71	; 0x47
 80060f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060f8:	d108      	bne.n	800610c <_printf_float+0x138>
 80060fa:	1cc8      	adds	r0, r1, #3
 80060fc:	db02      	blt.n	8006104 <_printf_float+0x130>
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	4299      	cmp	r1, r3
 8006102:	dd40      	ble.n	8006186 <_printf_float+0x1b2>
 8006104:	f1a9 0902 	sub.w	r9, r9, #2
 8006108:	fa5f f989 	uxtb.w	r9, r9
 800610c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006110:	d81f      	bhi.n	8006152 <_printf_float+0x17e>
 8006112:	464a      	mov	r2, r9
 8006114:	3901      	subs	r1, #1
 8006116:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800611a:	910d      	str	r1, [sp, #52]	; 0x34
 800611c:	f7ff ff1b 	bl	8005f56 <__exponent>
 8006120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006122:	4682      	mov	sl, r0
 8006124:	1813      	adds	r3, r2, r0
 8006126:	2a01      	cmp	r2, #1
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	dc02      	bgt.n	8006132 <_printf_float+0x15e>
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	07d2      	lsls	r2, r2, #31
 8006130:	d501      	bpl.n	8006136 <_printf_float+0x162>
 8006132:	3301      	adds	r3, #1
 8006134:	6123      	str	r3, [r4, #16]
 8006136:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800613a:	2b00      	cmp	r3, #0
 800613c:	d09b      	beq.n	8006076 <_printf_float+0xa2>
 800613e:	232d      	movs	r3, #45	; 0x2d
 8006140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006144:	e797      	b.n	8006076 <_printf_float+0xa2>
 8006146:	2947      	cmp	r1, #71	; 0x47
 8006148:	d1bc      	bne.n	80060c4 <_printf_float+0xf0>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1ba      	bne.n	80060c4 <_printf_float+0xf0>
 800614e:	2301      	movs	r3, #1
 8006150:	e7b7      	b.n	80060c2 <_printf_float+0xee>
 8006152:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006156:	d118      	bne.n	800618a <_printf_float+0x1b6>
 8006158:	2900      	cmp	r1, #0
 800615a:	6863      	ldr	r3, [r4, #4]
 800615c:	dd0b      	ble.n	8006176 <_printf_float+0x1a2>
 800615e:	6121      	str	r1, [r4, #16]
 8006160:	b913      	cbnz	r3, 8006168 <_printf_float+0x194>
 8006162:	6822      	ldr	r2, [r4, #0]
 8006164:	07d0      	lsls	r0, r2, #31
 8006166:	d502      	bpl.n	800616e <_printf_float+0x19a>
 8006168:	3301      	adds	r3, #1
 800616a:	440b      	add	r3, r1
 800616c:	6123      	str	r3, [r4, #16]
 800616e:	f04f 0a00 	mov.w	sl, #0
 8006172:	65a1      	str	r1, [r4, #88]	; 0x58
 8006174:	e7df      	b.n	8006136 <_printf_float+0x162>
 8006176:	b913      	cbnz	r3, 800617e <_printf_float+0x1aa>
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	07d2      	lsls	r2, r2, #31
 800617c:	d501      	bpl.n	8006182 <_printf_float+0x1ae>
 800617e:	3302      	adds	r3, #2
 8006180:	e7f4      	b.n	800616c <_printf_float+0x198>
 8006182:	2301      	movs	r3, #1
 8006184:	e7f2      	b.n	800616c <_printf_float+0x198>
 8006186:	f04f 0967 	mov.w	r9, #103	; 0x67
 800618a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800618c:	4299      	cmp	r1, r3
 800618e:	db05      	blt.n	800619c <_printf_float+0x1c8>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	6121      	str	r1, [r4, #16]
 8006194:	07d8      	lsls	r0, r3, #31
 8006196:	d5ea      	bpl.n	800616e <_printf_float+0x19a>
 8006198:	1c4b      	adds	r3, r1, #1
 800619a:	e7e7      	b.n	800616c <_printf_float+0x198>
 800619c:	2900      	cmp	r1, #0
 800619e:	bfcc      	ite	gt
 80061a0:	2201      	movgt	r2, #1
 80061a2:	f1c1 0202 	rsble	r2, r1, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	e7e0      	b.n	800616c <_printf_float+0x198>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	055a      	lsls	r2, r3, #21
 80061ae:	d407      	bmi.n	80061c0 <_printf_float+0x1ec>
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	4642      	mov	r2, r8
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	d12b      	bne.n	8006216 <_printf_float+0x242>
 80061be:	e764      	b.n	800608a <_printf_float+0xb6>
 80061c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80061c4:	f240 80dd 	bls.w	8006382 <_printf_float+0x3ae>
 80061c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061cc:	2200      	movs	r2, #0
 80061ce:	2300      	movs	r3, #0
 80061d0:	f7fa fbf4 	bl	80009bc <__aeabi_dcmpeq>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d033      	beq.n	8006240 <_printf_float+0x26c>
 80061d8:	2301      	movs	r3, #1
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	4a35      	ldr	r2, [pc, #212]	; (80062b4 <_printf_float+0x2e0>)
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f af51 	beq.w	800608a <_printf_float+0xb6>
 80061e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061ec:	429a      	cmp	r2, r3
 80061ee:	db02      	blt.n	80061f6 <_printf_float+0x222>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	07d8      	lsls	r0, r3, #31
 80061f4:	d50f      	bpl.n	8006216 <_printf_float+0x242>
 80061f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	f43f af42 	beq.w	800608a <_printf_float+0xb6>
 8006206:	f04f 0800 	mov.w	r8, #0
 800620a:	f104 091a 	add.w	r9, r4, #26
 800620e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006210:	3b01      	subs	r3, #1
 8006212:	4543      	cmp	r3, r8
 8006214:	dc09      	bgt.n	800622a <_printf_float+0x256>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	079b      	lsls	r3, r3, #30
 800621a:	f100 8102 	bmi.w	8006422 <_printf_float+0x44e>
 800621e:	68e0      	ldr	r0, [r4, #12]
 8006220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006222:	4298      	cmp	r0, r3
 8006224:	bfb8      	it	lt
 8006226:	4618      	movlt	r0, r3
 8006228:	e731      	b.n	800608e <_printf_float+0xba>
 800622a:	2301      	movs	r3, #1
 800622c:	464a      	mov	r2, r9
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	f43f af28 	beq.w	800608a <_printf_float+0xb6>
 800623a:	f108 0801 	add.w	r8, r8, #1
 800623e:	e7e6      	b.n	800620e <_printf_float+0x23a>
 8006240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006242:	2b00      	cmp	r3, #0
 8006244:	dc38      	bgt.n	80062b8 <_printf_float+0x2e4>
 8006246:	2301      	movs	r3, #1
 8006248:	4631      	mov	r1, r6
 800624a:	4628      	mov	r0, r5
 800624c:	4a19      	ldr	r2, [pc, #100]	; (80062b4 <_printf_float+0x2e0>)
 800624e:	47b8      	blx	r7
 8006250:	3001      	adds	r0, #1
 8006252:	f43f af1a 	beq.w	800608a <_printf_float+0xb6>
 8006256:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800625a:	4313      	orrs	r3, r2
 800625c:	d102      	bne.n	8006264 <_printf_float+0x290>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	07d9      	lsls	r1, r3, #31
 8006262:	d5d8      	bpl.n	8006216 <_printf_float+0x242>
 8006264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f af0b 	beq.w	800608a <_printf_float+0xb6>
 8006274:	f04f 0900 	mov.w	r9, #0
 8006278:	f104 0a1a 	add.w	sl, r4, #26
 800627c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800627e:	425b      	negs	r3, r3
 8006280:	454b      	cmp	r3, r9
 8006282:	dc01      	bgt.n	8006288 <_printf_float+0x2b4>
 8006284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006286:	e794      	b.n	80061b2 <_printf_float+0x1de>
 8006288:	2301      	movs	r3, #1
 800628a:	4652      	mov	r2, sl
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f43f aef9 	beq.w	800608a <_printf_float+0xb6>
 8006298:	f109 0901 	add.w	r9, r9, #1
 800629c:	e7ee      	b.n	800627c <_printf_float+0x2a8>
 800629e:	bf00      	nop
 80062a0:	7fefffff 	.word	0x7fefffff
 80062a4:	0800ac24 	.word	0x0800ac24
 80062a8:	0800ac28 	.word	0x0800ac28
 80062ac:	0800ac30 	.word	0x0800ac30
 80062b0:	0800ac2c 	.word	0x0800ac2c
 80062b4:	0800ac34 	.word	0x0800ac34
 80062b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062bc:	429a      	cmp	r2, r3
 80062be:	bfa8      	it	ge
 80062c0:	461a      	movge	r2, r3
 80062c2:	2a00      	cmp	r2, #0
 80062c4:	4691      	mov	r9, r2
 80062c6:	dc37      	bgt.n	8006338 <_printf_float+0x364>
 80062c8:	f04f 0b00 	mov.w	fp, #0
 80062cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062d0:	f104 021a 	add.w	r2, r4, #26
 80062d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80062d8:	ebaa 0309 	sub.w	r3, sl, r9
 80062dc:	455b      	cmp	r3, fp
 80062de:	dc33      	bgt.n	8006348 <_printf_float+0x374>
 80062e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062e4:	429a      	cmp	r2, r3
 80062e6:	db3b      	blt.n	8006360 <_printf_float+0x38c>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	07da      	lsls	r2, r3, #31
 80062ec:	d438      	bmi.n	8006360 <_printf_float+0x38c>
 80062ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062f2:	eba3 020a 	sub.w	r2, r3, sl
 80062f6:	eba3 0901 	sub.w	r9, r3, r1
 80062fa:	4591      	cmp	r9, r2
 80062fc:	bfa8      	it	ge
 80062fe:	4691      	movge	r9, r2
 8006300:	f1b9 0f00 	cmp.w	r9, #0
 8006304:	dc34      	bgt.n	8006370 <_printf_float+0x39c>
 8006306:	f04f 0800 	mov.w	r8, #0
 800630a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800630e:	f104 0a1a 	add.w	sl, r4, #26
 8006312:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	eba3 0309 	sub.w	r3, r3, r9
 800631c:	4543      	cmp	r3, r8
 800631e:	f77f af7a 	ble.w	8006216 <_printf_float+0x242>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	f43f aeac 	beq.w	800608a <_printf_float+0xb6>
 8006332:	f108 0801 	add.w	r8, r8, #1
 8006336:	e7ec      	b.n	8006312 <_printf_float+0x33e>
 8006338:	4613      	mov	r3, r2
 800633a:	4631      	mov	r1, r6
 800633c:	4642      	mov	r2, r8
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	d1c0      	bne.n	80062c8 <_printf_float+0x2f4>
 8006346:	e6a0      	b.n	800608a <_printf_float+0xb6>
 8006348:	2301      	movs	r3, #1
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f ae99 	beq.w	800608a <_printf_float+0xb6>
 8006358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800635a:	f10b 0b01 	add.w	fp, fp, #1
 800635e:	e7b9      	b.n	80062d4 <_printf_float+0x300>
 8006360:	4631      	mov	r1, r6
 8006362:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	d1bf      	bne.n	80062ee <_printf_float+0x31a>
 800636e:	e68c      	b.n	800608a <_printf_float+0xb6>
 8006370:	464b      	mov	r3, r9
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	eb08 020a 	add.w	r2, r8, sl
 800637a:	47b8      	blx	r7
 800637c:	3001      	adds	r0, #1
 800637e:	d1c2      	bne.n	8006306 <_printf_float+0x332>
 8006380:	e683      	b.n	800608a <_printf_float+0xb6>
 8006382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006384:	2a01      	cmp	r2, #1
 8006386:	dc01      	bgt.n	800638c <_printf_float+0x3b8>
 8006388:	07db      	lsls	r3, r3, #31
 800638a:	d537      	bpl.n	80063fc <_printf_float+0x428>
 800638c:	2301      	movs	r3, #1
 800638e:	4642      	mov	r2, r8
 8006390:	4631      	mov	r1, r6
 8006392:	4628      	mov	r0, r5
 8006394:	47b8      	blx	r7
 8006396:	3001      	adds	r0, #1
 8006398:	f43f ae77 	beq.w	800608a <_printf_float+0xb6>
 800639c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063a0:	4631      	mov	r1, r6
 80063a2:	4628      	mov	r0, r5
 80063a4:	47b8      	blx	r7
 80063a6:	3001      	adds	r0, #1
 80063a8:	f43f ae6f 	beq.w	800608a <_printf_float+0xb6>
 80063ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063b0:	2200      	movs	r2, #0
 80063b2:	2300      	movs	r3, #0
 80063b4:	f7fa fb02 	bl	80009bc <__aeabi_dcmpeq>
 80063b8:	b9d8      	cbnz	r0, 80063f2 <_printf_float+0x41e>
 80063ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063bc:	f108 0201 	add.w	r2, r8, #1
 80063c0:	3b01      	subs	r3, #1
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	d10e      	bne.n	80063ea <_printf_float+0x416>
 80063cc:	e65d      	b.n	800608a <_printf_float+0xb6>
 80063ce:	2301      	movs	r3, #1
 80063d0:	464a      	mov	r2, r9
 80063d2:	4631      	mov	r1, r6
 80063d4:	4628      	mov	r0, r5
 80063d6:	47b8      	blx	r7
 80063d8:	3001      	adds	r0, #1
 80063da:	f43f ae56 	beq.w	800608a <_printf_float+0xb6>
 80063de:	f108 0801 	add.w	r8, r8, #1
 80063e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063e4:	3b01      	subs	r3, #1
 80063e6:	4543      	cmp	r3, r8
 80063e8:	dcf1      	bgt.n	80063ce <_printf_float+0x3fa>
 80063ea:	4653      	mov	r3, sl
 80063ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063f0:	e6e0      	b.n	80061b4 <_printf_float+0x1e0>
 80063f2:	f04f 0800 	mov.w	r8, #0
 80063f6:	f104 091a 	add.w	r9, r4, #26
 80063fa:	e7f2      	b.n	80063e2 <_printf_float+0x40e>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4642      	mov	r2, r8
 8006400:	e7df      	b.n	80063c2 <_printf_float+0x3ee>
 8006402:	2301      	movs	r3, #1
 8006404:	464a      	mov	r2, r9
 8006406:	4631      	mov	r1, r6
 8006408:	4628      	mov	r0, r5
 800640a:	47b8      	blx	r7
 800640c:	3001      	adds	r0, #1
 800640e:	f43f ae3c 	beq.w	800608a <_printf_float+0xb6>
 8006412:	f108 0801 	add.w	r8, r8, #1
 8006416:	68e3      	ldr	r3, [r4, #12]
 8006418:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800641a:	1a5b      	subs	r3, r3, r1
 800641c:	4543      	cmp	r3, r8
 800641e:	dcf0      	bgt.n	8006402 <_printf_float+0x42e>
 8006420:	e6fd      	b.n	800621e <_printf_float+0x24a>
 8006422:	f04f 0800 	mov.w	r8, #0
 8006426:	f104 0919 	add.w	r9, r4, #25
 800642a:	e7f4      	b.n	8006416 <_printf_float+0x442>

0800642c <_printf_common>:
 800642c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006430:	4616      	mov	r6, r2
 8006432:	4699      	mov	r9, r3
 8006434:	688a      	ldr	r2, [r1, #8]
 8006436:	690b      	ldr	r3, [r1, #16]
 8006438:	4607      	mov	r7, r0
 800643a:	4293      	cmp	r3, r2
 800643c:	bfb8      	it	lt
 800643e:	4613      	movlt	r3, r2
 8006440:	6033      	str	r3, [r6, #0]
 8006442:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006446:	460c      	mov	r4, r1
 8006448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800644c:	b10a      	cbz	r2, 8006452 <_printf_common+0x26>
 800644e:	3301      	adds	r3, #1
 8006450:	6033      	str	r3, [r6, #0]
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	0699      	lsls	r1, r3, #26
 8006456:	bf42      	ittt	mi
 8006458:	6833      	ldrmi	r3, [r6, #0]
 800645a:	3302      	addmi	r3, #2
 800645c:	6033      	strmi	r3, [r6, #0]
 800645e:	6825      	ldr	r5, [r4, #0]
 8006460:	f015 0506 	ands.w	r5, r5, #6
 8006464:	d106      	bne.n	8006474 <_printf_common+0x48>
 8006466:	f104 0a19 	add.w	sl, r4, #25
 800646a:	68e3      	ldr	r3, [r4, #12]
 800646c:	6832      	ldr	r2, [r6, #0]
 800646e:	1a9b      	subs	r3, r3, r2
 8006470:	42ab      	cmp	r3, r5
 8006472:	dc28      	bgt.n	80064c6 <_printf_common+0x9a>
 8006474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006478:	1e13      	subs	r3, r2, #0
 800647a:	6822      	ldr	r2, [r4, #0]
 800647c:	bf18      	it	ne
 800647e:	2301      	movne	r3, #1
 8006480:	0692      	lsls	r2, r2, #26
 8006482:	d42d      	bmi.n	80064e0 <_printf_common+0xb4>
 8006484:	4649      	mov	r1, r9
 8006486:	4638      	mov	r0, r7
 8006488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d020      	beq.n	80064d4 <_printf_common+0xa8>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	68e5      	ldr	r5, [r4, #12]
 8006496:	f003 0306 	and.w	r3, r3, #6
 800649a:	2b04      	cmp	r3, #4
 800649c:	bf18      	it	ne
 800649e:	2500      	movne	r5, #0
 80064a0:	6832      	ldr	r2, [r6, #0]
 80064a2:	f04f 0600 	mov.w	r6, #0
 80064a6:	68a3      	ldr	r3, [r4, #8]
 80064a8:	bf08      	it	eq
 80064aa:	1aad      	subeq	r5, r5, r2
 80064ac:	6922      	ldr	r2, [r4, #16]
 80064ae:	bf08      	it	eq
 80064b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b4:	4293      	cmp	r3, r2
 80064b6:	bfc4      	itt	gt
 80064b8:	1a9b      	subgt	r3, r3, r2
 80064ba:	18ed      	addgt	r5, r5, r3
 80064bc:	341a      	adds	r4, #26
 80064be:	42b5      	cmp	r5, r6
 80064c0:	d11a      	bne.n	80064f8 <_printf_common+0xcc>
 80064c2:	2000      	movs	r0, #0
 80064c4:	e008      	b.n	80064d8 <_printf_common+0xac>
 80064c6:	2301      	movs	r3, #1
 80064c8:	4652      	mov	r2, sl
 80064ca:	4649      	mov	r1, r9
 80064cc:	4638      	mov	r0, r7
 80064ce:	47c0      	blx	r8
 80064d0:	3001      	adds	r0, #1
 80064d2:	d103      	bne.n	80064dc <_printf_common+0xb0>
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295
 80064d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064dc:	3501      	adds	r5, #1
 80064de:	e7c4      	b.n	800646a <_printf_common+0x3e>
 80064e0:	2030      	movs	r0, #48	; 0x30
 80064e2:	18e1      	adds	r1, r4, r3
 80064e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064ee:	4422      	add	r2, r4
 80064f0:	3302      	adds	r3, #2
 80064f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064f6:	e7c5      	b.n	8006484 <_printf_common+0x58>
 80064f8:	2301      	movs	r3, #1
 80064fa:	4622      	mov	r2, r4
 80064fc:	4649      	mov	r1, r9
 80064fe:	4638      	mov	r0, r7
 8006500:	47c0      	blx	r8
 8006502:	3001      	adds	r0, #1
 8006504:	d0e6      	beq.n	80064d4 <_printf_common+0xa8>
 8006506:	3601      	adds	r6, #1
 8006508:	e7d9      	b.n	80064be <_printf_common+0x92>
	...

0800650c <_printf_i>:
 800650c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	7e0f      	ldrb	r7, [r1, #24]
 8006512:	4691      	mov	r9, r2
 8006514:	2f78      	cmp	r7, #120	; 0x78
 8006516:	4680      	mov	r8, r0
 8006518:	460c      	mov	r4, r1
 800651a:	469a      	mov	sl, r3
 800651c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800651e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006522:	d807      	bhi.n	8006534 <_printf_i+0x28>
 8006524:	2f62      	cmp	r7, #98	; 0x62
 8006526:	d80a      	bhi.n	800653e <_printf_i+0x32>
 8006528:	2f00      	cmp	r7, #0
 800652a:	f000 80d9 	beq.w	80066e0 <_printf_i+0x1d4>
 800652e:	2f58      	cmp	r7, #88	; 0x58
 8006530:	f000 80a4 	beq.w	800667c <_printf_i+0x170>
 8006534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800653c:	e03a      	b.n	80065b4 <_printf_i+0xa8>
 800653e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006542:	2b15      	cmp	r3, #21
 8006544:	d8f6      	bhi.n	8006534 <_printf_i+0x28>
 8006546:	a101      	add	r1, pc, #4	; (adr r1, 800654c <_printf_i+0x40>)
 8006548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800654c:	080065a5 	.word	0x080065a5
 8006550:	080065b9 	.word	0x080065b9
 8006554:	08006535 	.word	0x08006535
 8006558:	08006535 	.word	0x08006535
 800655c:	08006535 	.word	0x08006535
 8006560:	08006535 	.word	0x08006535
 8006564:	080065b9 	.word	0x080065b9
 8006568:	08006535 	.word	0x08006535
 800656c:	08006535 	.word	0x08006535
 8006570:	08006535 	.word	0x08006535
 8006574:	08006535 	.word	0x08006535
 8006578:	080066c7 	.word	0x080066c7
 800657c:	080065e9 	.word	0x080065e9
 8006580:	080066a9 	.word	0x080066a9
 8006584:	08006535 	.word	0x08006535
 8006588:	08006535 	.word	0x08006535
 800658c:	080066e9 	.word	0x080066e9
 8006590:	08006535 	.word	0x08006535
 8006594:	080065e9 	.word	0x080065e9
 8006598:	08006535 	.word	0x08006535
 800659c:	08006535 	.word	0x08006535
 80065a0:	080066b1 	.word	0x080066b1
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	1d1a      	adds	r2, r3, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	602a      	str	r2, [r5, #0]
 80065ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0a4      	b.n	8006702 <_printf_i+0x1f6>
 80065b8:	6820      	ldr	r0, [r4, #0]
 80065ba:	6829      	ldr	r1, [r5, #0]
 80065bc:	0606      	lsls	r6, r0, #24
 80065be:	f101 0304 	add.w	r3, r1, #4
 80065c2:	d50a      	bpl.n	80065da <_printf_i+0xce>
 80065c4:	680e      	ldr	r6, [r1, #0]
 80065c6:	602b      	str	r3, [r5, #0]
 80065c8:	2e00      	cmp	r6, #0
 80065ca:	da03      	bge.n	80065d4 <_printf_i+0xc8>
 80065cc:	232d      	movs	r3, #45	; 0x2d
 80065ce:	4276      	negs	r6, r6
 80065d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d4:	230a      	movs	r3, #10
 80065d6:	485e      	ldr	r0, [pc, #376]	; (8006750 <_printf_i+0x244>)
 80065d8:	e019      	b.n	800660e <_printf_i+0x102>
 80065da:	680e      	ldr	r6, [r1, #0]
 80065dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	bf18      	it	ne
 80065e4:	b236      	sxthne	r6, r6
 80065e6:	e7ef      	b.n	80065c8 <_printf_i+0xbc>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	6820      	ldr	r0, [r4, #0]
 80065ec:	1d19      	adds	r1, r3, #4
 80065ee:	6029      	str	r1, [r5, #0]
 80065f0:	0601      	lsls	r1, r0, #24
 80065f2:	d501      	bpl.n	80065f8 <_printf_i+0xec>
 80065f4:	681e      	ldr	r6, [r3, #0]
 80065f6:	e002      	b.n	80065fe <_printf_i+0xf2>
 80065f8:	0646      	lsls	r6, r0, #25
 80065fa:	d5fb      	bpl.n	80065f4 <_printf_i+0xe8>
 80065fc:	881e      	ldrh	r6, [r3, #0]
 80065fe:	2f6f      	cmp	r7, #111	; 0x6f
 8006600:	bf0c      	ite	eq
 8006602:	2308      	moveq	r3, #8
 8006604:	230a      	movne	r3, #10
 8006606:	4852      	ldr	r0, [pc, #328]	; (8006750 <_printf_i+0x244>)
 8006608:	2100      	movs	r1, #0
 800660a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800660e:	6865      	ldr	r5, [r4, #4]
 8006610:	2d00      	cmp	r5, #0
 8006612:	bfa8      	it	ge
 8006614:	6821      	ldrge	r1, [r4, #0]
 8006616:	60a5      	str	r5, [r4, #8]
 8006618:	bfa4      	itt	ge
 800661a:	f021 0104 	bicge.w	r1, r1, #4
 800661e:	6021      	strge	r1, [r4, #0]
 8006620:	b90e      	cbnz	r6, 8006626 <_printf_i+0x11a>
 8006622:	2d00      	cmp	r5, #0
 8006624:	d04d      	beq.n	80066c2 <_printf_i+0x1b6>
 8006626:	4615      	mov	r5, r2
 8006628:	fbb6 f1f3 	udiv	r1, r6, r3
 800662c:	fb03 6711 	mls	r7, r3, r1, r6
 8006630:	5dc7      	ldrb	r7, [r0, r7]
 8006632:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006636:	4637      	mov	r7, r6
 8006638:	42bb      	cmp	r3, r7
 800663a:	460e      	mov	r6, r1
 800663c:	d9f4      	bls.n	8006628 <_printf_i+0x11c>
 800663e:	2b08      	cmp	r3, #8
 8006640:	d10b      	bne.n	800665a <_printf_i+0x14e>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	07de      	lsls	r6, r3, #31
 8006646:	d508      	bpl.n	800665a <_printf_i+0x14e>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	6861      	ldr	r1, [r4, #4]
 800664c:	4299      	cmp	r1, r3
 800664e:	bfde      	ittt	le
 8006650:	2330      	movle	r3, #48	; 0x30
 8006652:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006656:	f105 35ff 	addle.w	r5, r5, #4294967295
 800665a:	1b52      	subs	r2, r2, r5
 800665c:	6122      	str	r2, [r4, #16]
 800665e:	464b      	mov	r3, r9
 8006660:	4621      	mov	r1, r4
 8006662:	4640      	mov	r0, r8
 8006664:	f8cd a000 	str.w	sl, [sp]
 8006668:	aa03      	add	r2, sp, #12
 800666a:	f7ff fedf 	bl	800642c <_printf_common>
 800666e:	3001      	adds	r0, #1
 8006670:	d14c      	bne.n	800670c <_printf_i+0x200>
 8006672:	f04f 30ff 	mov.w	r0, #4294967295
 8006676:	b004      	add	sp, #16
 8006678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667c:	4834      	ldr	r0, [pc, #208]	; (8006750 <_printf_i+0x244>)
 800667e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006682:	6829      	ldr	r1, [r5, #0]
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	f851 6b04 	ldr.w	r6, [r1], #4
 800668a:	6029      	str	r1, [r5, #0]
 800668c:	061d      	lsls	r5, r3, #24
 800668e:	d514      	bpl.n	80066ba <_printf_i+0x1ae>
 8006690:	07df      	lsls	r7, r3, #31
 8006692:	bf44      	itt	mi
 8006694:	f043 0320 	orrmi.w	r3, r3, #32
 8006698:	6023      	strmi	r3, [r4, #0]
 800669a:	b91e      	cbnz	r6, 80066a4 <_printf_i+0x198>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	f023 0320 	bic.w	r3, r3, #32
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	2310      	movs	r3, #16
 80066a6:	e7af      	b.n	8006608 <_printf_i+0xfc>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	f043 0320 	orr.w	r3, r3, #32
 80066ae:	6023      	str	r3, [r4, #0]
 80066b0:	2378      	movs	r3, #120	; 0x78
 80066b2:	4828      	ldr	r0, [pc, #160]	; (8006754 <_printf_i+0x248>)
 80066b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066b8:	e7e3      	b.n	8006682 <_printf_i+0x176>
 80066ba:	0659      	lsls	r1, r3, #25
 80066bc:	bf48      	it	mi
 80066be:	b2b6      	uxthmi	r6, r6
 80066c0:	e7e6      	b.n	8006690 <_printf_i+0x184>
 80066c2:	4615      	mov	r5, r2
 80066c4:	e7bb      	b.n	800663e <_printf_i+0x132>
 80066c6:	682b      	ldr	r3, [r5, #0]
 80066c8:	6826      	ldr	r6, [r4, #0]
 80066ca:	1d18      	adds	r0, r3, #4
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	6028      	str	r0, [r5, #0]
 80066d0:	0635      	lsls	r5, r6, #24
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	d501      	bpl.n	80066da <_printf_i+0x1ce>
 80066d6:	6019      	str	r1, [r3, #0]
 80066d8:	e002      	b.n	80066e0 <_printf_i+0x1d4>
 80066da:	0670      	lsls	r0, r6, #25
 80066dc:	d5fb      	bpl.n	80066d6 <_printf_i+0x1ca>
 80066de:	8019      	strh	r1, [r3, #0]
 80066e0:	2300      	movs	r3, #0
 80066e2:	4615      	mov	r5, r2
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	e7ba      	b.n	800665e <_printf_i+0x152>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	2100      	movs	r1, #0
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	602a      	str	r2, [r5, #0]
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	4628      	mov	r0, r5
 80066f6:	f002 fe89 	bl	800940c <memchr>
 80066fa:	b108      	cbz	r0, 8006700 <_printf_i+0x1f4>
 80066fc:	1b40      	subs	r0, r0, r5
 80066fe:	6060      	str	r0, [r4, #4]
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	2300      	movs	r3, #0
 8006706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670a:	e7a8      	b.n	800665e <_printf_i+0x152>
 800670c:	462a      	mov	r2, r5
 800670e:	4649      	mov	r1, r9
 8006710:	4640      	mov	r0, r8
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	47d0      	blx	sl
 8006716:	3001      	adds	r0, #1
 8006718:	d0ab      	beq.n	8006672 <_printf_i+0x166>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	079b      	lsls	r3, r3, #30
 800671e:	d413      	bmi.n	8006748 <_printf_i+0x23c>
 8006720:	68e0      	ldr	r0, [r4, #12]
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	4298      	cmp	r0, r3
 8006726:	bfb8      	it	lt
 8006728:	4618      	movlt	r0, r3
 800672a:	e7a4      	b.n	8006676 <_printf_i+0x16a>
 800672c:	2301      	movs	r3, #1
 800672e:	4632      	mov	r2, r6
 8006730:	4649      	mov	r1, r9
 8006732:	4640      	mov	r0, r8
 8006734:	47d0      	blx	sl
 8006736:	3001      	adds	r0, #1
 8006738:	d09b      	beq.n	8006672 <_printf_i+0x166>
 800673a:	3501      	adds	r5, #1
 800673c:	68e3      	ldr	r3, [r4, #12]
 800673e:	9903      	ldr	r1, [sp, #12]
 8006740:	1a5b      	subs	r3, r3, r1
 8006742:	42ab      	cmp	r3, r5
 8006744:	dcf2      	bgt.n	800672c <_printf_i+0x220>
 8006746:	e7eb      	b.n	8006720 <_printf_i+0x214>
 8006748:	2500      	movs	r5, #0
 800674a:	f104 0619 	add.w	r6, r4, #25
 800674e:	e7f5      	b.n	800673c <_printf_i+0x230>
 8006750:	0800ac36 	.word	0x0800ac36
 8006754:	0800ac47 	.word	0x0800ac47

08006758 <_scanf_float>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	b087      	sub	sp, #28
 800675e:	9303      	str	r3, [sp, #12]
 8006760:	688b      	ldr	r3, [r1, #8]
 8006762:	4617      	mov	r7, r2
 8006764:	1e5a      	subs	r2, r3, #1
 8006766:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800676a:	bf85      	ittet	hi
 800676c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006770:	195b      	addhi	r3, r3, r5
 8006772:	2300      	movls	r3, #0
 8006774:	9302      	strhi	r3, [sp, #8]
 8006776:	bf88      	it	hi
 8006778:	f240 135d 	movwhi	r3, #349	; 0x15d
 800677c:	468b      	mov	fp, r1
 800677e:	f04f 0500 	mov.w	r5, #0
 8006782:	bf8c      	ite	hi
 8006784:	608b      	strhi	r3, [r1, #8]
 8006786:	9302      	strls	r3, [sp, #8]
 8006788:	680b      	ldr	r3, [r1, #0]
 800678a:	4680      	mov	r8, r0
 800678c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006790:	f84b 3b1c 	str.w	r3, [fp], #28
 8006794:	460c      	mov	r4, r1
 8006796:	465e      	mov	r6, fp
 8006798:	46aa      	mov	sl, r5
 800679a:	46a9      	mov	r9, r5
 800679c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067a0:	9501      	str	r5, [sp, #4]
 80067a2:	68a2      	ldr	r2, [r4, #8]
 80067a4:	b152      	cbz	r2, 80067bc <_scanf_float+0x64>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b4e      	cmp	r3, #78	; 0x4e
 80067ac:	d864      	bhi.n	8006878 <_scanf_float+0x120>
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d83c      	bhi.n	800682c <_scanf_float+0xd4>
 80067b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80067b6:	b2c8      	uxtb	r0, r1
 80067b8:	280e      	cmp	r0, #14
 80067ba:	d93a      	bls.n	8006832 <_scanf_float+0xda>
 80067bc:	f1b9 0f00 	cmp.w	r9, #0
 80067c0:	d003      	beq.n	80067ca <_scanf_float+0x72>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ce:	f1ba 0f01 	cmp.w	sl, #1
 80067d2:	f200 8113 	bhi.w	80069fc <_scanf_float+0x2a4>
 80067d6:	455e      	cmp	r6, fp
 80067d8:	f200 8105 	bhi.w	80069e6 <_scanf_float+0x28e>
 80067dc:	2501      	movs	r5, #1
 80067de:	4628      	mov	r0, r5
 80067e0:	b007      	add	sp, #28
 80067e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80067ea:	2a0d      	cmp	r2, #13
 80067ec:	d8e6      	bhi.n	80067bc <_scanf_float+0x64>
 80067ee:	a101      	add	r1, pc, #4	; (adr r1, 80067f4 <_scanf_float+0x9c>)
 80067f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80067f4:	08006933 	.word	0x08006933
 80067f8:	080067bd 	.word	0x080067bd
 80067fc:	080067bd 	.word	0x080067bd
 8006800:	080067bd 	.word	0x080067bd
 8006804:	08006993 	.word	0x08006993
 8006808:	0800696b 	.word	0x0800696b
 800680c:	080067bd 	.word	0x080067bd
 8006810:	080067bd 	.word	0x080067bd
 8006814:	08006941 	.word	0x08006941
 8006818:	080067bd 	.word	0x080067bd
 800681c:	080067bd 	.word	0x080067bd
 8006820:	080067bd 	.word	0x080067bd
 8006824:	080067bd 	.word	0x080067bd
 8006828:	080068f9 	.word	0x080068f9
 800682c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006830:	e7db      	b.n	80067ea <_scanf_float+0x92>
 8006832:	290e      	cmp	r1, #14
 8006834:	d8c2      	bhi.n	80067bc <_scanf_float+0x64>
 8006836:	a001      	add	r0, pc, #4	; (adr r0, 800683c <_scanf_float+0xe4>)
 8006838:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800683c:	080068eb 	.word	0x080068eb
 8006840:	080067bd 	.word	0x080067bd
 8006844:	080068eb 	.word	0x080068eb
 8006848:	0800697f 	.word	0x0800697f
 800684c:	080067bd 	.word	0x080067bd
 8006850:	08006899 	.word	0x08006899
 8006854:	080068d5 	.word	0x080068d5
 8006858:	080068d5 	.word	0x080068d5
 800685c:	080068d5 	.word	0x080068d5
 8006860:	080068d5 	.word	0x080068d5
 8006864:	080068d5 	.word	0x080068d5
 8006868:	080068d5 	.word	0x080068d5
 800686c:	080068d5 	.word	0x080068d5
 8006870:	080068d5 	.word	0x080068d5
 8006874:	080068d5 	.word	0x080068d5
 8006878:	2b6e      	cmp	r3, #110	; 0x6e
 800687a:	d809      	bhi.n	8006890 <_scanf_float+0x138>
 800687c:	2b60      	cmp	r3, #96	; 0x60
 800687e:	d8b2      	bhi.n	80067e6 <_scanf_float+0x8e>
 8006880:	2b54      	cmp	r3, #84	; 0x54
 8006882:	d077      	beq.n	8006974 <_scanf_float+0x21c>
 8006884:	2b59      	cmp	r3, #89	; 0x59
 8006886:	d199      	bne.n	80067bc <_scanf_float+0x64>
 8006888:	2d07      	cmp	r5, #7
 800688a:	d197      	bne.n	80067bc <_scanf_float+0x64>
 800688c:	2508      	movs	r5, #8
 800688e:	e029      	b.n	80068e4 <_scanf_float+0x18c>
 8006890:	2b74      	cmp	r3, #116	; 0x74
 8006892:	d06f      	beq.n	8006974 <_scanf_float+0x21c>
 8006894:	2b79      	cmp	r3, #121	; 0x79
 8006896:	e7f6      	b.n	8006886 <_scanf_float+0x12e>
 8006898:	6821      	ldr	r1, [r4, #0]
 800689a:	05c8      	lsls	r0, r1, #23
 800689c:	d51a      	bpl.n	80068d4 <_scanf_float+0x17c>
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80068a4:	6021      	str	r1, [r4, #0]
 80068a6:	f109 0901 	add.w	r9, r9, #1
 80068aa:	b11b      	cbz	r3, 80068b4 <_scanf_float+0x15c>
 80068ac:	3b01      	subs	r3, #1
 80068ae:	3201      	adds	r2, #1
 80068b0:	9302      	str	r3, [sp, #8]
 80068b2:	60a2      	str	r2, [r4, #8]
 80068b4:	68a3      	ldr	r3, [r4, #8]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	60a3      	str	r3, [r4, #8]
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	3301      	adds	r3, #1
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	f340 8084 	ble.w	80069d4 <_scanf_float+0x27c>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	3301      	adds	r3, #1
 80068d0:	603b      	str	r3, [r7, #0]
 80068d2:	e766      	b.n	80067a2 <_scanf_float+0x4a>
 80068d4:	eb1a 0f05 	cmn.w	sl, r5
 80068d8:	f47f af70 	bne.w	80067bc <_scanf_float+0x64>
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80068e2:	6022      	str	r2, [r4, #0]
 80068e4:	f806 3b01 	strb.w	r3, [r6], #1
 80068e8:	e7e4      	b.n	80068b4 <_scanf_float+0x15c>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	0610      	lsls	r0, r2, #24
 80068ee:	f57f af65 	bpl.w	80067bc <_scanf_float+0x64>
 80068f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068f6:	e7f4      	b.n	80068e2 <_scanf_float+0x18a>
 80068f8:	f1ba 0f00 	cmp.w	sl, #0
 80068fc:	d10e      	bne.n	800691c <_scanf_float+0x1c4>
 80068fe:	f1b9 0f00 	cmp.w	r9, #0
 8006902:	d10e      	bne.n	8006922 <_scanf_float+0x1ca>
 8006904:	6822      	ldr	r2, [r4, #0]
 8006906:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800690a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800690e:	d108      	bne.n	8006922 <_scanf_float+0x1ca>
 8006910:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006914:	f04f 0a01 	mov.w	sl, #1
 8006918:	6022      	str	r2, [r4, #0]
 800691a:	e7e3      	b.n	80068e4 <_scanf_float+0x18c>
 800691c:	f1ba 0f02 	cmp.w	sl, #2
 8006920:	d055      	beq.n	80069ce <_scanf_float+0x276>
 8006922:	2d01      	cmp	r5, #1
 8006924:	d002      	beq.n	800692c <_scanf_float+0x1d4>
 8006926:	2d04      	cmp	r5, #4
 8006928:	f47f af48 	bne.w	80067bc <_scanf_float+0x64>
 800692c:	3501      	adds	r5, #1
 800692e:	b2ed      	uxtb	r5, r5
 8006930:	e7d8      	b.n	80068e4 <_scanf_float+0x18c>
 8006932:	f1ba 0f01 	cmp.w	sl, #1
 8006936:	f47f af41 	bne.w	80067bc <_scanf_float+0x64>
 800693a:	f04f 0a02 	mov.w	sl, #2
 800693e:	e7d1      	b.n	80068e4 <_scanf_float+0x18c>
 8006940:	b97d      	cbnz	r5, 8006962 <_scanf_float+0x20a>
 8006942:	f1b9 0f00 	cmp.w	r9, #0
 8006946:	f47f af3c 	bne.w	80067c2 <_scanf_float+0x6a>
 800694a:	6822      	ldr	r2, [r4, #0]
 800694c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006950:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006954:	f47f af39 	bne.w	80067ca <_scanf_float+0x72>
 8006958:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800695c:	2501      	movs	r5, #1
 800695e:	6022      	str	r2, [r4, #0]
 8006960:	e7c0      	b.n	80068e4 <_scanf_float+0x18c>
 8006962:	2d03      	cmp	r5, #3
 8006964:	d0e2      	beq.n	800692c <_scanf_float+0x1d4>
 8006966:	2d05      	cmp	r5, #5
 8006968:	e7de      	b.n	8006928 <_scanf_float+0x1d0>
 800696a:	2d02      	cmp	r5, #2
 800696c:	f47f af26 	bne.w	80067bc <_scanf_float+0x64>
 8006970:	2503      	movs	r5, #3
 8006972:	e7b7      	b.n	80068e4 <_scanf_float+0x18c>
 8006974:	2d06      	cmp	r5, #6
 8006976:	f47f af21 	bne.w	80067bc <_scanf_float+0x64>
 800697a:	2507      	movs	r5, #7
 800697c:	e7b2      	b.n	80068e4 <_scanf_float+0x18c>
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	0591      	lsls	r1, r2, #22
 8006982:	f57f af1b 	bpl.w	80067bc <_scanf_float+0x64>
 8006986:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800698a:	6022      	str	r2, [r4, #0]
 800698c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006990:	e7a8      	b.n	80068e4 <_scanf_float+0x18c>
 8006992:	6822      	ldr	r2, [r4, #0]
 8006994:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006998:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800699c:	d006      	beq.n	80069ac <_scanf_float+0x254>
 800699e:	0550      	lsls	r0, r2, #21
 80069a0:	f57f af0c 	bpl.w	80067bc <_scanf_float+0x64>
 80069a4:	f1b9 0f00 	cmp.w	r9, #0
 80069a8:	f43f af0f 	beq.w	80067ca <_scanf_float+0x72>
 80069ac:	0591      	lsls	r1, r2, #22
 80069ae:	bf58      	it	pl
 80069b0:	9901      	ldrpl	r1, [sp, #4]
 80069b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069b6:	bf58      	it	pl
 80069b8:	eba9 0101 	subpl.w	r1, r9, r1
 80069bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80069c0:	f04f 0900 	mov.w	r9, #0
 80069c4:	bf58      	it	pl
 80069c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80069ca:	6022      	str	r2, [r4, #0]
 80069cc:	e78a      	b.n	80068e4 <_scanf_float+0x18c>
 80069ce:	f04f 0a03 	mov.w	sl, #3
 80069d2:	e787      	b.n	80068e4 <_scanf_float+0x18c>
 80069d4:	4639      	mov	r1, r7
 80069d6:	4640      	mov	r0, r8
 80069d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069dc:	4798      	blx	r3
 80069de:	2800      	cmp	r0, #0
 80069e0:	f43f aedf 	beq.w	80067a2 <_scanf_float+0x4a>
 80069e4:	e6ea      	b.n	80067bc <_scanf_float+0x64>
 80069e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069ea:	463a      	mov	r2, r7
 80069ec:	4640      	mov	r0, r8
 80069ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069f2:	4798      	blx	r3
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	e6ec      	b.n	80067d6 <_scanf_float+0x7e>
 80069fc:	1e6b      	subs	r3, r5, #1
 80069fe:	2b06      	cmp	r3, #6
 8006a00:	d825      	bhi.n	8006a4e <_scanf_float+0x2f6>
 8006a02:	2d02      	cmp	r5, #2
 8006a04:	d836      	bhi.n	8006a74 <_scanf_float+0x31c>
 8006a06:	455e      	cmp	r6, fp
 8006a08:	f67f aee8 	bls.w	80067dc <_scanf_float+0x84>
 8006a0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a10:	463a      	mov	r2, r7
 8006a12:	4640      	mov	r0, r8
 8006a14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a18:	4798      	blx	r3
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	e7f1      	b.n	8006a06 <_scanf_float+0x2ae>
 8006a22:	9802      	ldr	r0, [sp, #8]
 8006a24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006a2c:	463a      	mov	r2, r7
 8006a2e:	9002      	str	r0, [sp, #8]
 8006a30:	4640      	mov	r0, r8
 8006a32:	4798      	blx	r3
 8006a34:	6923      	ldr	r3, [r4, #16]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	6123      	str	r3, [r4, #16]
 8006a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a3e:	fa5f fa8a 	uxtb.w	sl, sl
 8006a42:	f1ba 0f02 	cmp.w	sl, #2
 8006a46:	d1ec      	bne.n	8006a22 <_scanf_float+0x2ca>
 8006a48:	3d03      	subs	r5, #3
 8006a4a:	b2ed      	uxtb	r5, r5
 8006a4c:	1b76      	subs	r6, r6, r5
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	05da      	lsls	r2, r3, #23
 8006a52:	d52f      	bpl.n	8006ab4 <_scanf_float+0x35c>
 8006a54:	055b      	lsls	r3, r3, #21
 8006a56:	d510      	bpl.n	8006a7a <_scanf_float+0x322>
 8006a58:	455e      	cmp	r6, fp
 8006a5a:	f67f aebf 	bls.w	80067dc <_scanf_float+0x84>
 8006a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a62:	463a      	mov	r2, r7
 8006a64:	4640      	mov	r0, r8
 8006a66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a6a:	4798      	blx	r3
 8006a6c:	6923      	ldr	r3, [r4, #16]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	6123      	str	r3, [r4, #16]
 8006a72:	e7f1      	b.n	8006a58 <_scanf_float+0x300>
 8006a74:	46aa      	mov	sl, r5
 8006a76:	9602      	str	r6, [sp, #8]
 8006a78:	e7df      	b.n	8006a3a <_scanf_float+0x2e2>
 8006a7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	2965      	cmp	r1, #101	; 0x65
 8006a82:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a86:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	d00c      	beq.n	8006aa8 <_scanf_float+0x350>
 8006a8e:	2945      	cmp	r1, #69	; 0x45
 8006a90:	d00a      	beq.n	8006aa8 <_scanf_float+0x350>
 8006a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a96:	463a      	mov	r2, r7
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4798      	blx	r3
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	1eb5      	subs	r5, r6, #2
 8006aa6:	6123      	str	r3, [r4, #16]
 8006aa8:	463a      	mov	r2, r7
 8006aaa:	4640      	mov	r0, r8
 8006aac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ab0:	4798      	blx	r3
 8006ab2:	462e      	mov	r6, r5
 8006ab4:	6825      	ldr	r5, [r4, #0]
 8006ab6:	f015 0510 	ands.w	r5, r5, #16
 8006aba:	d155      	bne.n	8006b68 <_scanf_float+0x410>
 8006abc:	7035      	strb	r5, [r6, #0]
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac8:	d11b      	bne.n	8006b02 <_scanf_float+0x3aa>
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	454b      	cmp	r3, r9
 8006ace:	eba3 0209 	sub.w	r2, r3, r9
 8006ad2:	d123      	bne.n	8006b1c <_scanf_float+0x3c4>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	4640      	mov	r0, r8
 8006ada:	f000 ff2d 	bl	8007938 <_strtod_r>
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	f012 0f02 	tst.w	r2, #2
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	460f      	mov	r7, r1
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	d021      	beq.n	8006b32 <_scanf_float+0x3da>
 8006aee:	1d1a      	adds	r2, r3, #4
 8006af0:	9903      	ldr	r1, [sp, #12]
 8006af2:	600a      	str	r2, [r1, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	e9c3 6700 	strd	r6, r7, [r3]
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60e3      	str	r3, [r4, #12]
 8006b00:	e66d      	b.n	80067de <_scanf_float+0x86>
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0e5      	beq.n	8006ad4 <_scanf_float+0x37c>
 8006b08:	9905      	ldr	r1, [sp, #20]
 8006b0a:	230a      	movs	r3, #10
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	4640      	mov	r0, r8
 8006b10:	3101      	adds	r1, #1
 8006b12:	f000 ff93 	bl	8007a3c <_strtol_r>
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	9e05      	ldr	r6, [sp, #20]
 8006b1a:	1ac2      	subs	r2, r0, r3
 8006b1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b20:	429e      	cmp	r6, r3
 8006b22:	bf28      	it	cs
 8006b24:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4910      	ldr	r1, [pc, #64]	; (8006b6c <_scanf_float+0x414>)
 8006b2c:	f000 f8c8 	bl	8006cc0 <siprintf>
 8006b30:	e7d0      	b.n	8006ad4 <_scanf_float+0x37c>
 8006b32:	f012 0f04 	tst.w	r2, #4
 8006b36:	f103 0204 	add.w	r2, r3, #4
 8006b3a:	d1d9      	bne.n	8006af0 <_scanf_float+0x398>
 8006b3c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006b40:	f8cc 2000 	str.w	r2, [ip]
 8006b44:	f8d3 8000 	ldr.w	r8, [r3]
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	f7f9 ff68 	bl	8000a20 <__aeabi_dcmpun>
 8006b50:	b128      	cbz	r0, 8006b5e <_scanf_float+0x406>
 8006b52:	4807      	ldr	r0, [pc, #28]	; (8006b70 <_scanf_float+0x418>)
 8006b54:	f000 f8b0 	bl	8006cb8 <nanf>
 8006b58:	f8c8 0000 	str.w	r0, [r8]
 8006b5c:	e7cd      	b.n	8006afa <_scanf_float+0x3a2>
 8006b5e:	4630      	mov	r0, r6
 8006b60:	4639      	mov	r1, r7
 8006b62:	f7f9 ffbb 	bl	8000adc <__aeabi_d2f>
 8006b66:	e7f7      	b.n	8006b58 <_scanf_float+0x400>
 8006b68:	2500      	movs	r5, #0
 8006b6a:	e638      	b.n	80067de <_scanf_float+0x86>
 8006b6c:	0800ac58 	.word	0x0800ac58
 8006b70:	0800b0c8 	.word	0x0800b0c8

08006b74 <iprintf>:
 8006b74:	b40f      	push	{r0, r1, r2, r3}
 8006b76:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <iprintf+0x2c>)
 8006b78:	b513      	push	{r0, r1, r4, lr}
 8006b7a:	681c      	ldr	r4, [r3, #0]
 8006b7c:	b124      	cbz	r4, 8006b88 <iprintf+0x14>
 8006b7e:	69a3      	ldr	r3, [r4, #24]
 8006b80:	b913      	cbnz	r3, 8006b88 <iprintf+0x14>
 8006b82:	4620      	mov	r0, r4
 8006b84:	f001 ffb8 	bl	8008af8 <__sinit>
 8006b88:	ab05      	add	r3, sp, #20
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	9a04      	ldr	r2, [sp, #16]
 8006b8e:	68a1      	ldr	r1, [r4, #8]
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	f003 fb83 	bl	800a29c <_vfiprintf_r>
 8006b96:	b002      	add	sp, #8
 8006b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9c:	b004      	add	sp, #16
 8006b9e:	4770      	bx	lr
 8006ba0:	20000010 	.word	0x20000010

08006ba4 <putchar>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <putchar+0x24>)
 8006ba8:	4605      	mov	r5, r0
 8006baa:	681c      	ldr	r4, [r3, #0]
 8006bac:	b124      	cbz	r4, 8006bb8 <putchar+0x14>
 8006bae:	69a3      	ldr	r3, [r4, #24]
 8006bb0:	b913      	cbnz	r3, 8006bb8 <putchar+0x14>
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f001 ffa0 	bl	8008af8 <__sinit>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4620      	mov	r0, r4
 8006bbc:	68a2      	ldr	r2, [r4, #8]
 8006bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc2:	f003 bc9b 	b.w	800a4fc <_putc_r>
 8006bc6:	bf00      	nop
 8006bc8:	20000010 	.word	0x20000010

08006bcc <_puts_r>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	460e      	mov	r6, r1
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	b118      	cbz	r0, 8006bdc <_puts_r+0x10>
 8006bd4:	6983      	ldr	r3, [r0, #24]
 8006bd6:	b90b      	cbnz	r3, 8006bdc <_puts_r+0x10>
 8006bd8:	f001 ff8e 	bl	8008af8 <__sinit>
 8006bdc:	69ab      	ldr	r3, [r5, #24]
 8006bde:	68ac      	ldr	r4, [r5, #8]
 8006be0:	b913      	cbnz	r3, 8006be8 <_puts_r+0x1c>
 8006be2:	4628      	mov	r0, r5
 8006be4:	f001 ff88 	bl	8008af8 <__sinit>
 8006be8:	4b2c      	ldr	r3, [pc, #176]	; (8006c9c <_puts_r+0xd0>)
 8006bea:	429c      	cmp	r4, r3
 8006bec:	d120      	bne.n	8006c30 <_puts_r+0x64>
 8006bee:	686c      	ldr	r4, [r5, #4]
 8006bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf2:	07db      	lsls	r3, r3, #31
 8006bf4:	d405      	bmi.n	8006c02 <_puts_r+0x36>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	0598      	lsls	r0, r3, #22
 8006bfa:	d402      	bmi.n	8006c02 <_puts_r+0x36>
 8006bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bfe:	f002 fb84 	bl	800930a <__retarget_lock_acquire_recursive>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	0719      	lsls	r1, r3, #28
 8006c06:	d51d      	bpl.n	8006c44 <_puts_r+0x78>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	b1db      	cbz	r3, 8006c44 <_puts_r+0x78>
 8006c0c:	3e01      	subs	r6, #1
 8006c0e:	68a3      	ldr	r3, [r4, #8]
 8006c10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c14:	3b01      	subs	r3, #1
 8006c16:	60a3      	str	r3, [r4, #8]
 8006c18:	bb39      	cbnz	r1, 8006c6a <_puts_r+0x9e>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da38      	bge.n	8006c90 <_puts_r+0xc4>
 8006c1e:	4622      	mov	r2, r4
 8006c20:	210a      	movs	r1, #10
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 ff16 	bl	8007a54 <__swbuf_r>
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d011      	beq.n	8006c50 <_puts_r+0x84>
 8006c2c:	250a      	movs	r5, #10
 8006c2e:	e011      	b.n	8006c54 <_puts_r+0x88>
 8006c30:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <_puts_r+0xd4>)
 8006c32:	429c      	cmp	r4, r3
 8006c34:	d101      	bne.n	8006c3a <_puts_r+0x6e>
 8006c36:	68ac      	ldr	r4, [r5, #8]
 8006c38:	e7da      	b.n	8006bf0 <_puts_r+0x24>
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <_puts_r+0xd8>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	bf08      	it	eq
 8006c40:	68ec      	ldreq	r4, [r5, #12]
 8006c42:	e7d5      	b.n	8006bf0 <_puts_r+0x24>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 ff56 	bl	8007af8 <__swsetup_r>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d0dd      	beq.n	8006c0c <_puts_r+0x40>
 8006c50:	f04f 35ff 	mov.w	r5, #4294967295
 8006c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c56:	07da      	lsls	r2, r3, #31
 8006c58:	d405      	bmi.n	8006c66 <_puts_r+0x9a>
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	059b      	lsls	r3, r3, #22
 8006c5e:	d402      	bmi.n	8006c66 <_puts_r+0x9a>
 8006c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c62:	f002 fb53 	bl	800930c <__retarget_lock_release_recursive>
 8006c66:	4628      	mov	r0, r5
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da04      	bge.n	8006c78 <_puts_r+0xac>
 8006c6e:	69a2      	ldr	r2, [r4, #24]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	dc06      	bgt.n	8006c82 <_puts_r+0xb6>
 8006c74:	290a      	cmp	r1, #10
 8006c76:	d004      	beq.n	8006c82 <_puts_r+0xb6>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	6022      	str	r2, [r4, #0]
 8006c7e:	7019      	strb	r1, [r3, #0]
 8006c80:	e7c5      	b.n	8006c0e <_puts_r+0x42>
 8006c82:	4622      	mov	r2, r4
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 fee5 	bl	8007a54 <__swbuf_r>
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d1bf      	bne.n	8006c0e <_puts_r+0x42>
 8006c8e:	e7df      	b.n	8006c50 <_puts_r+0x84>
 8006c90:	250a      	movs	r5, #10
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	6022      	str	r2, [r4, #0]
 8006c98:	701d      	strb	r5, [r3, #0]
 8006c9a:	e7db      	b.n	8006c54 <_puts_r+0x88>
 8006c9c:	0800ae64 	.word	0x0800ae64
 8006ca0:	0800ae84 	.word	0x0800ae84
 8006ca4:	0800ae44 	.word	0x0800ae44

08006ca8 <puts>:
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <puts+0xc>)
 8006caa:	4601      	mov	r1, r0
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	f7ff bf8d 	b.w	8006bcc <_puts_r>
 8006cb2:	bf00      	nop
 8006cb4:	20000010 	.word	0x20000010

08006cb8 <nanf>:
 8006cb8:	4800      	ldr	r0, [pc, #0]	; (8006cbc <nanf+0x4>)
 8006cba:	4770      	bx	lr
 8006cbc:	7fc00000 	.word	0x7fc00000

08006cc0 <siprintf>:
 8006cc0:	b40e      	push	{r1, r2, r3}
 8006cc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cc6:	b500      	push	{lr}
 8006cc8:	b09c      	sub	sp, #112	; 0x70
 8006cca:	ab1d      	add	r3, sp, #116	; 0x74
 8006ccc:	9002      	str	r0, [sp, #8]
 8006cce:	9006      	str	r0, [sp, #24]
 8006cd0:	9107      	str	r1, [sp, #28]
 8006cd2:	9104      	str	r1, [sp, #16]
 8006cd4:	4808      	ldr	r0, [pc, #32]	; (8006cf8 <siprintf+0x38>)
 8006cd6:	4909      	ldr	r1, [pc, #36]	; (8006cfc <siprintf+0x3c>)
 8006cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cdc:	9105      	str	r1, [sp, #20]
 8006cde:	6800      	ldr	r0, [r0, #0]
 8006ce0:	a902      	add	r1, sp, #8
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	f003 f9b2 	bl	800a04c <_svfiprintf_r>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	9b02      	ldr	r3, [sp, #8]
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	b01c      	add	sp, #112	; 0x70
 8006cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cf4:	b003      	add	sp, #12
 8006cf6:	4770      	bx	lr
 8006cf8:	20000010 	.word	0x20000010
 8006cfc:	ffff0208 	.word	0xffff0208

08006d00 <strncpy>:
 8006d00:	4603      	mov	r3, r0
 8006d02:	b510      	push	{r4, lr}
 8006d04:	3901      	subs	r1, #1
 8006d06:	b132      	cbz	r2, 8006d16 <strncpy+0x16>
 8006d08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d0c:	3a01      	subs	r2, #1
 8006d0e:	f803 4b01 	strb.w	r4, [r3], #1
 8006d12:	2c00      	cmp	r4, #0
 8006d14:	d1f7      	bne.n	8006d06 <strncpy+0x6>
 8006d16:	2100      	movs	r1, #0
 8006d18:	441a      	add	r2, r3
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d100      	bne.n	8006d20 <strncpy+0x20>
 8006d1e:	bd10      	pop	{r4, pc}
 8006d20:	f803 1b01 	strb.w	r1, [r3], #1
 8006d24:	e7f9      	b.n	8006d1a <strncpy+0x1a>

08006d26 <sulp>:
 8006d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	4690      	mov	r8, r2
 8006d2e:	f002 fef9 	bl	8009b24 <__ulp>
 8006d32:	4604      	mov	r4, r0
 8006d34:	460d      	mov	r5, r1
 8006d36:	f1b8 0f00 	cmp.w	r8, #0
 8006d3a:	d011      	beq.n	8006d60 <sulp+0x3a>
 8006d3c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	dd0b      	ble.n	8006d60 <sulp+0x3a>
 8006d48:	2400      	movs	r4, #0
 8006d4a:	051b      	lsls	r3, r3, #20
 8006d4c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d50:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d54:	4622      	mov	r2, r4
 8006d56:	462b      	mov	r3, r5
 8006d58:	f7f9 fbc8 	bl	80004ec <__aeabi_dmul>
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	460d      	mov	r5, r1
 8006d60:	4620      	mov	r0, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d68 <_strtod_l>:
 8006d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	469b      	mov	fp, r3
 8006d6e:	2300      	movs	r3, #0
 8006d70:	b09f      	sub	sp, #124	; 0x7c
 8006d72:	931a      	str	r3, [sp, #104]	; 0x68
 8006d74:	4b9e      	ldr	r3, [pc, #632]	; (8006ff0 <_strtod_l+0x288>)
 8006d76:	4682      	mov	sl, r0
 8006d78:	681f      	ldr	r7, [r3, #0]
 8006d7a:	460e      	mov	r6, r1
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	9215      	str	r2, [sp, #84]	; 0x54
 8006d80:	f7f9 f9f0 	bl	8000164 <strlen>
 8006d84:	f04f 0800 	mov.w	r8, #0
 8006d88:	4604      	mov	r4, r0
 8006d8a:	f04f 0900 	mov.w	r9, #0
 8006d8e:	9619      	str	r6, [sp, #100]	; 0x64
 8006d90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	2a2b      	cmp	r2, #43	; 0x2b
 8006d96:	d04c      	beq.n	8006e32 <_strtod_l+0xca>
 8006d98:	d83a      	bhi.n	8006e10 <_strtod_l+0xa8>
 8006d9a:	2a0d      	cmp	r2, #13
 8006d9c:	d833      	bhi.n	8006e06 <_strtod_l+0x9e>
 8006d9e:	2a08      	cmp	r2, #8
 8006da0:	d833      	bhi.n	8006e0a <_strtod_l+0xa2>
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	d03d      	beq.n	8006e22 <_strtod_l+0xba>
 8006da6:	2300      	movs	r3, #0
 8006da8:	930a      	str	r3, [sp, #40]	; 0x28
 8006daa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006dac:	782b      	ldrb	r3, [r5, #0]
 8006dae:	2b30      	cmp	r3, #48	; 0x30
 8006db0:	f040 80aa 	bne.w	8006f08 <_strtod_l+0x1a0>
 8006db4:	786b      	ldrb	r3, [r5, #1]
 8006db6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006dba:	2b58      	cmp	r3, #88	; 0x58
 8006dbc:	d166      	bne.n	8006e8c <_strtod_l+0x124>
 8006dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	ab1a      	add	r3, sp, #104	; 0x68
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	4a8a      	ldr	r2, [pc, #552]	; (8006ff4 <_strtod_l+0x28c>)
 8006dca:	f8cd b008 	str.w	fp, [sp, #8]
 8006dce:	ab1b      	add	r3, sp, #108	; 0x6c
 8006dd0:	a919      	add	r1, sp, #100	; 0x64
 8006dd2:	f001 ff97 	bl	8008d04 <__gethex>
 8006dd6:	f010 0607 	ands.w	r6, r0, #7
 8006dda:	4604      	mov	r4, r0
 8006ddc:	d005      	beq.n	8006dea <_strtod_l+0x82>
 8006dde:	2e06      	cmp	r6, #6
 8006de0:	d129      	bne.n	8006e36 <_strtod_l+0xce>
 8006de2:	2300      	movs	r3, #0
 8006de4:	3501      	adds	r5, #1
 8006de6:	9519      	str	r5, [sp, #100]	; 0x64
 8006de8:	930a      	str	r3, [sp, #40]	; 0x28
 8006dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 858a 	bne.w	8007906 <_strtod_l+0xb9e>
 8006df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df4:	b1d3      	cbz	r3, 8006e2c <_strtod_l+0xc4>
 8006df6:	4642      	mov	r2, r8
 8006df8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4619      	mov	r1, r3
 8006e00:	b01f      	add	sp, #124	; 0x7c
 8006e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e06:	2a20      	cmp	r2, #32
 8006e08:	d1cd      	bne.n	8006da6 <_strtod_l+0x3e>
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	9319      	str	r3, [sp, #100]	; 0x64
 8006e0e:	e7bf      	b.n	8006d90 <_strtod_l+0x28>
 8006e10:	2a2d      	cmp	r2, #45	; 0x2d
 8006e12:	d1c8      	bne.n	8006da6 <_strtod_l+0x3e>
 8006e14:	2201      	movs	r2, #1
 8006e16:	920a      	str	r2, [sp, #40]	; 0x28
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	9219      	str	r2, [sp, #100]	; 0x64
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1c3      	bne.n	8006daa <_strtod_l+0x42>
 8006e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e24:	9619      	str	r6, [sp, #100]	; 0x64
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 856b 	bne.w	8007902 <_strtod_l+0xb9a>
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	e7e4      	b.n	8006dfc <_strtod_l+0x94>
 8006e32:	2200      	movs	r2, #0
 8006e34:	e7ef      	b.n	8006e16 <_strtod_l+0xae>
 8006e36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e38:	b13a      	cbz	r2, 8006e4a <_strtod_l+0xe2>
 8006e3a:	2135      	movs	r1, #53	; 0x35
 8006e3c:	a81c      	add	r0, sp, #112	; 0x70
 8006e3e:	f002 ff75 	bl	8009d2c <__copybits>
 8006e42:	4650      	mov	r0, sl
 8006e44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e46:	f002 fb3d 	bl	80094c4 <_Bfree>
 8006e4a:	3e01      	subs	r6, #1
 8006e4c:	2e04      	cmp	r6, #4
 8006e4e:	d806      	bhi.n	8006e5e <_strtod_l+0xf6>
 8006e50:	e8df f006 	tbb	[pc, r6]
 8006e54:	1714030a 	.word	0x1714030a
 8006e58:	0a          	.byte	0x0a
 8006e59:	00          	.byte	0x00
 8006e5a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006e5e:	0721      	lsls	r1, r4, #28
 8006e60:	d5c3      	bpl.n	8006dea <_strtod_l+0x82>
 8006e62:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006e66:	e7c0      	b.n	8006dea <_strtod_l+0x82>
 8006e68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006e6a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006e6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e7a:	e7f0      	b.n	8006e5e <_strtod_l+0xf6>
 8006e7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006ff8 <_strtod_l+0x290>
 8006e80:	e7ed      	b.n	8006e5e <_strtod_l+0xf6>
 8006e82:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006e86:	f04f 38ff 	mov.w	r8, #4294967295
 8006e8a:	e7e8      	b.n	8006e5e <_strtod_l+0xf6>
 8006e8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	9219      	str	r2, [sp, #100]	; 0x64
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d0f9      	beq.n	8006e8c <_strtod_l+0x124>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0a6      	beq.n	8006dea <_strtod_l+0x82>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	9307      	str	r3, [sp, #28]
 8006ea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	9308      	str	r3, [sp, #32]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	469b      	mov	fp, r3
 8006eaa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006eae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006eb0:	7805      	ldrb	r5, [r0, #0]
 8006eb2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006eb6:	b2d9      	uxtb	r1, r3
 8006eb8:	2909      	cmp	r1, #9
 8006eba:	d927      	bls.n	8006f0c <_strtod_l+0x1a4>
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f003 fbbd 	bl	800a63e <strncmp>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d033      	beq.n	8006f30 <_strtod_l+0x1c8>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	462a      	mov	r2, r5
 8006ecc:	465c      	mov	r4, fp
 8006ece:	4603      	mov	r3, r0
 8006ed0:	9004      	str	r0, [sp, #16]
 8006ed2:	2a65      	cmp	r2, #101	; 0x65
 8006ed4:	d001      	beq.n	8006eda <_strtod_l+0x172>
 8006ed6:	2a45      	cmp	r2, #69	; 0x45
 8006ed8:	d114      	bne.n	8006f04 <_strtod_l+0x19c>
 8006eda:	b91c      	cbnz	r4, 8006ee4 <_strtod_l+0x17c>
 8006edc:	9a07      	ldr	r2, [sp, #28]
 8006ede:	4302      	orrs	r2, r0
 8006ee0:	d09f      	beq.n	8006e22 <_strtod_l+0xba>
 8006ee2:	2400      	movs	r4, #0
 8006ee4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006ee6:	1c72      	adds	r2, r6, #1
 8006ee8:	9219      	str	r2, [sp, #100]	; 0x64
 8006eea:	7872      	ldrb	r2, [r6, #1]
 8006eec:	2a2b      	cmp	r2, #43	; 0x2b
 8006eee:	d079      	beq.n	8006fe4 <_strtod_l+0x27c>
 8006ef0:	2a2d      	cmp	r2, #45	; 0x2d
 8006ef2:	f000 8083 	beq.w	8006ffc <_strtod_l+0x294>
 8006ef6:	2700      	movs	r7, #0
 8006ef8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006efc:	2909      	cmp	r1, #9
 8006efe:	f240 8083 	bls.w	8007008 <_strtod_l+0x2a0>
 8006f02:	9619      	str	r6, [sp, #100]	; 0x64
 8006f04:	2500      	movs	r5, #0
 8006f06:	e09f      	b.n	8007048 <_strtod_l+0x2e0>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e7c8      	b.n	8006e9e <_strtod_l+0x136>
 8006f0c:	f1bb 0f08 	cmp.w	fp, #8
 8006f10:	bfd5      	itete	le
 8006f12:	9906      	ldrle	r1, [sp, #24]
 8006f14:	9905      	ldrgt	r1, [sp, #20]
 8006f16:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f1a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f1e:	f100 0001 	add.w	r0, r0, #1
 8006f22:	bfd4      	ite	le
 8006f24:	9306      	strle	r3, [sp, #24]
 8006f26:	9305      	strgt	r3, [sp, #20]
 8006f28:	f10b 0b01 	add.w	fp, fp, #1
 8006f2c:	9019      	str	r0, [sp, #100]	; 0x64
 8006f2e:	e7be      	b.n	8006eae <_strtod_l+0x146>
 8006f30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f32:	191a      	adds	r2, r3, r4
 8006f34:	9219      	str	r2, [sp, #100]	; 0x64
 8006f36:	5d1a      	ldrb	r2, [r3, r4]
 8006f38:	f1bb 0f00 	cmp.w	fp, #0
 8006f3c:	d036      	beq.n	8006fac <_strtod_l+0x244>
 8006f3e:	465c      	mov	r4, fp
 8006f40:	9004      	str	r0, [sp, #16]
 8006f42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f46:	2b09      	cmp	r3, #9
 8006f48:	d912      	bls.n	8006f70 <_strtod_l+0x208>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e7c1      	b.n	8006ed2 <_strtod_l+0x16a>
 8006f4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f50:	3001      	adds	r0, #1
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	9219      	str	r2, [sp, #100]	; 0x64
 8006f56:	785a      	ldrb	r2, [r3, #1]
 8006f58:	2a30      	cmp	r2, #48	; 0x30
 8006f5a:	d0f8      	beq.n	8006f4e <_strtod_l+0x1e6>
 8006f5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	f200 84d5 	bhi.w	8007910 <_strtod_l+0xba8>
 8006f66:	9004      	str	r0, [sp, #16]
 8006f68:	2000      	movs	r0, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f6e:	9308      	str	r3, [sp, #32]
 8006f70:	3a30      	subs	r2, #48	; 0x30
 8006f72:	f100 0301 	add.w	r3, r0, #1
 8006f76:	d013      	beq.n	8006fa0 <_strtod_l+0x238>
 8006f78:	9904      	ldr	r1, [sp, #16]
 8006f7a:	1905      	adds	r5, r0, r4
 8006f7c:	4419      	add	r1, r3
 8006f7e:	9104      	str	r1, [sp, #16]
 8006f80:	4623      	mov	r3, r4
 8006f82:	210a      	movs	r1, #10
 8006f84:	42ab      	cmp	r3, r5
 8006f86:	d113      	bne.n	8006fb0 <_strtod_l+0x248>
 8006f88:	1823      	adds	r3, r4, r0
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	f104 0401 	add.w	r4, r4, #1
 8006f90:	4404      	add	r4, r0
 8006f92:	dc1b      	bgt.n	8006fcc <_strtod_l+0x264>
 8006f94:	230a      	movs	r3, #10
 8006f96:	9906      	ldr	r1, [sp, #24]
 8006f98:	fb03 2301 	mla	r3, r3, r1, r2
 8006f9c:	9306      	str	r3, [sp, #24]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	1c51      	adds	r1, r2, #1
 8006fa6:	9119      	str	r1, [sp, #100]	; 0x64
 8006fa8:	7852      	ldrb	r2, [r2, #1]
 8006faa:	e7ca      	b.n	8006f42 <_strtod_l+0x1da>
 8006fac:	4658      	mov	r0, fp
 8006fae:	e7d3      	b.n	8006f58 <_strtod_l+0x1f0>
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	dc04      	bgt.n	8006fbe <_strtod_l+0x256>
 8006fb4:	9f06      	ldr	r7, [sp, #24]
 8006fb6:	434f      	muls	r7, r1
 8006fb8:	9706      	str	r7, [sp, #24]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	e7e2      	b.n	8006f84 <_strtod_l+0x21c>
 8006fbe:	1c5f      	adds	r7, r3, #1
 8006fc0:	2f10      	cmp	r7, #16
 8006fc2:	bfde      	ittt	le
 8006fc4:	9f05      	ldrle	r7, [sp, #20]
 8006fc6:	434f      	mulle	r7, r1
 8006fc8:	9705      	strle	r7, [sp, #20]
 8006fca:	e7f6      	b.n	8006fba <_strtod_l+0x252>
 8006fcc:	2c10      	cmp	r4, #16
 8006fce:	bfdf      	itttt	le
 8006fd0:	230a      	movle	r3, #10
 8006fd2:	9905      	ldrle	r1, [sp, #20]
 8006fd4:	fb03 2301 	mlale	r3, r3, r1, r2
 8006fd8:	9305      	strle	r3, [sp, #20]
 8006fda:	e7e0      	b.n	8006f9e <_strtod_l+0x236>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9304      	str	r3, [sp, #16]
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e77b      	b.n	8006edc <_strtod_l+0x174>
 8006fe4:	2700      	movs	r7, #0
 8006fe6:	1cb2      	adds	r2, r6, #2
 8006fe8:	9219      	str	r2, [sp, #100]	; 0x64
 8006fea:	78b2      	ldrb	r2, [r6, #2]
 8006fec:	e784      	b.n	8006ef8 <_strtod_l+0x190>
 8006fee:	bf00      	nop
 8006ff0:	0800af0c 	.word	0x0800af0c
 8006ff4:	0800ac60 	.word	0x0800ac60
 8006ff8:	7ff00000 	.word	0x7ff00000
 8006ffc:	2701      	movs	r7, #1
 8006ffe:	e7f2      	b.n	8006fe6 <_strtod_l+0x27e>
 8007000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007002:	1c51      	adds	r1, r2, #1
 8007004:	9119      	str	r1, [sp, #100]	; 0x64
 8007006:	7852      	ldrb	r2, [r2, #1]
 8007008:	2a30      	cmp	r2, #48	; 0x30
 800700a:	d0f9      	beq.n	8007000 <_strtod_l+0x298>
 800700c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007010:	2908      	cmp	r1, #8
 8007012:	f63f af77 	bhi.w	8006f04 <_strtod_l+0x19c>
 8007016:	f04f 0e0a 	mov.w	lr, #10
 800701a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800701e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007020:	9209      	str	r2, [sp, #36]	; 0x24
 8007022:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007024:	1c51      	adds	r1, r2, #1
 8007026:	9119      	str	r1, [sp, #100]	; 0x64
 8007028:	7852      	ldrb	r2, [r2, #1]
 800702a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800702e:	2d09      	cmp	r5, #9
 8007030:	d935      	bls.n	800709e <_strtod_l+0x336>
 8007032:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007034:	1b49      	subs	r1, r1, r5
 8007036:	2908      	cmp	r1, #8
 8007038:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800703c:	dc02      	bgt.n	8007044 <_strtod_l+0x2dc>
 800703e:	4565      	cmp	r5, ip
 8007040:	bfa8      	it	ge
 8007042:	4665      	movge	r5, ip
 8007044:	b107      	cbz	r7, 8007048 <_strtod_l+0x2e0>
 8007046:	426d      	negs	r5, r5
 8007048:	2c00      	cmp	r4, #0
 800704a:	d14c      	bne.n	80070e6 <_strtod_l+0x37e>
 800704c:	9907      	ldr	r1, [sp, #28]
 800704e:	4301      	orrs	r1, r0
 8007050:	f47f aecb 	bne.w	8006dea <_strtod_l+0x82>
 8007054:	2b00      	cmp	r3, #0
 8007056:	f47f aee4 	bne.w	8006e22 <_strtod_l+0xba>
 800705a:	2a69      	cmp	r2, #105	; 0x69
 800705c:	d026      	beq.n	80070ac <_strtod_l+0x344>
 800705e:	dc23      	bgt.n	80070a8 <_strtod_l+0x340>
 8007060:	2a49      	cmp	r2, #73	; 0x49
 8007062:	d023      	beq.n	80070ac <_strtod_l+0x344>
 8007064:	2a4e      	cmp	r2, #78	; 0x4e
 8007066:	f47f aedc 	bne.w	8006e22 <_strtod_l+0xba>
 800706a:	499d      	ldr	r1, [pc, #628]	; (80072e0 <_strtod_l+0x578>)
 800706c:	a819      	add	r0, sp, #100	; 0x64
 800706e:	f002 f897 	bl	80091a0 <__match>
 8007072:	2800      	cmp	r0, #0
 8007074:	f43f aed5 	beq.w	8006e22 <_strtod_l+0xba>
 8007078:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b28      	cmp	r3, #40	; 0x28
 800707e:	d12c      	bne.n	80070da <_strtod_l+0x372>
 8007080:	4998      	ldr	r1, [pc, #608]	; (80072e4 <_strtod_l+0x57c>)
 8007082:	aa1c      	add	r2, sp, #112	; 0x70
 8007084:	a819      	add	r0, sp, #100	; 0x64
 8007086:	f002 f89f 	bl	80091c8 <__hexnan>
 800708a:	2805      	cmp	r0, #5
 800708c:	d125      	bne.n	80070da <_strtod_l+0x372>
 800708e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007090:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007094:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007098:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800709c:	e6a5      	b.n	8006dea <_strtod_l+0x82>
 800709e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80070a2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80070a6:	e7bc      	b.n	8007022 <_strtod_l+0x2ba>
 80070a8:	2a6e      	cmp	r2, #110	; 0x6e
 80070aa:	e7dc      	b.n	8007066 <_strtod_l+0x2fe>
 80070ac:	498e      	ldr	r1, [pc, #568]	; (80072e8 <_strtod_l+0x580>)
 80070ae:	a819      	add	r0, sp, #100	; 0x64
 80070b0:	f002 f876 	bl	80091a0 <__match>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f43f aeb4 	beq.w	8006e22 <_strtod_l+0xba>
 80070ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070bc:	498b      	ldr	r1, [pc, #556]	; (80072ec <_strtod_l+0x584>)
 80070be:	3b01      	subs	r3, #1
 80070c0:	a819      	add	r0, sp, #100	; 0x64
 80070c2:	9319      	str	r3, [sp, #100]	; 0x64
 80070c4:	f002 f86c 	bl	80091a0 <__match>
 80070c8:	b910      	cbnz	r0, 80070d0 <_strtod_l+0x368>
 80070ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070cc:	3301      	adds	r3, #1
 80070ce:	9319      	str	r3, [sp, #100]	; 0x64
 80070d0:	f04f 0800 	mov.w	r8, #0
 80070d4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80072f0 <_strtod_l+0x588>
 80070d8:	e687      	b.n	8006dea <_strtod_l+0x82>
 80070da:	4886      	ldr	r0, [pc, #536]	; (80072f4 <_strtod_l+0x58c>)
 80070dc:	f003 fa56 	bl	800a58c <nan>
 80070e0:	4680      	mov	r8, r0
 80070e2:	4689      	mov	r9, r1
 80070e4:	e681      	b.n	8006dea <_strtod_l+0x82>
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	f1bb 0f00 	cmp.w	fp, #0
 80070ec:	bf08      	it	eq
 80070ee:	46a3      	moveq	fp, r4
 80070f0:	1aeb      	subs	r3, r5, r3
 80070f2:	2c10      	cmp	r4, #16
 80070f4:	9806      	ldr	r0, [sp, #24]
 80070f6:	4626      	mov	r6, r4
 80070f8:	9307      	str	r3, [sp, #28]
 80070fa:	bfa8      	it	ge
 80070fc:	2610      	movge	r6, #16
 80070fe:	f7f9 f97b 	bl	80003f8 <__aeabi_ui2d>
 8007102:	2c09      	cmp	r4, #9
 8007104:	4680      	mov	r8, r0
 8007106:	4689      	mov	r9, r1
 8007108:	dd13      	ble.n	8007132 <_strtod_l+0x3ca>
 800710a:	4b7b      	ldr	r3, [pc, #492]	; (80072f8 <_strtod_l+0x590>)
 800710c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007110:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007114:	f7f9 f9ea 	bl	80004ec <__aeabi_dmul>
 8007118:	4680      	mov	r8, r0
 800711a:	9805      	ldr	r0, [sp, #20]
 800711c:	4689      	mov	r9, r1
 800711e:	f7f9 f96b 	bl	80003f8 <__aeabi_ui2d>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f7f9 f829 	bl	8000180 <__adddf3>
 800712e:	4680      	mov	r8, r0
 8007130:	4689      	mov	r9, r1
 8007132:	2c0f      	cmp	r4, #15
 8007134:	dc36      	bgt.n	80071a4 <_strtod_l+0x43c>
 8007136:	9b07      	ldr	r3, [sp, #28]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f43f ae56 	beq.w	8006dea <_strtod_l+0x82>
 800713e:	dd22      	ble.n	8007186 <_strtod_l+0x41e>
 8007140:	2b16      	cmp	r3, #22
 8007142:	dc09      	bgt.n	8007158 <_strtod_l+0x3f0>
 8007144:	496c      	ldr	r1, [pc, #432]	; (80072f8 <_strtod_l+0x590>)
 8007146:	4642      	mov	r2, r8
 8007148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800714c:	464b      	mov	r3, r9
 800714e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007152:	f7f9 f9cb 	bl	80004ec <__aeabi_dmul>
 8007156:	e7c3      	b.n	80070e0 <_strtod_l+0x378>
 8007158:	9a07      	ldr	r2, [sp, #28]
 800715a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800715e:	4293      	cmp	r3, r2
 8007160:	db20      	blt.n	80071a4 <_strtod_l+0x43c>
 8007162:	4d65      	ldr	r5, [pc, #404]	; (80072f8 <_strtod_l+0x590>)
 8007164:	f1c4 040f 	rsb	r4, r4, #15
 8007168:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800716c:	4642      	mov	r2, r8
 800716e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007172:	464b      	mov	r3, r9
 8007174:	f7f9 f9ba 	bl	80004ec <__aeabi_dmul>
 8007178:	9b07      	ldr	r3, [sp, #28]
 800717a:	1b1c      	subs	r4, r3, r4
 800717c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007180:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007184:	e7e5      	b.n	8007152 <_strtod_l+0x3ea>
 8007186:	9b07      	ldr	r3, [sp, #28]
 8007188:	3316      	adds	r3, #22
 800718a:	db0b      	blt.n	80071a4 <_strtod_l+0x43c>
 800718c:	9b04      	ldr	r3, [sp, #16]
 800718e:	4640      	mov	r0, r8
 8007190:	1b5d      	subs	r5, r3, r5
 8007192:	4b59      	ldr	r3, [pc, #356]	; (80072f8 <_strtod_l+0x590>)
 8007194:	4649      	mov	r1, r9
 8007196:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800719a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800719e:	f7f9 facf 	bl	8000740 <__aeabi_ddiv>
 80071a2:	e79d      	b.n	80070e0 <_strtod_l+0x378>
 80071a4:	9b07      	ldr	r3, [sp, #28]
 80071a6:	1ba6      	subs	r6, r4, r6
 80071a8:	441e      	add	r6, r3
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	dd74      	ble.n	8007298 <_strtod_l+0x530>
 80071ae:	f016 030f 	ands.w	r3, r6, #15
 80071b2:	d00a      	beq.n	80071ca <_strtod_l+0x462>
 80071b4:	4950      	ldr	r1, [pc, #320]	; (80072f8 <_strtod_l+0x590>)
 80071b6:	4642      	mov	r2, r8
 80071b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071c0:	464b      	mov	r3, r9
 80071c2:	f7f9 f993 	bl	80004ec <__aeabi_dmul>
 80071c6:	4680      	mov	r8, r0
 80071c8:	4689      	mov	r9, r1
 80071ca:	f036 060f 	bics.w	r6, r6, #15
 80071ce:	d052      	beq.n	8007276 <_strtod_l+0x50e>
 80071d0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80071d4:	dd27      	ble.n	8007226 <_strtod_l+0x4be>
 80071d6:	f04f 0b00 	mov.w	fp, #0
 80071da:	f8cd b010 	str.w	fp, [sp, #16]
 80071de:	f8cd b020 	str.w	fp, [sp, #32]
 80071e2:	f8cd b018 	str.w	fp, [sp, #24]
 80071e6:	2322      	movs	r3, #34	; 0x22
 80071e8:	f04f 0800 	mov.w	r8, #0
 80071ec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80072f0 <_strtod_l+0x588>
 80071f0:	f8ca 3000 	str.w	r3, [sl]
 80071f4:	9b08      	ldr	r3, [sp, #32]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f43f adf7 	beq.w	8006dea <_strtod_l+0x82>
 80071fc:	4650      	mov	r0, sl
 80071fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007200:	f002 f960 	bl	80094c4 <_Bfree>
 8007204:	4650      	mov	r0, sl
 8007206:	9906      	ldr	r1, [sp, #24]
 8007208:	f002 f95c 	bl	80094c4 <_Bfree>
 800720c:	4650      	mov	r0, sl
 800720e:	9904      	ldr	r1, [sp, #16]
 8007210:	f002 f958 	bl	80094c4 <_Bfree>
 8007214:	4650      	mov	r0, sl
 8007216:	9908      	ldr	r1, [sp, #32]
 8007218:	f002 f954 	bl	80094c4 <_Bfree>
 800721c:	4659      	mov	r1, fp
 800721e:	4650      	mov	r0, sl
 8007220:	f002 f950 	bl	80094c4 <_Bfree>
 8007224:	e5e1      	b.n	8006dea <_strtod_l+0x82>
 8007226:	4b35      	ldr	r3, [pc, #212]	; (80072fc <_strtod_l+0x594>)
 8007228:	4640      	mov	r0, r8
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	2300      	movs	r3, #0
 800722e:	4649      	mov	r1, r9
 8007230:	461f      	mov	r7, r3
 8007232:	1136      	asrs	r6, r6, #4
 8007234:	2e01      	cmp	r6, #1
 8007236:	dc21      	bgt.n	800727c <_strtod_l+0x514>
 8007238:	b10b      	cbz	r3, 800723e <_strtod_l+0x4d6>
 800723a:	4680      	mov	r8, r0
 800723c:	4689      	mov	r9, r1
 800723e:	4b2f      	ldr	r3, [pc, #188]	; (80072fc <_strtod_l+0x594>)
 8007240:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007244:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007248:	4642      	mov	r2, r8
 800724a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800724e:	464b      	mov	r3, r9
 8007250:	f7f9 f94c 	bl	80004ec <__aeabi_dmul>
 8007254:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <_strtod_l+0x588>)
 8007256:	460a      	mov	r2, r1
 8007258:	400b      	ands	r3, r1
 800725a:	4929      	ldr	r1, [pc, #164]	; (8007300 <_strtod_l+0x598>)
 800725c:	4680      	mov	r8, r0
 800725e:	428b      	cmp	r3, r1
 8007260:	d8b9      	bhi.n	80071d6 <_strtod_l+0x46e>
 8007262:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007266:	428b      	cmp	r3, r1
 8007268:	bf86      	itte	hi
 800726a:	f04f 38ff 	movhi.w	r8, #4294967295
 800726e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007304 <_strtod_l+0x59c>
 8007272:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007276:	2300      	movs	r3, #0
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	e07f      	b.n	800737c <_strtod_l+0x614>
 800727c:	07f2      	lsls	r2, r6, #31
 800727e:	d505      	bpl.n	800728c <_strtod_l+0x524>
 8007280:	9b05      	ldr	r3, [sp, #20]
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f9 f931 	bl	80004ec <__aeabi_dmul>
 800728a:	2301      	movs	r3, #1
 800728c:	9a05      	ldr	r2, [sp, #20]
 800728e:	3701      	adds	r7, #1
 8007290:	3208      	adds	r2, #8
 8007292:	1076      	asrs	r6, r6, #1
 8007294:	9205      	str	r2, [sp, #20]
 8007296:	e7cd      	b.n	8007234 <_strtod_l+0x4cc>
 8007298:	d0ed      	beq.n	8007276 <_strtod_l+0x50e>
 800729a:	4276      	negs	r6, r6
 800729c:	f016 020f 	ands.w	r2, r6, #15
 80072a0:	d00a      	beq.n	80072b8 <_strtod_l+0x550>
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <_strtod_l+0x590>)
 80072a4:	4640      	mov	r0, r8
 80072a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072aa:	4649      	mov	r1, r9
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f7f9 fa46 	bl	8000740 <__aeabi_ddiv>
 80072b4:	4680      	mov	r8, r0
 80072b6:	4689      	mov	r9, r1
 80072b8:	1136      	asrs	r6, r6, #4
 80072ba:	d0dc      	beq.n	8007276 <_strtod_l+0x50e>
 80072bc:	2e1f      	cmp	r6, #31
 80072be:	dd23      	ble.n	8007308 <_strtod_l+0x5a0>
 80072c0:	f04f 0b00 	mov.w	fp, #0
 80072c4:	f8cd b010 	str.w	fp, [sp, #16]
 80072c8:	f8cd b020 	str.w	fp, [sp, #32]
 80072cc:	f8cd b018 	str.w	fp, [sp, #24]
 80072d0:	2322      	movs	r3, #34	; 0x22
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	f04f 0900 	mov.w	r9, #0
 80072da:	f8ca 3000 	str.w	r3, [sl]
 80072de:	e789      	b.n	80071f4 <_strtod_l+0x48c>
 80072e0:	0800ac31 	.word	0x0800ac31
 80072e4:	0800ac74 	.word	0x0800ac74
 80072e8:	0800ac29 	.word	0x0800ac29
 80072ec:	0800adb4 	.word	0x0800adb4
 80072f0:	7ff00000 	.word	0x7ff00000
 80072f4:	0800b0c8 	.word	0x0800b0c8
 80072f8:	0800afa8 	.word	0x0800afa8
 80072fc:	0800af80 	.word	0x0800af80
 8007300:	7ca00000 	.word	0x7ca00000
 8007304:	7fefffff 	.word	0x7fefffff
 8007308:	f016 0310 	ands.w	r3, r6, #16
 800730c:	bf18      	it	ne
 800730e:	236a      	movne	r3, #106	; 0x6a
 8007310:	4640      	mov	r0, r8
 8007312:	9305      	str	r3, [sp, #20]
 8007314:	4649      	mov	r1, r9
 8007316:	2300      	movs	r3, #0
 8007318:	4fb0      	ldr	r7, [pc, #704]	; (80075dc <_strtod_l+0x874>)
 800731a:	07f2      	lsls	r2, r6, #31
 800731c:	d504      	bpl.n	8007328 <_strtod_l+0x5c0>
 800731e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007322:	f7f9 f8e3 	bl	80004ec <__aeabi_dmul>
 8007326:	2301      	movs	r3, #1
 8007328:	1076      	asrs	r6, r6, #1
 800732a:	f107 0708 	add.w	r7, r7, #8
 800732e:	d1f4      	bne.n	800731a <_strtod_l+0x5b2>
 8007330:	b10b      	cbz	r3, 8007336 <_strtod_l+0x5ce>
 8007332:	4680      	mov	r8, r0
 8007334:	4689      	mov	r9, r1
 8007336:	9b05      	ldr	r3, [sp, #20]
 8007338:	b1c3      	cbz	r3, 800736c <_strtod_l+0x604>
 800733a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800733e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007342:	2b00      	cmp	r3, #0
 8007344:	4649      	mov	r1, r9
 8007346:	dd11      	ble.n	800736c <_strtod_l+0x604>
 8007348:	2b1f      	cmp	r3, #31
 800734a:	f340 8127 	ble.w	800759c <_strtod_l+0x834>
 800734e:	2b34      	cmp	r3, #52	; 0x34
 8007350:	bfd8      	it	le
 8007352:	f04f 33ff 	movle.w	r3, #4294967295
 8007356:	f04f 0800 	mov.w	r8, #0
 800735a:	bfcf      	iteee	gt
 800735c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007360:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007364:	fa03 f202 	lslle.w	r2, r3, r2
 8007368:	ea02 0901 	andle.w	r9, r2, r1
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	f7f9 fb22 	bl	80009bc <__aeabi_dcmpeq>
 8007378:	2800      	cmp	r0, #0
 800737a:	d1a1      	bne.n	80072c0 <_strtod_l+0x558>
 800737c:	9b06      	ldr	r3, [sp, #24]
 800737e:	465a      	mov	r2, fp
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4650      	mov	r0, sl
 8007384:	4623      	mov	r3, r4
 8007386:	9908      	ldr	r1, [sp, #32]
 8007388:	f002 f904 	bl	8009594 <__s2b>
 800738c:	9008      	str	r0, [sp, #32]
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f af21 	beq.w	80071d6 <_strtod_l+0x46e>
 8007394:	9b04      	ldr	r3, [sp, #16]
 8007396:	f04f 0b00 	mov.w	fp, #0
 800739a:	1b5d      	subs	r5, r3, r5
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	f8cd b010 	str.w	fp, [sp, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bfb4      	ite	lt
 80073a6:	462b      	movlt	r3, r5
 80073a8:	2300      	movge	r3, #0
 80073aa:	930e      	str	r3, [sp, #56]	; 0x38
 80073ac:	9b07      	ldr	r3, [sp, #28]
 80073ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073b2:	9314      	str	r3, [sp, #80]	; 0x50
 80073b4:	9b08      	ldr	r3, [sp, #32]
 80073b6:	4650      	mov	r0, sl
 80073b8:	6859      	ldr	r1, [r3, #4]
 80073ba:	f002 f843 	bl	8009444 <_Balloc>
 80073be:	9006      	str	r0, [sp, #24]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f43f af10 	beq.w	80071e6 <_strtod_l+0x47e>
 80073c6:	9b08      	ldr	r3, [sp, #32]
 80073c8:	300c      	adds	r0, #12
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	f103 010c 	add.w	r1, r3, #12
 80073d0:	3202      	adds	r2, #2
 80073d2:	0092      	lsls	r2, r2, #2
 80073d4:	f002 f828 	bl	8009428 <memcpy>
 80073d8:	ab1c      	add	r3, sp, #112	; 0x70
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	ab1b      	add	r3, sp, #108	; 0x6c
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	4650      	mov	r0, sl
 80073e6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80073ea:	f002 fc15 	bl	8009c18 <__d2b>
 80073ee:	901a      	str	r0, [sp, #104]	; 0x68
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f43f aef8 	beq.w	80071e6 <_strtod_l+0x47e>
 80073f6:	2101      	movs	r1, #1
 80073f8:	4650      	mov	r0, sl
 80073fa:	f002 f963 	bl	80096c4 <__i2b>
 80073fe:	4603      	mov	r3, r0
 8007400:	9004      	str	r0, [sp, #16]
 8007402:	2800      	cmp	r0, #0
 8007404:	f43f aeef 	beq.w	80071e6 <_strtod_l+0x47e>
 8007408:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800740a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800740c:	2d00      	cmp	r5, #0
 800740e:	bfab      	itete	ge
 8007410:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007412:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007414:	18ee      	addge	r6, r5, r3
 8007416:	1b5c      	sublt	r4, r3, r5
 8007418:	9b05      	ldr	r3, [sp, #20]
 800741a:	bfa8      	it	ge
 800741c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800741e:	eba5 0503 	sub.w	r5, r5, r3
 8007422:	4415      	add	r5, r2
 8007424:	4b6e      	ldr	r3, [pc, #440]	; (80075e0 <_strtod_l+0x878>)
 8007426:	f105 35ff 	add.w	r5, r5, #4294967295
 800742a:	bfb8      	it	lt
 800742c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800742e:	429d      	cmp	r5, r3
 8007430:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007434:	f280 80c4 	bge.w	80075c0 <_strtod_l+0x858>
 8007438:	1b5b      	subs	r3, r3, r5
 800743a:	2b1f      	cmp	r3, #31
 800743c:	f04f 0701 	mov.w	r7, #1
 8007440:	eba2 0203 	sub.w	r2, r2, r3
 8007444:	f300 80b1 	bgt.w	80075aa <_strtod_l+0x842>
 8007448:	2500      	movs	r5, #0
 800744a:	fa07 f303 	lsl.w	r3, r7, r3
 800744e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007450:	18b7      	adds	r7, r6, r2
 8007452:	9b05      	ldr	r3, [sp, #20]
 8007454:	42be      	cmp	r6, r7
 8007456:	4414      	add	r4, r2
 8007458:	441c      	add	r4, r3
 800745a:	4633      	mov	r3, r6
 800745c:	bfa8      	it	ge
 800745e:	463b      	movge	r3, r7
 8007460:	42a3      	cmp	r3, r4
 8007462:	bfa8      	it	ge
 8007464:	4623      	movge	r3, r4
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfc2      	ittt	gt
 800746a:	1aff      	subgt	r7, r7, r3
 800746c:	1ae4      	subgt	r4, r4, r3
 800746e:	1af6      	subgt	r6, r6, r3
 8007470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007472:	2b00      	cmp	r3, #0
 8007474:	dd17      	ble.n	80074a6 <_strtod_l+0x73e>
 8007476:	461a      	mov	r2, r3
 8007478:	4650      	mov	r0, sl
 800747a:	9904      	ldr	r1, [sp, #16]
 800747c:	f002 f9e0 	bl	8009840 <__pow5mult>
 8007480:	9004      	str	r0, [sp, #16]
 8007482:	2800      	cmp	r0, #0
 8007484:	f43f aeaf 	beq.w	80071e6 <_strtod_l+0x47e>
 8007488:	4601      	mov	r1, r0
 800748a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800748c:	4650      	mov	r0, sl
 800748e:	f002 f92f 	bl	80096f0 <__multiply>
 8007492:	9009      	str	r0, [sp, #36]	; 0x24
 8007494:	2800      	cmp	r0, #0
 8007496:	f43f aea6 	beq.w	80071e6 <_strtod_l+0x47e>
 800749a:	4650      	mov	r0, sl
 800749c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800749e:	f002 f811 	bl	80094c4 <_Bfree>
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	931a      	str	r3, [sp, #104]	; 0x68
 80074a6:	2f00      	cmp	r7, #0
 80074a8:	f300 808e 	bgt.w	80075c8 <_strtod_l+0x860>
 80074ac:	9b07      	ldr	r3, [sp, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dd08      	ble.n	80074c4 <_strtod_l+0x75c>
 80074b2:	4650      	mov	r0, sl
 80074b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074b6:	9906      	ldr	r1, [sp, #24]
 80074b8:	f002 f9c2 	bl	8009840 <__pow5mult>
 80074bc:	9006      	str	r0, [sp, #24]
 80074be:	2800      	cmp	r0, #0
 80074c0:	f43f ae91 	beq.w	80071e6 <_strtod_l+0x47e>
 80074c4:	2c00      	cmp	r4, #0
 80074c6:	dd08      	ble.n	80074da <_strtod_l+0x772>
 80074c8:	4622      	mov	r2, r4
 80074ca:	4650      	mov	r0, sl
 80074cc:	9906      	ldr	r1, [sp, #24]
 80074ce:	f002 fa11 	bl	80098f4 <__lshift>
 80074d2:	9006      	str	r0, [sp, #24]
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f43f ae86 	beq.w	80071e6 <_strtod_l+0x47e>
 80074da:	2e00      	cmp	r6, #0
 80074dc:	dd08      	ble.n	80074f0 <_strtod_l+0x788>
 80074de:	4632      	mov	r2, r6
 80074e0:	4650      	mov	r0, sl
 80074e2:	9904      	ldr	r1, [sp, #16]
 80074e4:	f002 fa06 	bl	80098f4 <__lshift>
 80074e8:	9004      	str	r0, [sp, #16]
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f ae7b 	beq.w	80071e6 <_strtod_l+0x47e>
 80074f0:	4650      	mov	r0, sl
 80074f2:	9a06      	ldr	r2, [sp, #24]
 80074f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074f6:	f002 fa89 	bl	8009a0c <__mdiff>
 80074fa:	4683      	mov	fp, r0
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f43f ae72 	beq.w	80071e6 <_strtod_l+0x47e>
 8007502:	2400      	movs	r4, #0
 8007504:	68c3      	ldr	r3, [r0, #12]
 8007506:	9904      	ldr	r1, [sp, #16]
 8007508:	60c4      	str	r4, [r0, #12]
 800750a:	930b      	str	r3, [sp, #44]	; 0x2c
 800750c:	f002 fa62 	bl	80099d4 <__mcmp>
 8007510:	42a0      	cmp	r0, r4
 8007512:	da6b      	bge.n	80075ec <_strtod_l+0x884>
 8007514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007516:	ea53 0308 	orrs.w	r3, r3, r8
 800751a:	f040 8091 	bne.w	8007640 <_strtod_l+0x8d8>
 800751e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 808c 	bne.w	8007640 <_strtod_l+0x8d8>
 8007528:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800752c:	0d1b      	lsrs	r3, r3, #20
 800752e:	051b      	lsls	r3, r3, #20
 8007530:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007534:	f240 8084 	bls.w	8007640 <_strtod_l+0x8d8>
 8007538:	f8db 3014 	ldr.w	r3, [fp, #20]
 800753c:	b91b      	cbnz	r3, 8007546 <_strtod_l+0x7de>
 800753e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007542:	2b01      	cmp	r3, #1
 8007544:	dd7c      	ble.n	8007640 <_strtod_l+0x8d8>
 8007546:	4659      	mov	r1, fp
 8007548:	2201      	movs	r2, #1
 800754a:	4650      	mov	r0, sl
 800754c:	f002 f9d2 	bl	80098f4 <__lshift>
 8007550:	9904      	ldr	r1, [sp, #16]
 8007552:	4683      	mov	fp, r0
 8007554:	f002 fa3e 	bl	80099d4 <__mcmp>
 8007558:	2800      	cmp	r0, #0
 800755a:	dd71      	ble.n	8007640 <_strtod_l+0x8d8>
 800755c:	9905      	ldr	r1, [sp, #20]
 800755e:	464b      	mov	r3, r9
 8007560:	4a20      	ldr	r2, [pc, #128]	; (80075e4 <_strtod_l+0x87c>)
 8007562:	2900      	cmp	r1, #0
 8007564:	f000 808c 	beq.w	8007680 <_strtod_l+0x918>
 8007568:	ea02 0109 	and.w	r1, r2, r9
 800756c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007570:	f300 8086 	bgt.w	8007680 <_strtod_l+0x918>
 8007574:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007578:	f77f aeaa 	ble.w	80072d0 <_strtod_l+0x568>
 800757c:	4640      	mov	r0, r8
 800757e:	4649      	mov	r1, r9
 8007580:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <_strtod_l+0x880>)
 8007582:	2200      	movs	r2, #0
 8007584:	f7f8 ffb2 	bl	80004ec <__aeabi_dmul>
 8007588:	460b      	mov	r3, r1
 800758a:	4303      	orrs	r3, r0
 800758c:	bf08      	it	eq
 800758e:	2322      	moveq	r3, #34	; 0x22
 8007590:	4680      	mov	r8, r0
 8007592:	4689      	mov	r9, r1
 8007594:	bf08      	it	eq
 8007596:	f8ca 3000 	streq.w	r3, [sl]
 800759a:	e62f      	b.n	80071fc <_strtod_l+0x494>
 800759c:	f04f 32ff 	mov.w	r2, #4294967295
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	ea03 0808 	and.w	r8, r3, r8
 80075a8:	e6e0      	b.n	800736c <_strtod_l+0x604>
 80075aa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80075ae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80075b2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80075b6:	35e2      	adds	r5, #226	; 0xe2
 80075b8:	fa07 f505 	lsl.w	r5, r7, r5
 80075bc:	970f      	str	r7, [sp, #60]	; 0x3c
 80075be:	e747      	b.n	8007450 <_strtod_l+0x6e8>
 80075c0:	2301      	movs	r3, #1
 80075c2:	2500      	movs	r5, #0
 80075c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80075c6:	e743      	b.n	8007450 <_strtod_l+0x6e8>
 80075c8:	463a      	mov	r2, r7
 80075ca:	4650      	mov	r0, sl
 80075cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075ce:	f002 f991 	bl	80098f4 <__lshift>
 80075d2:	901a      	str	r0, [sp, #104]	; 0x68
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f47f af69 	bne.w	80074ac <_strtod_l+0x744>
 80075da:	e604      	b.n	80071e6 <_strtod_l+0x47e>
 80075dc:	0800ac88 	.word	0x0800ac88
 80075e0:	fffffc02 	.word	0xfffffc02
 80075e4:	7ff00000 	.word	0x7ff00000
 80075e8:	39500000 	.word	0x39500000
 80075ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80075f0:	d165      	bne.n	80076be <_strtod_l+0x956>
 80075f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075f8:	b35a      	cbz	r2, 8007652 <_strtod_l+0x8ea>
 80075fa:	4a99      	ldr	r2, [pc, #612]	; (8007860 <_strtod_l+0xaf8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d12b      	bne.n	8007658 <_strtod_l+0x8f0>
 8007600:	9b05      	ldr	r3, [sp, #20]
 8007602:	4641      	mov	r1, r8
 8007604:	b303      	cbz	r3, 8007648 <_strtod_l+0x8e0>
 8007606:	464a      	mov	r2, r9
 8007608:	4b96      	ldr	r3, [pc, #600]	; (8007864 <_strtod_l+0xafc>)
 800760a:	4013      	ands	r3, r2
 800760c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007610:	f04f 32ff 	mov.w	r2, #4294967295
 8007614:	d81b      	bhi.n	800764e <_strtod_l+0x8e6>
 8007616:	0d1b      	lsrs	r3, r3, #20
 8007618:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	4299      	cmp	r1, r3
 8007622:	d119      	bne.n	8007658 <_strtod_l+0x8f0>
 8007624:	4b90      	ldr	r3, [pc, #576]	; (8007868 <_strtod_l+0xb00>)
 8007626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007628:	429a      	cmp	r2, r3
 800762a:	d102      	bne.n	8007632 <_strtod_l+0x8ca>
 800762c:	3101      	adds	r1, #1
 800762e:	f43f adda 	beq.w	80071e6 <_strtod_l+0x47e>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	4b8b      	ldr	r3, [pc, #556]	; (8007864 <_strtod_l+0xafc>)
 8007638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800763a:	401a      	ands	r2, r3
 800763c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007640:	9b05      	ldr	r3, [sp, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d19a      	bne.n	800757c <_strtod_l+0x814>
 8007646:	e5d9      	b.n	80071fc <_strtod_l+0x494>
 8007648:	f04f 33ff 	mov.w	r3, #4294967295
 800764c:	e7e8      	b.n	8007620 <_strtod_l+0x8b8>
 800764e:	4613      	mov	r3, r2
 8007650:	e7e6      	b.n	8007620 <_strtod_l+0x8b8>
 8007652:	ea53 0308 	orrs.w	r3, r3, r8
 8007656:	d081      	beq.n	800755c <_strtod_l+0x7f4>
 8007658:	b1e5      	cbz	r5, 8007694 <_strtod_l+0x92c>
 800765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765c:	421d      	tst	r5, r3
 800765e:	d0ef      	beq.n	8007640 <_strtod_l+0x8d8>
 8007660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007662:	4640      	mov	r0, r8
 8007664:	4649      	mov	r1, r9
 8007666:	9a05      	ldr	r2, [sp, #20]
 8007668:	b1c3      	cbz	r3, 800769c <_strtod_l+0x934>
 800766a:	f7ff fb5c 	bl	8006d26 <sulp>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007676:	f7f8 fd83 	bl	8000180 <__adddf3>
 800767a:	4680      	mov	r8, r0
 800767c:	4689      	mov	r9, r1
 800767e:	e7df      	b.n	8007640 <_strtod_l+0x8d8>
 8007680:	4013      	ands	r3, r2
 8007682:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007686:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800768a:	f04f 38ff 	mov.w	r8, #4294967295
 800768e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007692:	e7d5      	b.n	8007640 <_strtod_l+0x8d8>
 8007694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007696:	ea13 0f08 	tst.w	r3, r8
 800769a:	e7e0      	b.n	800765e <_strtod_l+0x8f6>
 800769c:	f7ff fb43 	bl	8006d26 <sulp>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076a8:	f7f8 fd68 	bl	800017c <__aeabi_dsub>
 80076ac:	2200      	movs	r2, #0
 80076ae:	2300      	movs	r3, #0
 80076b0:	4680      	mov	r8, r0
 80076b2:	4689      	mov	r9, r1
 80076b4:	f7f9 f982 	bl	80009bc <__aeabi_dcmpeq>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d0c1      	beq.n	8007640 <_strtod_l+0x8d8>
 80076bc:	e608      	b.n	80072d0 <_strtod_l+0x568>
 80076be:	4658      	mov	r0, fp
 80076c0:	9904      	ldr	r1, [sp, #16]
 80076c2:	f002 fb05 	bl	8009cd0 <__ratio>
 80076c6:	2200      	movs	r2, #0
 80076c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076cc:	4606      	mov	r6, r0
 80076ce:	460f      	mov	r7, r1
 80076d0:	f7f9 f988 	bl	80009e4 <__aeabi_dcmple>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d070      	beq.n	80077ba <_strtod_l+0xa52>
 80076d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d042      	beq.n	8007764 <_strtod_l+0x9fc>
 80076de:	2600      	movs	r6, #0
 80076e0:	4f62      	ldr	r7, [pc, #392]	; (800786c <_strtod_l+0xb04>)
 80076e2:	4d62      	ldr	r5, [pc, #392]	; (800786c <_strtod_l+0xb04>)
 80076e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076ea:	0d1b      	lsrs	r3, r3, #20
 80076ec:	051b      	lsls	r3, r3, #20
 80076ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80076f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076f2:	4b5f      	ldr	r3, [pc, #380]	; (8007870 <_strtod_l+0xb08>)
 80076f4:	429a      	cmp	r2, r3
 80076f6:	f040 80c3 	bne.w	8007880 <_strtod_l+0xb18>
 80076fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fc:	4640      	mov	r0, r8
 80076fe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007702:	4649      	mov	r1, r9
 8007704:	f002 fa0e 	bl	8009b24 <__ulp>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4630      	mov	r0, r6
 800770e:	4639      	mov	r1, r7
 8007710:	f7f8 feec 	bl	80004ec <__aeabi_dmul>
 8007714:	4642      	mov	r2, r8
 8007716:	464b      	mov	r3, r9
 8007718:	f7f8 fd32 	bl	8000180 <__adddf3>
 800771c:	460b      	mov	r3, r1
 800771e:	4951      	ldr	r1, [pc, #324]	; (8007864 <_strtod_l+0xafc>)
 8007720:	4a54      	ldr	r2, [pc, #336]	; (8007874 <_strtod_l+0xb0c>)
 8007722:	4019      	ands	r1, r3
 8007724:	4291      	cmp	r1, r2
 8007726:	4680      	mov	r8, r0
 8007728:	d95d      	bls.n	80077e6 <_strtod_l+0xa7e>
 800772a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800772c:	4b4e      	ldr	r3, [pc, #312]	; (8007868 <_strtod_l+0xb00>)
 800772e:	429a      	cmp	r2, r3
 8007730:	d103      	bne.n	800773a <_strtod_l+0x9d2>
 8007732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007734:	3301      	adds	r3, #1
 8007736:	f43f ad56 	beq.w	80071e6 <_strtod_l+0x47e>
 800773a:	f04f 38ff 	mov.w	r8, #4294967295
 800773e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007868 <_strtod_l+0xb00>
 8007742:	4650      	mov	r0, sl
 8007744:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007746:	f001 febd 	bl	80094c4 <_Bfree>
 800774a:	4650      	mov	r0, sl
 800774c:	9906      	ldr	r1, [sp, #24]
 800774e:	f001 feb9 	bl	80094c4 <_Bfree>
 8007752:	4650      	mov	r0, sl
 8007754:	9904      	ldr	r1, [sp, #16]
 8007756:	f001 feb5 	bl	80094c4 <_Bfree>
 800775a:	4659      	mov	r1, fp
 800775c:	4650      	mov	r0, sl
 800775e:	f001 feb1 	bl	80094c4 <_Bfree>
 8007762:	e627      	b.n	80073b4 <_strtod_l+0x64c>
 8007764:	f1b8 0f00 	cmp.w	r8, #0
 8007768:	d119      	bne.n	800779e <_strtod_l+0xa36>
 800776a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800776c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007770:	b9e3      	cbnz	r3, 80077ac <_strtod_l+0xa44>
 8007772:	2200      	movs	r2, #0
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	4b3c      	ldr	r3, [pc, #240]	; (800786c <_strtod_l+0xb04>)
 800777a:	f7f9 f929 	bl	80009d0 <__aeabi_dcmplt>
 800777e:	b9c8      	cbnz	r0, 80077b4 <_strtod_l+0xa4c>
 8007780:	2200      	movs	r2, #0
 8007782:	4630      	mov	r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	4b3c      	ldr	r3, [pc, #240]	; (8007878 <_strtod_l+0xb10>)
 8007788:	f7f8 feb0 	bl	80004ec <__aeabi_dmul>
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007794:	9416      	str	r4, [sp, #88]	; 0x58
 8007796:	9317      	str	r3, [sp, #92]	; 0x5c
 8007798:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800779c:	e7a2      	b.n	80076e4 <_strtod_l+0x97c>
 800779e:	f1b8 0f01 	cmp.w	r8, #1
 80077a2:	d103      	bne.n	80077ac <_strtod_l+0xa44>
 80077a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f43f ad92 	beq.w	80072d0 <_strtod_l+0x568>
 80077ac:	2600      	movs	r6, #0
 80077ae:	2400      	movs	r4, #0
 80077b0:	4f32      	ldr	r7, [pc, #200]	; (800787c <_strtod_l+0xb14>)
 80077b2:	e796      	b.n	80076e2 <_strtod_l+0x97a>
 80077b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80077b6:	4d30      	ldr	r5, [pc, #192]	; (8007878 <_strtod_l+0xb10>)
 80077b8:	e7ea      	b.n	8007790 <_strtod_l+0xa28>
 80077ba:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <_strtod_l+0xb10>)
 80077bc:	2200      	movs	r2, #0
 80077be:	4630      	mov	r0, r6
 80077c0:	4639      	mov	r1, r7
 80077c2:	f7f8 fe93 	bl	80004ec <__aeabi_dmul>
 80077c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c8:	4604      	mov	r4, r0
 80077ca:	460d      	mov	r5, r1
 80077cc:	b933      	cbnz	r3, 80077dc <_strtod_l+0xa74>
 80077ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077d2:	9010      	str	r0, [sp, #64]	; 0x40
 80077d4:	9311      	str	r3, [sp, #68]	; 0x44
 80077d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80077da:	e783      	b.n	80076e4 <_strtod_l+0x97c>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80077e4:	e7f7      	b.n	80077d6 <_strtod_l+0xa6e>
 80077e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1a8      	bne.n	8007742 <_strtod_l+0x9da>
 80077f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077f6:	0d1b      	lsrs	r3, r3, #20
 80077f8:	051b      	lsls	r3, r3, #20
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d1a1      	bne.n	8007742 <_strtod_l+0x9da>
 80077fe:	4620      	mov	r0, r4
 8007800:	4629      	mov	r1, r5
 8007802:	f7f9 fac9 	bl	8000d98 <__aeabi_d2lz>
 8007806:	f7f8 fe43 	bl	8000490 <__aeabi_l2d>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4620      	mov	r0, r4
 8007810:	4629      	mov	r1, r5
 8007812:	f7f8 fcb3 	bl	800017c <__aeabi_dsub>
 8007816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800781c:	ea43 0308 	orr.w	r3, r3, r8
 8007820:	4313      	orrs	r3, r2
 8007822:	4604      	mov	r4, r0
 8007824:	460d      	mov	r5, r1
 8007826:	d066      	beq.n	80078f6 <_strtod_l+0xb8e>
 8007828:	a309      	add	r3, pc, #36	; (adr r3, 8007850 <_strtod_l+0xae8>)
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f7f9 f8cf 	bl	80009d0 <__aeabi_dcmplt>
 8007832:	2800      	cmp	r0, #0
 8007834:	f47f ace2 	bne.w	80071fc <_strtod_l+0x494>
 8007838:	a307      	add	r3, pc, #28	; (adr r3, 8007858 <_strtod_l+0xaf0>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f9 f8e3 	bl	8000a0c <__aeabi_dcmpgt>
 8007846:	2800      	cmp	r0, #0
 8007848:	f43f af7b 	beq.w	8007742 <_strtod_l+0x9da>
 800784c:	e4d6      	b.n	80071fc <_strtod_l+0x494>
 800784e:	bf00      	nop
 8007850:	94a03595 	.word	0x94a03595
 8007854:	3fdfffff 	.word	0x3fdfffff
 8007858:	35afe535 	.word	0x35afe535
 800785c:	3fe00000 	.word	0x3fe00000
 8007860:	000fffff 	.word	0x000fffff
 8007864:	7ff00000 	.word	0x7ff00000
 8007868:	7fefffff 	.word	0x7fefffff
 800786c:	3ff00000 	.word	0x3ff00000
 8007870:	7fe00000 	.word	0x7fe00000
 8007874:	7c9fffff 	.word	0x7c9fffff
 8007878:	3fe00000 	.word	0x3fe00000
 800787c:	bff00000 	.word	0xbff00000
 8007880:	9b05      	ldr	r3, [sp, #20]
 8007882:	b313      	cbz	r3, 80078ca <_strtod_l+0xb62>
 8007884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007886:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800788a:	d81e      	bhi.n	80078ca <_strtod_l+0xb62>
 800788c:	a326      	add	r3, pc, #152	; (adr r3, 8007928 <_strtod_l+0xbc0>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f9 f8a5 	bl	80009e4 <__aeabi_dcmple>
 800789a:	b190      	cbz	r0, 80078c2 <_strtod_l+0xb5a>
 800789c:	4629      	mov	r1, r5
 800789e:	4620      	mov	r0, r4
 80078a0:	f7f9 f8fc 	bl	8000a9c <__aeabi_d2uiz>
 80078a4:	2801      	cmp	r0, #1
 80078a6:	bf38      	it	cc
 80078a8:	2001      	movcc	r0, #1
 80078aa:	f7f8 fda5 	bl	80003f8 <__aeabi_ui2d>
 80078ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b0:	4604      	mov	r4, r0
 80078b2:	460d      	mov	r5, r1
 80078b4:	b9d3      	cbnz	r3, 80078ec <_strtod_l+0xb84>
 80078b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078ba:	9012      	str	r0, [sp, #72]	; 0x48
 80078bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80078be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80078c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80078c8:	1a9f      	subs	r7, r3, r2
 80078ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078ce:	f002 f929 	bl	8009b24 <__ulp>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	f7f8 fe07 	bl	80004ec <__aeabi_dmul>
 80078de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078e2:	f7f8 fc4d 	bl	8000180 <__adddf3>
 80078e6:	4680      	mov	r8, r0
 80078e8:	4689      	mov	r9, r1
 80078ea:	e77e      	b.n	80077ea <_strtod_l+0xa82>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80078f4:	e7e3      	b.n	80078be <_strtod_l+0xb56>
 80078f6:	a30e      	add	r3, pc, #56	; (adr r3, 8007930 <_strtod_l+0xbc8>)
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f7f9 f868 	bl	80009d0 <__aeabi_dcmplt>
 8007900:	e7a1      	b.n	8007846 <_strtod_l+0xade>
 8007902:	2300      	movs	r3, #0
 8007904:	930a      	str	r3, [sp, #40]	; 0x28
 8007906:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	f7ff ba71 	b.w	8006df2 <_strtod_l+0x8a>
 8007910:	2a65      	cmp	r2, #101	; 0x65
 8007912:	f43f ab63 	beq.w	8006fdc <_strtod_l+0x274>
 8007916:	2a45      	cmp	r2, #69	; 0x45
 8007918:	f43f ab60 	beq.w	8006fdc <_strtod_l+0x274>
 800791c:	2301      	movs	r3, #1
 800791e:	f7ff bb95 	b.w	800704c <_strtod_l+0x2e4>
 8007922:	bf00      	nop
 8007924:	f3af 8000 	nop.w
 8007928:	ffc00000 	.word	0xffc00000
 800792c:	41dfffff 	.word	0x41dfffff
 8007930:	94a03595 	.word	0x94a03595
 8007934:	3fcfffff 	.word	0x3fcfffff

08007938 <_strtod_r>:
 8007938:	4b01      	ldr	r3, [pc, #4]	; (8007940 <_strtod_r+0x8>)
 800793a:	f7ff ba15 	b.w	8006d68 <_strtod_l>
 800793e:	bf00      	nop
 8007940:	20000078 	.word	0x20000078

08007944 <_strtol_l.constprop.0>:
 8007944:	2b01      	cmp	r3, #1
 8007946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794a:	4680      	mov	r8, r0
 800794c:	d001      	beq.n	8007952 <_strtol_l.constprop.0+0xe>
 800794e:	2b24      	cmp	r3, #36	; 0x24
 8007950:	d906      	bls.n	8007960 <_strtol_l.constprop.0+0x1c>
 8007952:	f7fe fa6f 	bl	8005e34 <__errno>
 8007956:	2316      	movs	r3, #22
 8007958:	6003      	str	r3, [r0, #0]
 800795a:	2000      	movs	r0, #0
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	460d      	mov	r5, r1
 8007962:	4f35      	ldr	r7, [pc, #212]	; (8007a38 <_strtol_l.constprop.0+0xf4>)
 8007964:	4628      	mov	r0, r5
 8007966:	f815 4b01 	ldrb.w	r4, [r5], #1
 800796a:	5de6      	ldrb	r6, [r4, r7]
 800796c:	f016 0608 	ands.w	r6, r6, #8
 8007970:	d1f8      	bne.n	8007964 <_strtol_l.constprop.0+0x20>
 8007972:	2c2d      	cmp	r4, #45	; 0x2d
 8007974:	d12f      	bne.n	80079d6 <_strtol_l.constprop.0+0x92>
 8007976:	2601      	movs	r6, #1
 8007978:	782c      	ldrb	r4, [r5, #0]
 800797a:	1c85      	adds	r5, r0, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d057      	beq.n	8007a30 <_strtol_l.constprop.0+0xec>
 8007980:	2b10      	cmp	r3, #16
 8007982:	d109      	bne.n	8007998 <_strtol_l.constprop.0+0x54>
 8007984:	2c30      	cmp	r4, #48	; 0x30
 8007986:	d107      	bne.n	8007998 <_strtol_l.constprop.0+0x54>
 8007988:	7828      	ldrb	r0, [r5, #0]
 800798a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800798e:	2858      	cmp	r0, #88	; 0x58
 8007990:	d149      	bne.n	8007a26 <_strtol_l.constprop.0+0xe2>
 8007992:	2310      	movs	r3, #16
 8007994:	786c      	ldrb	r4, [r5, #1]
 8007996:	3502      	adds	r5, #2
 8007998:	2700      	movs	r7, #0
 800799a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800799e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80079a2:	fbbe f9f3 	udiv	r9, lr, r3
 80079a6:	4638      	mov	r0, r7
 80079a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80079ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079b0:	f1bc 0f09 	cmp.w	ip, #9
 80079b4:	d814      	bhi.n	80079e0 <_strtol_l.constprop.0+0x9c>
 80079b6:	4664      	mov	r4, ip
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	dd22      	ble.n	8007a02 <_strtol_l.constprop.0+0xbe>
 80079bc:	2f00      	cmp	r7, #0
 80079be:	db1d      	blt.n	80079fc <_strtol_l.constprop.0+0xb8>
 80079c0:	4581      	cmp	r9, r0
 80079c2:	d31b      	bcc.n	80079fc <_strtol_l.constprop.0+0xb8>
 80079c4:	d101      	bne.n	80079ca <_strtol_l.constprop.0+0x86>
 80079c6:	45a2      	cmp	sl, r4
 80079c8:	db18      	blt.n	80079fc <_strtol_l.constprop.0+0xb8>
 80079ca:	2701      	movs	r7, #1
 80079cc:	fb00 4003 	mla	r0, r0, r3, r4
 80079d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079d4:	e7ea      	b.n	80079ac <_strtol_l.constprop.0+0x68>
 80079d6:	2c2b      	cmp	r4, #43	; 0x2b
 80079d8:	bf04      	itt	eq
 80079da:	782c      	ldrbeq	r4, [r5, #0]
 80079dc:	1c85      	addeq	r5, r0, #2
 80079de:	e7cd      	b.n	800797c <_strtol_l.constprop.0+0x38>
 80079e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80079e4:	f1bc 0f19 	cmp.w	ip, #25
 80079e8:	d801      	bhi.n	80079ee <_strtol_l.constprop.0+0xaa>
 80079ea:	3c37      	subs	r4, #55	; 0x37
 80079ec:	e7e4      	b.n	80079b8 <_strtol_l.constprop.0+0x74>
 80079ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80079f2:	f1bc 0f19 	cmp.w	ip, #25
 80079f6:	d804      	bhi.n	8007a02 <_strtol_l.constprop.0+0xbe>
 80079f8:	3c57      	subs	r4, #87	; 0x57
 80079fa:	e7dd      	b.n	80079b8 <_strtol_l.constprop.0+0x74>
 80079fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007a00:	e7e6      	b.n	80079d0 <_strtol_l.constprop.0+0x8c>
 8007a02:	2f00      	cmp	r7, #0
 8007a04:	da07      	bge.n	8007a16 <_strtol_l.constprop.0+0xd2>
 8007a06:	2322      	movs	r3, #34	; 0x22
 8007a08:	4670      	mov	r0, lr
 8007a0a:	f8c8 3000 	str.w	r3, [r8]
 8007a0e:	2a00      	cmp	r2, #0
 8007a10:	d0a4      	beq.n	800795c <_strtol_l.constprop.0+0x18>
 8007a12:	1e69      	subs	r1, r5, #1
 8007a14:	e005      	b.n	8007a22 <_strtol_l.constprop.0+0xde>
 8007a16:	b106      	cbz	r6, 8007a1a <_strtol_l.constprop.0+0xd6>
 8007a18:	4240      	negs	r0, r0
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	d09e      	beq.n	800795c <_strtol_l.constprop.0+0x18>
 8007a1e:	2f00      	cmp	r7, #0
 8007a20:	d1f7      	bne.n	8007a12 <_strtol_l.constprop.0+0xce>
 8007a22:	6011      	str	r1, [r2, #0]
 8007a24:	e79a      	b.n	800795c <_strtol_l.constprop.0+0x18>
 8007a26:	2430      	movs	r4, #48	; 0x30
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1b5      	bne.n	8007998 <_strtol_l.constprop.0+0x54>
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	e7b3      	b.n	8007998 <_strtol_l.constprop.0+0x54>
 8007a30:	2c30      	cmp	r4, #48	; 0x30
 8007a32:	d0a9      	beq.n	8007988 <_strtol_l.constprop.0+0x44>
 8007a34:	230a      	movs	r3, #10
 8007a36:	e7af      	b.n	8007998 <_strtol_l.constprop.0+0x54>
 8007a38:	0800acb1 	.word	0x0800acb1

08007a3c <_strtol_r>:
 8007a3c:	f7ff bf82 	b.w	8007944 <_strtol_l.constprop.0>

08007a40 <strtol>:
 8007a40:	4613      	mov	r3, r2
 8007a42:	460a      	mov	r2, r1
 8007a44:	4601      	mov	r1, r0
 8007a46:	4802      	ldr	r0, [pc, #8]	; (8007a50 <strtol+0x10>)
 8007a48:	6800      	ldr	r0, [r0, #0]
 8007a4a:	f7ff bf7b 	b.w	8007944 <_strtol_l.constprop.0>
 8007a4e:	bf00      	nop
 8007a50:	20000010 	.word	0x20000010

08007a54 <__swbuf_r>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	460e      	mov	r6, r1
 8007a58:	4614      	mov	r4, r2
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	b118      	cbz	r0, 8007a66 <__swbuf_r+0x12>
 8007a5e:	6983      	ldr	r3, [r0, #24]
 8007a60:	b90b      	cbnz	r3, 8007a66 <__swbuf_r+0x12>
 8007a62:	f001 f849 	bl	8008af8 <__sinit>
 8007a66:	4b21      	ldr	r3, [pc, #132]	; (8007aec <__swbuf_r+0x98>)
 8007a68:	429c      	cmp	r4, r3
 8007a6a:	d12b      	bne.n	8007ac4 <__swbuf_r+0x70>
 8007a6c:	686c      	ldr	r4, [r5, #4]
 8007a6e:	69a3      	ldr	r3, [r4, #24]
 8007a70:	60a3      	str	r3, [r4, #8]
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	071a      	lsls	r2, r3, #28
 8007a76:	d52f      	bpl.n	8007ad8 <__swbuf_r+0x84>
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	b36b      	cbz	r3, 8007ad8 <__swbuf_r+0x84>
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	b2f6      	uxtb	r6, r6
 8007a82:	1ac0      	subs	r0, r0, r3
 8007a84:	6963      	ldr	r3, [r4, #20]
 8007a86:	4637      	mov	r7, r6
 8007a88:	4283      	cmp	r3, r0
 8007a8a:	dc04      	bgt.n	8007a96 <__swbuf_r+0x42>
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 ff9e 	bl	80089d0 <_fflush_r>
 8007a94:	bb30      	cbnz	r0, 8007ae4 <__swbuf_r+0x90>
 8007a96:	68a3      	ldr	r3, [r4, #8]
 8007a98:	3001      	adds	r0, #1
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	6022      	str	r2, [r4, #0]
 8007aa4:	701e      	strb	r6, [r3, #0]
 8007aa6:	6963      	ldr	r3, [r4, #20]
 8007aa8:	4283      	cmp	r3, r0
 8007aaa:	d004      	beq.n	8007ab6 <__swbuf_r+0x62>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	07db      	lsls	r3, r3, #31
 8007ab0:	d506      	bpl.n	8007ac0 <__swbuf_r+0x6c>
 8007ab2:	2e0a      	cmp	r6, #10
 8007ab4:	d104      	bne.n	8007ac0 <__swbuf_r+0x6c>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 ff89 	bl	80089d0 <_fflush_r>
 8007abe:	b988      	cbnz	r0, 8007ae4 <__swbuf_r+0x90>
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <__swbuf_r+0x9c>)
 8007ac6:	429c      	cmp	r4, r3
 8007ac8:	d101      	bne.n	8007ace <__swbuf_r+0x7a>
 8007aca:	68ac      	ldr	r4, [r5, #8]
 8007acc:	e7cf      	b.n	8007a6e <__swbuf_r+0x1a>
 8007ace:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <__swbuf_r+0xa0>)
 8007ad0:	429c      	cmp	r4, r3
 8007ad2:	bf08      	it	eq
 8007ad4:	68ec      	ldreq	r4, [r5, #12]
 8007ad6:	e7ca      	b.n	8007a6e <__swbuf_r+0x1a>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 f80c 	bl	8007af8 <__swsetup_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d0cb      	beq.n	8007a7c <__swbuf_r+0x28>
 8007ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae8:	e7ea      	b.n	8007ac0 <__swbuf_r+0x6c>
 8007aea:	bf00      	nop
 8007aec:	0800ae64 	.word	0x0800ae64
 8007af0:	0800ae84 	.word	0x0800ae84
 8007af4:	0800ae44 	.word	0x0800ae44

08007af8 <__swsetup_r>:
 8007af8:	4b32      	ldr	r3, [pc, #200]	; (8007bc4 <__swsetup_r+0xcc>)
 8007afa:	b570      	push	{r4, r5, r6, lr}
 8007afc:	681d      	ldr	r5, [r3, #0]
 8007afe:	4606      	mov	r6, r0
 8007b00:	460c      	mov	r4, r1
 8007b02:	b125      	cbz	r5, 8007b0e <__swsetup_r+0x16>
 8007b04:	69ab      	ldr	r3, [r5, #24]
 8007b06:	b913      	cbnz	r3, 8007b0e <__swsetup_r+0x16>
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 fff5 	bl	8008af8 <__sinit>
 8007b0e:	4b2e      	ldr	r3, [pc, #184]	; (8007bc8 <__swsetup_r+0xd0>)
 8007b10:	429c      	cmp	r4, r3
 8007b12:	d10f      	bne.n	8007b34 <__swsetup_r+0x3c>
 8007b14:	686c      	ldr	r4, [r5, #4]
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b1c:	0719      	lsls	r1, r3, #28
 8007b1e:	d42c      	bmi.n	8007b7a <__swsetup_r+0x82>
 8007b20:	06dd      	lsls	r5, r3, #27
 8007b22:	d411      	bmi.n	8007b48 <__swsetup_r+0x50>
 8007b24:	2309      	movs	r3, #9
 8007b26:	6033      	str	r3, [r6, #0]
 8007b28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	e03e      	b.n	8007bb2 <__swsetup_r+0xba>
 8007b34:	4b25      	ldr	r3, [pc, #148]	; (8007bcc <__swsetup_r+0xd4>)
 8007b36:	429c      	cmp	r4, r3
 8007b38:	d101      	bne.n	8007b3e <__swsetup_r+0x46>
 8007b3a:	68ac      	ldr	r4, [r5, #8]
 8007b3c:	e7eb      	b.n	8007b16 <__swsetup_r+0x1e>
 8007b3e:	4b24      	ldr	r3, [pc, #144]	; (8007bd0 <__swsetup_r+0xd8>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	bf08      	it	eq
 8007b44:	68ec      	ldreq	r4, [r5, #12]
 8007b46:	e7e6      	b.n	8007b16 <__swsetup_r+0x1e>
 8007b48:	0758      	lsls	r0, r3, #29
 8007b4a:	d512      	bpl.n	8007b72 <__swsetup_r+0x7a>
 8007b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b4e:	b141      	cbz	r1, 8007b62 <__swsetup_r+0x6a>
 8007b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b54:	4299      	cmp	r1, r3
 8007b56:	d002      	beq.n	8007b5e <__swsetup_r+0x66>
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f002 f93f 	bl	8009ddc <_free_r>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6363      	str	r3, [r4, #52]	; 0x34
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f043 0308 	orr.w	r3, r3, #8
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	b94b      	cbnz	r3, 8007b92 <__swsetup_r+0x9a>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b88:	d003      	beq.n	8007b92 <__swsetup_r+0x9a>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f001 fbe3 	bl	8009358 <__smakebuf_r>
 8007b92:	89a0      	ldrh	r0, [r4, #12]
 8007b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b98:	f010 0301 	ands.w	r3, r0, #1
 8007b9c:	d00a      	beq.n	8007bb4 <__swsetup_r+0xbc>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60a3      	str	r3, [r4, #8]
 8007ba2:	6963      	ldr	r3, [r4, #20]
 8007ba4:	425b      	negs	r3, r3
 8007ba6:	61a3      	str	r3, [r4, #24]
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	b943      	cbnz	r3, 8007bbe <__swsetup_r+0xc6>
 8007bac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bb0:	d1ba      	bne.n	8007b28 <__swsetup_r+0x30>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	0781      	lsls	r1, r0, #30
 8007bb6:	bf58      	it	pl
 8007bb8:	6963      	ldrpl	r3, [r4, #20]
 8007bba:	60a3      	str	r3, [r4, #8]
 8007bbc:	e7f4      	b.n	8007ba8 <__swsetup_r+0xb0>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	e7f7      	b.n	8007bb2 <__swsetup_r+0xba>
 8007bc2:	bf00      	nop
 8007bc4:	20000010 	.word	0x20000010
 8007bc8:	0800ae64 	.word	0x0800ae64
 8007bcc:	0800ae84 	.word	0x0800ae84
 8007bd0:	0800ae44 	.word	0x0800ae44

08007bd4 <quorem>:
 8007bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd8:	6903      	ldr	r3, [r0, #16]
 8007bda:	690c      	ldr	r4, [r1, #16]
 8007bdc:	4607      	mov	r7, r0
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	f2c0 8082 	blt.w	8007ce8 <quorem+0x114>
 8007be4:	3c01      	subs	r4, #1
 8007be6:	f100 0514 	add.w	r5, r0, #20
 8007bea:	f101 0814 	add.w	r8, r1, #20
 8007bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c0c:	d331      	bcc.n	8007c72 <quorem+0x9e>
 8007c0e:	f04f 0e00 	mov.w	lr, #0
 8007c12:	4640      	mov	r0, r8
 8007c14:	46ac      	mov	ip, r5
 8007c16:	46f2      	mov	sl, lr
 8007c18:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c1c:	b293      	uxth	r3, r2
 8007c1e:	fb06 e303 	mla	r3, r6, r3, lr
 8007c22:	0c12      	lsrs	r2, r2, #16
 8007c24:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	fb06 e202 	mla	r2, r6, r2, lr
 8007c2e:	ebaa 0303 	sub.w	r3, sl, r3
 8007c32:	f8dc a000 	ldr.w	sl, [ip]
 8007c36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c3a:	fa1f fa8a 	uxth.w	sl, sl
 8007c3e:	4453      	add	r3, sl
 8007c40:	f8dc a000 	ldr.w	sl, [ip]
 8007c44:	b292      	uxth	r2, r2
 8007c46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c54:	4581      	cmp	r9, r0
 8007c56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c5a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c5e:	d2db      	bcs.n	8007c18 <quorem+0x44>
 8007c60:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c64:	b92b      	cbnz	r3, 8007c72 <quorem+0x9e>
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	3b04      	subs	r3, #4
 8007c6a:	429d      	cmp	r5, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	d32f      	bcc.n	8007cd0 <quorem+0xfc>
 8007c70:	613c      	str	r4, [r7, #16]
 8007c72:	4638      	mov	r0, r7
 8007c74:	f001 feae 	bl	80099d4 <__mcmp>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	db25      	blt.n	8007cc8 <quorem+0xf4>
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	f04f 0c00 	mov.w	ip, #0
 8007c82:	3601      	adds	r6, #1
 8007c84:	f858 1b04 	ldr.w	r1, [r8], #4
 8007c88:	f8d0 e000 	ldr.w	lr, [r0]
 8007c8c:	b28b      	uxth	r3, r1
 8007c8e:	ebac 0303 	sub.w	r3, ip, r3
 8007c92:	fa1f f28e 	uxth.w	r2, lr
 8007c96:	4413      	add	r3, r2
 8007c98:	0c0a      	lsrs	r2, r1, #16
 8007c9a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ca8:	45c1      	cmp	r9, r8
 8007caa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cae:	f840 3b04 	str.w	r3, [r0], #4
 8007cb2:	d2e7      	bcs.n	8007c84 <quorem+0xb0>
 8007cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cbc:	b922      	cbnz	r2, 8007cc8 <quorem+0xf4>
 8007cbe:	3b04      	subs	r3, #4
 8007cc0:	429d      	cmp	r5, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	d30a      	bcc.n	8007cdc <quorem+0x108>
 8007cc6:	613c      	str	r4, [r7, #16]
 8007cc8:	4630      	mov	r0, r6
 8007cca:	b003      	add	sp, #12
 8007ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd0:	6812      	ldr	r2, [r2, #0]
 8007cd2:	3b04      	subs	r3, #4
 8007cd4:	2a00      	cmp	r2, #0
 8007cd6:	d1cb      	bne.n	8007c70 <quorem+0x9c>
 8007cd8:	3c01      	subs	r4, #1
 8007cda:	e7c6      	b.n	8007c6a <quorem+0x96>
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	3b04      	subs	r3, #4
 8007ce0:	2a00      	cmp	r2, #0
 8007ce2:	d1f0      	bne.n	8007cc6 <quorem+0xf2>
 8007ce4:	3c01      	subs	r4, #1
 8007ce6:	e7eb      	b.n	8007cc0 <quorem+0xec>
 8007ce8:	2000      	movs	r0, #0
 8007cea:	e7ee      	b.n	8007cca <quorem+0xf6>
 8007cec:	0000      	movs	r0, r0
	...

08007cf0 <_dtoa_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	461f      	mov	r7, r3
 8007cf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007cfa:	b099      	sub	sp, #100	; 0x64
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007d06:	b974      	cbnz	r4, 8007d26 <_dtoa_r+0x36>
 8007d08:	2010      	movs	r0, #16
 8007d0a:	f001 fb65 	bl	80093d8 <malloc>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	6268      	str	r0, [r5, #36]	; 0x24
 8007d12:	b920      	cbnz	r0, 8007d1e <_dtoa_r+0x2e>
 8007d14:	21ea      	movs	r1, #234	; 0xea
 8007d16:	4ba8      	ldr	r3, [pc, #672]	; (8007fb8 <_dtoa_r+0x2c8>)
 8007d18:	48a8      	ldr	r0, [pc, #672]	; (8007fbc <_dtoa_r+0x2cc>)
 8007d1a:	f002 fcc3 	bl	800a6a4 <__assert_func>
 8007d1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d22:	6004      	str	r4, [r0, #0]
 8007d24:	60c4      	str	r4, [r0, #12]
 8007d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d28:	6819      	ldr	r1, [r3, #0]
 8007d2a:	b151      	cbz	r1, 8007d42 <_dtoa_r+0x52>
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4093      	lsls	r3, r2
 8007d32:	604a      	str	r2, [r1, #4]
 8007d34:	608b      	str	r3, [r1, #8]
 8007d36:	4628      	mov	r0, r5
 8007d38:	f001 fbc4 	bl	80094c4 <_Bfree>
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	1e3b      	subs	r3, r7, #0
 8007d44:	bfaf      	iteee	ge
 8007d46:	2300      	movge	r3, #0
 8007d48:	2201      	movlt	r2, #1
 8007d4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d4e:	9305      	strlt	r3, [sp, #20]
 8007d50:	bfa8      	it	ge
 8007d52:	f8c8 3000 	strge.w	r3, [r8]
 8007d56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007d5a:	4b99      	ldr	r3, [pc, #612]	; (8007fc0 <_dtoa_r+0x2d0>)
 8007d5c:	bfb8      	it	lt
 8007d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8007d62:	ea33 0309 	bics.w	r3, r3, r9
 8007d66:	d119      	bne.n	8007d9c <_dtoa_r+0xac>
 8007d68:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d74:	4333      	orrs	r3, r6
 8007d76:	f000 857f 	beq.w	8008878 <_dtoa_r+0xb88>
 8007d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d7c:	b953      	cbnz	r3, 8007d94 <_dtoa_r+0xa4>
 8007d7e:	4b91      	ldr	r3, [pc, #580]	; (8007fc4 <_dtoa_r+0x2d4>)
 8007d80:	e022      	b.n	8007dc8 <_dtoa_r+0xd8>
 8007d82:	4b91      	ldr	r3, [pc, #580]	; (8007fc8 <_dtoa_r+0x2d8>)
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	3308      	adds	r3, #8
 8007d88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	9803      	ldr	r0, [sp, #12]
 8007d8e:	b019      	add	sp, #100	; 0x64
 8007d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d94:	4b8b      	ldr	r3, [pc, #556]	; (8007fc4 <_dtoa_r+0x2d4>)
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	3303      	adds	r3, #3
 8007d9a:	e7f5      	b.n	8007d88 <_dtoa_r+0x98>
 8007d9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007da0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007da8:	2200      	movs	r2, #0
 8007daa:	2300      	movs	r3, #0
 8007dac:	f7f8 fe06 	bl	80009bc <__aeabi_dcmpeq>
 8007db0:	4680      	mov	r8, r0
 8007db2:	b158      	cbz	r0, 8007dcc <_dtoa_r+0xdc>
 8007db4:	2301      	movs	r3, #1
 8007db6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8558 	beq.w	8008872 <_dtoa_r+0xb82>
 8007dc2:	4882      	ldr	r0, [pc, #520]	; (8007fcc <_dtoa_r+0x2dc>)
 8007dc4:	6018      	str	r0, [r3, #0]
 8007dc6:	1e43      	subs	r3, r0, #1
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	e7df      	b.n	8007d8c <_dtoa_r+0x9c>
 8007dcc:	ab16      	add	r3, sp, #88	; 0x58
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	ab17      	add	r3, sp, #92	; 0x5c
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007dda:	f001 ff1d 	bl	8009c18 <__d2b>
 8007dde:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007de2:	4683      	mov	fp, r0
 8007de4:	2c00      	cmp	r4, #0
 8007de6:	d07f      	beq.n	8007ee8 <_dtoa_r+0x1f8>
 8007de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007dfa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007dfe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007e02:	2200      	movs	r2, #0
 8007e04:	4b72      	ldr	r3, [pc, #456]	; (8007fd0 <_dtoa_r+0x2e0>)
 8007e06:	f7f8 f9b9 	bl	800017c <__aeabi_dsub>
 8007e0a:	a365      	add	r3, pc, #404	; (adr r3, 8007fa0 <_dtoa_r+0x2b0>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fb6c 	bl	80004ec <__aeabi_dmul>
 8007e14:	a364      	add	r3, pc, #400	; (adr r3, 8007fa8 <_dtoa_r+0x2b8>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f7f8 f9b1 	bl	8000180 <__adddf3>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	4620      	mov	r0, r4
 8007e22:	460f      	mov	r7, r1
 8007e24:	f7f8 faf8 	bl	8000418 <__aeabi_i2d>
 8007e28:	a361      	add	r3, pc, #388	; (adr r3, 8007fb0 <_dtoa_r+0x2c0>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 fb5d 	bl	80004ec <__aeabi_dmul>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4630      	mov	r0, r6
 8007e38:	4639      	mov	r1, r7
 8007e3a:	f7f8 f9a1 	bl	8000180 <__adddf3>
 8007e3e:	4606      	mov	r6, r0
 8007e40:	460f      	mov	r7, r1
 8007e42:	f7f8 fe03 	bl	8000a4c <__aeabi_d2iz>
 8007e46:	2200      	movs	r2, #0
 8007e48:	4682      	mov	sl, r0
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 fdbe 	bl	80009d0 <__aeabi_dcmplt>
 8007e54:	b148      	cbz	r0, 8007e6a <_dtoa_r+0x17a>
 8007e56:	4650      	mov	r0, sl
 8007e58:	f7f8 fade 	bl	8000418 <__aeabi_i2d>
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	463b      	mov	r3, r7
 8007e60:	f7f8 fdac 	bl	80009bc <__aeabi_dcmpeq>
 8007e64:	b908      	cbnz	r0, 8007e6a <_dtoa_r+0x17a>
 8007e66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e6a:	f1ba 0f16 	cmp.w	sl, #22
 8007e6e:	d858      	bhi.n	8007f22 <_dtoa_r+0x232>
 8007e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e74:	4b57      	ldr	r3, [pc, #348]	; (8007fd4 <_dtoa_r+0x2e4>)
 8007e76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 fda7 	bl	80009d0 <__aeabi_dcmplt>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d04f      	beq.n	8007f26 <_dtoa_r+0x236>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e90:	1b1c      	subs	r4, r3, r4
 8007e92:	1e63      	subs	r3, r4, #1
 8007e94:	9309      	str	r3, [sp, #36]	; 0x24
 8007e96:	bf49      	itett	mi
 8007e98:	f1c4 0301 	rsbmi	r3, r4, #1
 8007e9c:	2300      	movpl	r3, #0
 8007e9e:	9306      	strmi	r3, [sp, #24]
 8007ea0:	2300      	movmi	r3, #0
 8007ea2:	bf54      	ite	pl
 8007ea4:	9306      	strpl	r3, [sp, #24]
 8007ea6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007ea8:	f1ba 0f00 	cmp.w	sl, #0
 8007eac:	db3d      	blt.n	8007f2a <_dtoa_r+0x23a>
 8007eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007eb4:	4453      	add	r3, sl
 8007eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb8:	2300      	movs	r3, #0
 8007eba:	930a      	str	r3, [sp, #40]	; 0x28
 8007ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	f200 808c 	bhi.w	8007fdc <_dtoa_r+0x2ec>
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	bfc4      	itt	gt
 8007ec8:	3b04      	subgt	r3, #4
 8007eca:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ece:	bfc8      	it	gt
 8007ed0:	2400      	movgt	r4, #0
 8007ed2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ed6:	bfd8      	it	le
 8007ed8:	2401      	movle	r4, #1
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	f200 808a 	bhi.w	8007ff4 <_dtoa_r+0x304>
 8007ee0:	e8df f003 	tbb	[pc, r3]
 8007ee4:	5b4d4f2d 	.word	0x5b4d4f2d
 8007ee8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007eec:	441c      	add	r4, r3
 8007eee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	bfc3      	ittte	gt
 8007ef6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007efa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007efe:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f02:	f1c3 0320 	rsble	r3, r3, #32
 8007f06:	bfc6      	itte	gt
 8007f08:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f0c:	4318      	orrgt	r0, r3
 8007f0e:	fa06 f003 	lslle.w	r0, r6, r3
 8007f12:	f7f8 fa71 	bl	80003f8 <__aeabi_ui2d>
 8007f16:	2301      	movs	r3, #1
 8007f18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f1c:	3c01      	subs	r4, #1
 8007f1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f20:	e76f      	b.n	8007e02 <_dtoa_r+0x112>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e7b2      	b.n	8007e8c <_dtoa_r+0x19c>
 8007f26:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f28:	e7b1      	b.n	8007e8e <_dtoa_r+0x19e>
 8007f2a:	9b06      	ldr	r3, [sp, #24]
 8007f2c:	eba3 030a 	sub.w	r3, r3, sl
 8007f30:	9306      	str	r3, [sp, #24]
 8007f32:	f1ca 0300 	rsb	r3, sl, #0
 8007f36:	930a      	str	r3, [sp, #40]	; 0x28
 8007f38:	2300      	movs	r3, #0
 8007f3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f3c:	e7be      	b.n	8007ebc <_dtoa_r+0x1cc>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dc58      	bgt.n	8007ffa <_dtoa_r+0x30a>
 8007f48:	f04f 0901 	mov.w	r9, #1
 8007f4c:	464b      	mov	r3, r9
 8007f4e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f52:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007f56:	2200      	movs	r2, #0
 8007f58:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007f5a:	6042      	str	r2, [r0, #4]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	f102 0614 	add.w	r6, r2, #20
 8007f62:	429e      	cmp	r6, r3
 8007f64:	6841      	ldr	r1, [r0, #4]
 8007f66:	d94e      	bls.n	8008006 <_dtoa_r+0x316>
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f001 fa6b 	bl	8009444 <_Balloc>
 8007f6e:	9003      	str	r0, [sp, #12]
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d14c      	bne.n	800800e <_dtoa_r+0x31e>
 8007f74:	4602      	mov	r2, r0
 8007f76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f7a:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <_dtoa_r+0x2e8>)
 8007f7c:	e6cc      	b.n	8007d18 <_dtoa_r+0x28>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e7de      	b.n	8007f40 <_dtoa_r+0x250>
 8007f82:	2300      	movs	r3, #0
 8007f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f88:	eb0a 0903 	add.w	r9, sl, r3
 8007f8c:	f109 0301 	add.w	r3, r9, #1
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	9308      	str	r3, [sp, #32]
 8007f94:	bfb8      	it	lt
 8007f96:	2301      	movlt	r3, #1
 8007f98:	e7dd      	b.n	8007f56 <_dtoa_r+0x266>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e7f2      	b.n	8007f84 <_dtoa_r+0x294>
 8007f9e:	bf00      	nop
 8007fa0:	636f4361 	.word	0x636f4361
 8007fa4:	3fd287a7 	.word	0x3fd287a7
 8007fa8:	8b60c8b3 	.word	0x8b60c8b3
 8007fac:	3fc68a28 	.word	0x3fc68a28
 8007fb0:	509f79fb 	.word	0x509f79fb
 8007fb4:	3fd34413 	.word	0x3fd34413
 8007fb8:	0800adbe 	.word	0x0800adbe
 8007fbc:	0800add5 	.word	0x0800add5
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	0800adba 	.word	0x0800adba
 8007fc8:	0800adb1 	.word	0x0800adb1
 8007fcc:	0800ac35 	.word	0x0800ac35
 8007fd0:	3ff80000 	.word	0x3ff80000
 8007fd4:	0800afa8 	.word	0x0800afa8
 8007fd8:	0800ae30 	.word	0x0800ae30
 8007fdc:	2401      	movs	r4, #1
 8007fde:	2300      	movs	r3, #0
 8007fe0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007fe2:	9322      	str	r3, [sp, #136]	; 0x88
 8007fe4:	f04f 39ff 	mov.w	r9, #4294967295
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2312      	movs	r3, #18
 8007fec:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ff0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007ff2:	e7b0      	b.n	8007f56 <_dtoa_r+0x266>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ff8:	e7f4      	b.n	8007fe4 <_dtoa_r+0x2f4>
 8007ffa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007ffe:	464b      	mov	r3, r9
 8008000:	f8cd 9020 	str.w	r9, [sp, #32]
 8008004:	e7a7      	b.n	8007f56 <_dtoa_r+0x266>
 8008006:	3101      	adds	r1, #1
 8008008:	6041      	str	r1, [r0, #4]
 800800a:	0052      	lsls	r2, r2, #1
 800800c:	e7a7      	b.n	8007f5e <_dtoa_r+0x26e>
 800800e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008010:	9a03      	ldr	r2, [sp, #12]
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	2b0e      	cmp	r3, #14
 8008018:	f200 80a8 	bhi.w	800816c <_dtoa_r+0x47c>
 800801c:	2c00      	cmp	r4, #0
 800801e:	f000 80a5 	beq.w	800816c <_dtoa_r+0x47c>
 8008022:	f1ba 0f00 	cmp.w	sl, #0
 8008026:	dd34      	ble.n	8008092 <_dtoa_r+0x3a2>
 8008028:	4a9a      	ldr	r2, [pc, #616]	; (8008294 <_dtoa_r+0x5a4>)
 800802a:	f00a 030f 	and.w	r3, sl, #15
 800802e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008032:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008036:	e9d3 3400 	ldrd	r3, r4, [r3]
 800803a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800803e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008042:	d016      	beq.n	8008072 <_dtoa_r+0x382>
 8008044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008048:	4b93      	ldr	r3, [pc, #588]	; (8008298 <_dtoa_r+0x5a8>)
 800804a:	2703      	movs	r7, #3
 800804c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008050:	f7f8 fb76 	bl	8000740 <__aeabi_ddiv>
 8008054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008058:	f004 040f 	and.w	r4, r4, #15
 800805c:	4e8e      	ldr	r6, [pc, #568]	; (8008298 <_dtoa_r+0x5a8>)
 800805e:	b954      	cbnz	r4, 8008076 <_dtoa_r+0x386>
 8008060:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008068:	f7f8 fb6a 	bl	8000740 <__aeabi_ddiv>
 800806c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008070:	e029      	b.n	80080c6 <_dtoa_r+0x3d6>
 8008072:	2702      	movs	r7, #2
 8008074:	e7f2      	b.n	800805c <_dtoa_r+0x36c>
 8008076:	07e1      	lsls	r1, r4, #31
 8008078:	d508      	bpl.n	800808c <_dtoa_r+0x39c>
 800807a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800807e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008082:	f7f8 fa33 	bl	80004ec <__aeabi_dmul>
 8008086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800808a:	3701      	adds	r7, #1
 800808c:	1064      	asrs	r4, r4, #1
 800808e:	3608      	adds	r6, #8
 8008090:	e7e5      	b.n	800805e <_dtoa_r+0x36e>
 8008092:	f000 80a5 	beq.w	80081e0 <_dtoa_r+0x4f0>
 8008096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800809a:	f1ca 0400 	rsb	r4, sl, #0
 800809e:	4b7d      	ldr	r3, [pc, #500]	; (8008294 <_dtoa_r+0x5a4>)
 80080a0:	f004 020f 	and.w	r2, r4, #15
 80080a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 fa1e 	bl	80004ec <__aeabi_dmul>
 80080b0:	2702      	movs	r7, #2
 80080b2:	2300      	movs	r3, #0
 80080b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b8:	4e77      	ldr	r6, [pc, #476]	; (8008298 <_dtoa_r+0x5a8>)
 80080ba:	1124      	asrs	r4, r4, #4
 80080bc:	2c00      	cmp	r4, #0
 80080be:	f040 8084 	bne.w	80081ca <_dtoa_r+0x4da>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1d2      	bne.n	800806c <_dtoa_r+0x37c>
 80080c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 808b 	beq.w	80081e4 <_dtoa_r+0x4f4>
 80080ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80080d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80080d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080da:	2200      	movs	r2, #0
 80080dc:	4b6f      	ldr	r3, [pc, #444]	; (800829c <_dtoa_r+0x5ac>)
 80080de:	f7f8 fc77 	bl	80009d0 <__aeabi_dcmplt>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d07e      	beq.n	80081e4 <_dtoa_r+0x4f4>
 80080e6:	9b08      	ldr	r3, [sp, #32]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d07b      	beq.n	80081e4 <_dtoa_r+0x4f4>
 80080ec:	f1b9 0f00 	cmp.w	r9, #0
 80080f0:	dd38      	ble.n	8008164 <_dtoa_r+0x474>
 80080f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080f6:	2200      	movs	r2, #0
 80080f8:	4b69      	ldr	r3, [pc, #420]	; (80082a0 <_dtoa_r+0x5b0>)
 80080fa:	f7f8 f9f7 	bl	80004ec <__aeabi_dmul>
 80080fe:	464c      	mov	r4, r9
 8008100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008104:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008108:	3701      	adds	r7, #1
 800810a:	4638      	mov	r0, r7
 800810c:	f7f8 f984 	bl	8000418 <__aeabi_i2d>
 8008110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008114:	f7f8 f9ea 	bl	80004ec <__aeabi_dmul>
 8008118:	2200      	movs	r2, #0
 800811a:	4b62      	ldr	r3, [pc, #392]	; (80082a4 <_dtoa_r+0x5b4>)
 800811c:	f7f8 f830 	bl	8000180 <__adddf3>
 8008120:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008124:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008128:	9611      	str	r6, [sp, #68]	; 0x44
 800812a:	2c00      	cmp	r4, #0
 800812c:	d15d      	bne.n	80081ea <_dtoa_r+0x4fa>
 800812e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008132:	2200      	movs	r2, #0
 8008134:	4b5c      	ldr	r3, [pc, #368]	; (80082a8 <_dtoa_r+0x5b8>)
 8008136:	f7f8 f821 	bl	800017c <__aeabi_dsub>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008142:	4633      	mov	r3, r6
 8008144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008146:	f7f8 fc61 	bl	8000a0c <__aeabi_dcmpgt>
 800814a:	2800      	cmp	r0, #0
 800814c:	f040 829c 	bne.w	8008688 <_dtoa_r+0x998>
 8008150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008156:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800815a:	f7f8 fc39 	bl	80009d0 <__aeabi_dcmplt>
 800815e:	2800      	cmp	r0, #0
 8008160:	f040 8290 	bne.w	8008684 <_dtoa_r+0x994>
 8008164:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008168:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800816c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800816e:	2b00      	cmp	r3, #0
 8008170:	f2c0 8152 	blt.w	8008418 <_dtoa_r+0x728>
 8008174:	f1ba 0f0e 	cmp.w	sl, #14
 8008178:	f300 814e 	bgt.w	8008418 <_dtoa_r+0x728>
 800817c:	4b45      	ldr	r3, [pc, #276]	; (8008294 <_dtoa_r+0x5a4>)
 800817e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008182:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008186:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800818a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800818c:	2b00      	cmp	r3, #0
 800818e:	f280 80db 	bge.w	8008348 <_dtoa_r+0x658>
 8008192:	9b08      	ldr	r3, [sp, #32]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f300 80d7 	bgt.w	8008348 <_dtoa_r+0x658>
 800819a:	f040 8272 	bne.w	8008682 <_dtoa_r+0x992>
 800819e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081a2:	2200      	movs	r2, #0
 80081a4:	4b40      	ldr	r3, [pc, #256]	; (80082a8 <_dtoa_r+0x5b8>)
 80081a6:	f7f8 f9a1 	bl	80004ec <__aeabi_dmul>
 80081aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ae:	f7f8 fc23 	bl	80009f8 <__aeabi_dcmpge>
 80081b2:	9c08      	ldr	r4, [sp, #32]
 80081b4:	4626      	mov	r6, r4
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f040 8248 	bne.w	800864c <_dtoa_r+0x95c>
 80081bc:	2331      	movs	r3, #49	; 0x31
 80081be:	9f03      	ldr	r7, [sp, #12]
 80081c0:	f10a 0a01 	add.w	sl, sl, #1
 80081c4:	f807 3b01 	strb.w	r3, [r7], #1
 80081c8:	e244      	b.n	8008654 <_dtoa_r+0x964>
 80081ca:	07e2      	lsls	r2, r4, #31
 80081cc:	d505      	bpl.n	80081da <_dtoa_r+0x4ea>
 80081ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081d2:	f7f8 f98b 	bl	80004ec <__aeabi_dmul>
 80081d6:	2301      	movs	r3, #1
 80081d8:	3701      	adds	r7, #1
 80081da:	1064      	asrs	r4, r4, #1
 80081dc:	3608      	adds	r6, #8
 80081de:	e76d      	b.n	80080bc <_dtoa_r+0x3cc>
 80081e0:	2702      	movs	r7, #2
 80081e2:	e770      	b.n	80080c6 <_dtoa_r+0x3d6>
 80081e4:	46d0      	mov	r8, sl
 80081e6:	9c08      	ldr	r4, [sp, #32]
 80081e8:	e78f      	b.n	800810a <_dtoa_r+0x41a>
 80081ea:	9903      	ldr	r1, [sp, #12]
 80081ec:	4b29      	ldr	r3, [pc, #164]	; (8008294 <_dtoa_r+0x5a4>)
 80081ee:	4421      	add	r1, r4
 80081f0:	9112      	str	r1, [sp, #72]	; 0x48
 80081f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80081fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008200:	2900      	cmp	r1, #0
 8008202:	d055      	beq.n	80082b0 <_dtoa_r+0x5c0>
 8008204:	2000      	movs	r0, #0
 8008206:	4929      	ldr	r1, [pc, #164]	; (80082ac <_dtoa_r+0x5bc>)
 8008208:	f7f8 fa9a 	bl	8000740 <__aeabi_ddiv>
 800820c:	463b      	mov	r3, r7
 800820e:	4632      	mov	r2, r6
 8008210:	f7f7 ffb4 	bl	800017c <__aeabi_dsub>
 8008214:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008218:	9f03      	ldr	r7, [sp, #12]
 800821a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800821e:	f7f8 fc15 	bl	8000a4c <__aeabi_d2iz>
 8008222:	4604      	mov	r4, r0
 8008224:	f7f8 f8f8 	bl	8000418 <__aeabi_i2d>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008230:	f7f7 ffa4 	bl	800017c <__aeabi_dsub>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	3430      	adds	r4, #48	; 0x30
 800823a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800823e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008242:	f807 4b01 	strb.w	r4, [r7], #1
 8008246:	f7f8 fbc3 	bl	80009d0 <__aeabi_dcmplt>
 800824a:	2800      	cmp	r0, #0
 800824c:	d174      	bne.n	8008338 <_dtoa_r+0x648>
 800824e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008252:	2000      	movs	r0, #0
 8008254:	4911      	ldr	r1, [pc, #68]	; (800829c <_dtoa_r+0x5ac>)
 8008256:	f7f7 ff91 	bl	800017c <__aeabi_dsub>
 800825a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800825e:	f7f8 fbb7 	bl	80009d0 <__aeabi_dcmplt>
 8008262:	2800      	cmp	r0, #0
 8008264:	f040 80b7 	bne.w	80083d6 <_dtoa_r+0x6e6>
 8008268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800826a:	429f      	cmp	r7, r3
 800826c:	f43f af7a 	beq.w	8008164 <_dtoa_r+0x474>
 8008270:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008274:	2200      	movs	r2, #0
 8008276:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <_dtoa_r+0x5b0>)
 8008278:	f7f8 f938 	bl	80004ec <__aeabi_dmul>
 800827c:	2200      	movs	r2, #0
 800827e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <_dtoa_r+0x5b0>)
 8008288:	f7f8 f930 	bl	80004ec <__aeabi_dmul>
 800828c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008290:	e7c3      	b.n	800821a <_dtoa_r+0x52a>
 8008292:	bf00      	nop
 8008294:	0800afa8 	.word	0x0800afa8
 8008298:	0800af80 	.word	0x0800af80
 800829c:	3ff00000 	.word	0x3ff00000
 80082a0:	40240000 	.word	0x40240000
 80082a4:	401c0000 	.word	0x401c0000
 80082a8:	40140000 	.word	0x40140000
 80082ac:	3fe00000 	.word	0x3fe00000
 80082b0:	4630      	mov	r0, r6
 80082b2:	4639      	mov	r1, r7
 80082b4:	f7f8 f91a 	bl	80004ec <__aeabi_dmul>
 80082b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082be:	9c03      	ldr	r4, [sp, #12]
 80082c0:	9314      	str	r3, [sp, #80]	; 0x50
 80082c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c6:	f7f8 fbc1 	bl	8000a4c <__aeabi_d2iz>
 80082ca:	9015      	str	r0, [sp, #84]	; 0x54
 80082cc:	f7f8 f8a4 	bl	8000418 <__aeabi_i2d>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082d8:	f7f7 ff50 	bl	800017c <__aeabi_dsub>
 80082dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082de:	4606      	mov	r6, r0
 80082e0:	3330      	adds	r3, #48	; 0x30
 80082e2:	f804 3b01 	strb.w	r3, [r4], #1
 80082e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082e8:	460f      	mov	r7, r1
 80082ea:	429c      	cmp	r4, r3
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	d124      	bne.n	800833c <_dtoa_r+0x64c>
 80082f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082f6:	4bb0      	ldr	r3, [pc, #704]	; (80085b8 <_dtoa_r+0x8c8>)
 80082f8:	f7f7 ff42 	bl	8000180 <__adddf3>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4630      	mov	r0, r6
 8008302:	4639      	mov	r1, r7
 8008304:	f7f8 fb82 	bl	8000a0c <__aeabi_dcmpgt>
 8008308:	2800      	cmp	r0, #0
 800830a:	d163      	bne.n	80083d4 <_dtoa_r+0x6e4>
 800830c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008310:	2000      	movs	r0, #0
 8008312:	49a9      	ldr	r1, [pc, #676]	; (80085b8 <_dtoa_r+0x8c8>)
 8008314:	f7f7 ff32 	bl	800017c <__aeabi_dsub>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4630      	mov	r0, r6
 800831e:	4639      	mov	r1, r7
 8008320:	f7f8 fb56 	bl	80009d0 <__aeabi_dcmplt>
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f af1d 	beq.w	8008164 <_dtoa_r+0x474>
 800832a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800832c:	1e7b      	subs	r3, r7, #1
 800832e:	9314      	str	r3, [sp, #80]	; 0x50
 8008330:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d0f8      	beq.n	800832a <_dtoa_r+0x63a>
 8008338:	46c2      	mov	sl, r8
 800833a:	e03b      	b.n	80083b4 <_dtoa_r+0x6c4>
 800833c:	4b9f      	ldr	r3, [pc, #636]	; (80085bc <_dtoa_r+0x8cc>)
 800833e:	f7f8 f8d5 	bl	80004ec <__aeabi_dmul>
 8008342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008346:	e7bc      	b.n	80082c2 <_dtoa_r+0x5d2>
 8008348:	9f03      	ldr	r7, [sp, #12]
 800834a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800834e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	f7f8 f9f3 	bl	8000740 <__aeabi_ddiv>
 800835a:	f7f8 fb77 	bl	8000a4c <__aeabi_d2iz>
 800835e:	4604      	mov	r4, r0
 8008360:	f7f8 f85a 	bl	8000418 <__aeabi_i2d>
 8008364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008368:	f7f8 f8c0 	bl	80004ec <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4640      	mov	r0, r8
 8008372:	4649      	mov	r1, r9
 8008374:	f7f7 ff02 	bl	800017c <__aeabi_dsub>
 8008378:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800837c:	f807 6b01 	strb.w	r6, [r7], #1
 8008380:	9e03      	ldr	r6, [sp, #12]
 8008382:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008386:	1bbe      	subs	r6, r7, r6
 8008388:	45b4      	cmp	ip, r6
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	d136      	bne.n	80083fe <_dtoa_r+0x70e>
 8008390:	f7f7 fef6 	bl	8000180 <__adddf3>
 8008394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008398:	4680      	mov	r8, r0
 800839a:	4689      	mov	r9, r1
 800839c:	f7f8 fb36 	bl	8000a0c <__aeabi_dcmpgt>
 80083a0:	bb58      	cbnz	r0, 80083fa <_dtoa_r+0x70a>
 80083a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	f7f8 fb07 	bl	80009bc <__aeabi_dcmpeq>
 80083ae:	b108      	cbz	r0, 80083b4 <_dtoa_r+0x6c4>
 80083b0:	07e1      	lsls	r1, r4, #31
 80083b2:	d422      	bmi.n	80083fa <_dtoa_r+0x70a>
 80083b4:	4628      	mov	r0, r5
 80083b6:	4659      	mov	r1, fp
 80083b8:	f001 f884 	bl	80094c4 <_Bfree>
 80083bc:	2300      	movs	r3, #0
 80083be:	703b      	strb	r3, [r7, #0]
 80083c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80083c2:	f10a 0001 	add.w	r0, sl, #1
 80083c6:	6018      	str	r0, [r3, #0]
 80083c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f43f acde 	beq.w	8007d8c <_dtoa_r+0x9c>
 80083d0:	601f      	str	r7, [r3, #0]
 80083d2:	e4db      	b.n	8007d8c <_dtoa_r+0x9c>
 80083d4:	4627      	mov	r7, r4
 80083d6:	463b      	mov	r3, r7
 80083d8:	461f      	mov	r7, r3
 80083da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083de:	2a39      	cmp	r2, #57	; 0x39
 80083e0:	d107      	bne.n	80083f2 <_dtoa_r+0x702>
 80083e2:	9a03      	ldr	r2, [sp, #12]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d1f7      	bne.n	80083d8 <_dtoa_r+0x6e8>
 80083e8:	2230      	movs	r2, #48	; 0x30
 80083ea:	9903      	ldr	r1, [sp, #12]
 80083ec:	f108 0801 	add.w	r8, r8, #1
 80083f0:	700a      	strb	r2, [r1, #0]
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	3201      	adds	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e79e      	b.n	8008338 <_dtoa_r+0x648>
 80083fa:	46d0      	mov	r8, sl
 80083fc:	e7eb      	b.n	80083d6 <_dtoa_r+0x6e6>
 80083fe:	2200      	movs	r2, #0
 8008400:	4b6e      	ldr	r3, [pc, #440]	; (80085bc <_dtoa_r+0x8cc>)
 8008402:	f7f8 f873 	bl	80004ec <__aeabi_dmul>
 8008406:	2200      	movs	r2, #0
 8008408:	2300      	movs	r3, #0
 800840a:	4680      	mov	r8, r0
 800840c:	4689      	mov	r9, r1
 800840e:	f7f8 fad5 	bl	80009bc <__aeabi_dcmpeq>
 8008412:	2800      	cmp	r0, #0
 8008414:	d09b      	beq.n	800834e <_dtoa_r+0x65e>
 8008416:	e7cd      	b.n	80083b4 <_dtoa_r+0x6c4>
 8008418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800841a:	2a00      	cmp	r2, #0
 800841c:	f000 80d0 	beq.w	80085c0 <_dtoa_r+0x8d0>
 8008420:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008422:	2a01      	cmp	r2, #1
 8008424:	f300 80ae 	bgt.w	8008584 <_dtoa_r+0x894>
 8008428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800842a:	2a00      	cmp	r2, #0
 800842c:	f000 80a6 	beq.w	800857c <_dtoa_r+0x88c>
 8008430:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008434:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008436:	9f06      	ldr	r7, [sp, #24]
 8008438:	9a06      	ldr	r2, [sp, #24]
 800843a:	2101      	movs	r1, #1
 800843c:	441a      	add	r2, r3
 800843e:	9206      	str	r2, [sp, #24]
 8008440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008442:	4628      	mov	r0, r5
 8008444:	441a      	add	r2, r3
 8008446:	9209      	str	r2, [sp, #36]	; 0x24
 8008448:	f001 f93c 	bl	80096c4 <__i2b>
 800844c:	4606      	mov	r6, r0
 800844e:	2f00      	cmp	r7, #0
 8008450:	dd0c      	ble.n	800846c <_dtoa_r+0x77c>
 8008452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	dd09      	ble.n	800846c <_dtoa_r+0x77c>
 8008458:	42bb      	cmp	r3, r7
 800845a:	bfa8      	it	ge
 800845c:	463b      	movge	r3, r7
 800845e:	9a06      	ldr	r2, [sp, #24]
 8008460:	1aff      	subs	r7, r7, r3
 8008462:	1ad2      	subs	r2, r2, r3
 8008464:	9206      	str	r2, [sp, #24]
 8008466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846e:	b1f3      	cbz	r3, 80084ae <_dtoa_r+0x7be>
 8008470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80a8 	beq.w	80085c8 <_dtoa_r+0x8d8>
 8008478:	2c00      	cmp	r4, #0
 800847a:	dd10      	ble.n	800849e <_dtoa_r+0x7ae>
 800847c:	4631      	mov	r1, r6
 800847e:	4622      	mov	r2, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f001 f9dd 	bl	8009840 <__pow5mult>
 8008486:	465a      	mov	r2, fp
 8008488:	4601      	mov	r1, r0
 800848a:	4606      	mov	r6, r0
 800848c:	4628      	mov	r0, r5
 800848e:	f001 f92f 	bl	80096f0 <__multiply>
 8008492:	4680      	mov	r8, r0
 8008494:	4659      	mov	r1, fp
 8008496:	4628      	mov	r0, r5
 8008498:	f001 f814 	bl	80094c4 <_Bfree>
 800849c:	46c3      	mov	fp, r8
 800849e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a0:	1b1a      	subs	r2, r3, r4
 80084a2:	d004      	beq.n	80084ae <_dtoa_r+0x7be>
 80084a4:	4659      	mov	r1, fp
 80084a6:	4628      	mov	r0, r5
 80084a8:	f001 f9ca 	bl	8009840 <__pow5mult>
 80084ac:	4683      	mov	fp, r0
 80084ae:	2101      	movs	r1, #1
 80084b0:	4628      	mov	r0, r5
 80084b2:	f001 f907 	bl	80096c4 <__i2b>
 80084b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b8:	4604      	mov	r4, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f340 8086 	ble.w	80085cc <_dtoa_r+0x8dc>
 80084c0:	461a      	mov	r2, r3
 80084c2:	4601      	mov	r1, r0
 80084c4:	4628      	mov	r0, r5
 80084c6:	f001 f9bb 	bl	8009840 <__pow5mult>
 80084ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084cc:	4604      	mov	r4, r0
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	dd7f      	ble.n	80085d2 <_dtoa_r+0x8e2>
 80084d2:	f04f 0800 	mov.w	r8, #0
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084dc:	6918      	ldr	r0, [r3, #16]
 80084de:	f001 f8a3 	bl	8009628 <__hi0bits>
 80084e2:	f1c0 0020 	rsb	r0, r0, #32
 80084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e8:	4418      	add	r0, r3
 80084ea:	f010 001f 	ands.w	r0, r0, #31
 80084ee:	f000 8092 	beq.w	8008616 <_dtoa_r+0x926>
 80084f2:	f1c0 0320 	rsb	r3, r0, #32
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	f340 808a 	ble.w	8008610 <_dtoa_r+0x920>
 80084fc:	f1c0 001c 	rsb	r0, r0, #28
 8008500:	9b06      	ldr	r3, [sp, #24]
 8008502:	4407      	add	r7, r0
 8008504:	4403      	add	r3, r0
 8008506:	9306      	str	r3, [sp, #24]
 8008508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850a:	4403      	add	r3, r0
 800850c:	9309      	str	r3, [sp, #36]	; 0x24
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	2b00      	cmp	r3, #0
 8008512:	dd05      	ble.n	8008520 <_dtoa_r+0x830>
 8008514:	4659      	mov	r1, fp
 8008516:	461a      	mov	r2, r3
 8008518:	4628      	mov	r0, r5
 800851a:	f001 f9eb 	bl	80098f4 <__lshift>
 800851e:	4683      	mov	fp, r0
 8008520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008522:	2b00      	cmp	r3, #0
 8008524:	dd05      	ble.n	8008532 <_dtoa_r+0x842>
 8008526:	4621      	mov	r1, r4
 8008528:	461a      	mov	r2, r3
 800852a:	4628      	mov	r0, r5
 800852c:	f001 f9e2 	bl	80098f4 <__lshift>
 8008530:	4604      	mov	r4, r0
 8008532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d070      	beq.n	800861a <_dtoa_r+0x92a>
 8008538:	4621      	mov	r1, r4
 800853a:	4658      	mov	r0, fp
 800853c:	f001 fa4a 	bl	80099d4 <__mcmp>
 8008540:	2800      	cmp	r0, #0
 8008542:	da6a      	bge.n	800861a <_dtoa_r+0x92a>
 8008544:	2300      	movs	r3, #0
 8008546:	4659      	mov	r1, fp
 8008548:	220a      	movs	r2, #10
 800854a:	4628      	mov	r0, r5
 800854c:	f000 ffdc 	bl	8009508 <__multadd>
 8008550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008552:	4683      	mov	fp, r0
 8008554:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 8194 	beq.w	8008886 <_dtoa_r+0xb96>
 800855e:	4631      	mov	r1, r6
 8008560:	2300      	movs	r3, #0
 8008562:	220a      	movs	r2, #10
 8008564:	4628      	mov	r0, r5
 8008566:	f000 ffcf 	bl	8009508 <__multadd>
 800856a:	f1b9 0f00 	cmp.w	r9, #0
 800856e:	4606      	mov	r6, r0
 8008570:	f300 8093 	bgt.w	800869a <_dtoa_r+0x9aa>
 8008574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008576:	2b02      	cmp	r3, #2
 8008578:	dc57      	bgt.n	800862a <_dtoa_r+0x93a>
 800857a:	e08e      	b.n	800869a <_dtoa_r+0x9aa>
 800857c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800857e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008582:	e757      	b.n	8008434 <_dtoa_r+0x744>
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	1e5c      	subs	r4, r3, #1
 8008588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858a:	42a3      	cmp	r3, r4
 800858c:	bfb7      	itett	lt
 800858e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008590:	1b1c      	subge	r4, r3, r4
 8008592:	1ae2      	sublt	r2, r4, r3
 8008594:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008596:	bfbe      	ittt	lt
 8008598:	940a      	strlt	r4, [sp, #40]	; 0x28
 800859a:	189b      	addlt	r3, r3, r2
 800859c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800859e:	9b08      	ldr	r3, [sp, #32]
 80085a0:	bfb8      	it	lt
 80085a2:	2400      	movlt	r4, #0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bfbb      	ittet	lt
 80085a8:	9b06      	ldrlt	r3, [sp, #24]
 80085aa:	9a08      	ldrlt	r2, [sp, #32]
 80085ac:	9f06      	ldrge	r7, [sp, #24]
 80085ae:	1a9f      	sublt	r7, r3, r2
 80085b0:	bfac      	ite	ge
 80085b2:	9b08      	ldrge	r3, [sp, #32]
 80085b4:	2300      	movlt	r3, #0
 80085b6:	e73f      	b.n	8008438 <_dtoa_r+0x748>
 80085b8:	3fe00000 	.word	0x3fe00000
 80085bc:	40240000 	.word	0x40240000
 80085c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085c2:	9f06      	ldr	r7, [sp, #24]
 80085c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80085c6:	e742      	b.n	800844e <_dtoa_r+0x75e>
 80085c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ca:	e76b      	b.n	80084a4 <_dtoa_r+0x7b4>
 80085cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	dc19      	bgt.n	8008606 <_dtoa_r+0x916>
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	b9bb      	cbnz	r3, 8008606 <_dtoa_r+0x916>
 80085d6:	9b05      	ldr	r3, [sp, #20]
 80085d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085dc:	b99b      	cbnz	r3, 8008606 <_dtoa_r+0x916>
 80085de:	9b05      	ldr	r3, [sp, #20]
 80085e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085e4:	0d1b      	lsrs	r3, r3, #20
 80085e6:	051b      	lsls	r3, r3, #20
 80085e8:	b183      	cbz	r3, 800860c <_dtoa_r+0x91c>
 80085ea:	f04f 0801 	mov.w	r8, #1
 80085ee:	9b06      	ldr	r3, [sp, #24]
 80085f0:	3301      	adds	r3, #1
 80085f2:	9306      	str	r3, [sp, #24]
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	3301      	adds	r3, #1
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f47f af6a 	bne.w	80084d6 <_dtoa_r+0x7e6>
 8008602:	2001      	movs	r0, #1
 8008604:	e76f      	b.n	80084e6 <_dtoa_r+0x7f6>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	e7f6      	b.n	80085fa <_dtoa_r+0x90a>
 800860c:	4698      	mov	r8, r3
 800860e:	e7f4      	b.n	80085fa <_dtoa_r+0x90a>
 8008610:	f43f af7d 	beq.w	800850e <_dtoa_r+0x81e>
 8008614:	4618      	mov	r0, r3
 8008616:	301c      	adds	r0, #28
 8008618:	e772      	b.n	8008500 <_dtoa_r+0x810>
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dc36      	bgt.n	800868e <_dtoa_r+0x99e>
 8008620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008622:	2b02      	cmp	r3, #2
 8008624:	dd33      	ble.n	800868e <_dtoa_r+0x99e>
 8008626:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800862a:	f1b9 0f00 	cmp.w	r9, #0
 800862e:	d10d      	bne.n	800864c <_dtoa_r+0x95c>
 8008630:	4621      	mov	r1, r4
 8008632:	464b      	mov	r3, r9
 8008634:	2205      	movs	r2, #5
 8008636:	4628      	mov	r0, r5
 8008638:	f000 ff66 	bl	8009508 <__multadd>
 800863c:	4601      	mov	r1, r0
 800863e:	4604      	mov	r4, r0
 8008640:	4658      	mov	r0, fp
 8008642:	f001 f9c7 	bl	80099d4 <__mcmp>
 8008646:	2800      	cmp	r0, #0
 8008648:	f73f adb8 	bgt.w	80081bc <_dtoa_r+0x4cc>
 800864c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800864e:	9f03      	ldr	r7, [sp, #12]
 8008650:	ea6f 0a03 	mvn.w	sl, r3
 8008654:	f04f 0800 	mov.w	r8, #0
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 ff32 	bl	80094c4 <_Bfree>
 8008660:	2e00      	cmp	r6, #0
 8008662:	f43f aea7 	beq.w	80083b4 <_dtoa_r+0x6c4>
 8008666:	f1b8 0f00 	cmp.w	r8, #0
 800866a:	d005      	beq.n	8008678 <_dtoa_r+0x988>
 800866c:	45b0      	cmp	r8, r6
 800866e:	d003      	beq.n	8008678 <_dtoa_r+0x988>
 8008670:	4641      	mov	r1, r8
 8008672:	4628      	mov	r0, r5
 8008674:	f000 ff26 	bl	80094c4 <_Bfree>
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	f000 ff22 	bl	80094c4 <_Bfree>
 8008680:	e698      	b.n	80083b4 <_dtoa_r+0x6c4>
 8008682:	2400      	movs	r4, #0
 8008684:	4626      	mov	r6, r4
 8008686:	e7e1      	b.n	800864c <_dtoa_r+0x95c>
 8008688:	46c2      	mov	sl, r8
 800868a:	4626      	mov	r6, r4
 800868c:	e596      	b.n	80081bc <_dtoa_r+0x4cc>
 800868e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 80fd 	beq.w	8008894 <_dtoa_r+0xba4>
 800869a:	2f00      	cmp	r7, #0
 800869c:	dd05      	ble.n	80086aa <_dtoa_r+0x9ba>
 800869e:	4631      	mov	r1, r6
 80086a0:	463a      	mov	r2, r7
 80086a2:	4628      	mov	r0, r5
 80086a4:	f001 f926 	bl	80098f4 <__lshift>
 80086a8:	4606      	mov	r6, r0
 80086aa:	f1b8 0f00 	cmp.w	r8, #0
 80086ae:	d05c      	beq.n	800876a <_dtoa_r+0xa7a>
 80086b0:	4628      	mov	r0, r5
 80086b2:	6871      	ldr	r1, [r6, #4]
 80086b4:	f000 fec6 	bl	8009444 <_Balloc>
 80086b8:	4607      	mov	r7, r0
 80086ba:	b928      	cbnz	r0, 80086c8 <_dtoa_r+0x9d8>
 80086bc:	4602      	mov	r2, r0
 80086be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086c2:	4b7f      	ldr	r3, [pc, #508]	; (80088c0 <_dtoa_r+0xbd0>)
 80086c4:	f7ff bb28 	b.w	8007d18 <_dtoa_r+0x28>
 80086c8:	6932      	ldr	r2, [r6, #16]
 80086ca:	f106 010c 	add.w	r1, r6, #12
 80086ce:	3202      	adds	r2, #2
 80086d0:	0092      	lsls	r2, r2, #2
 80086d2:	300c      	adds	r0, #12
 80086d4:	f000 fea8 	bl	8009428 <memcpy>
 80086d8:	2201      	movs	r2, #1
 80086da:	4639      	mov	r1, r7
 80086dc:	4628      	mov	r0, r5
 80086de:	f001 f909 	bl	80098f4 <__lshift>
 80086e2:	46b0      	mov	r8, r6
 80086e4:	4606      	mov	r6, r0
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	9308      	str	r3, [sp, #32]
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	444b      	add	r3, r9
 80086f0:	930a      	str	r3, [sp, #40]	; 0x28
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	9309      	str	r3, [sp, #36]	; 0x24
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	4621      	mov	r1, r4
 80086fe:	3b01      	subs	r3, #1
 8008700:	4658      	mov	r0, fp
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	f7ff fa66 	bl	8007bd4 <quorem>
 8008708:	4603      	mov	r3, r0
 800870a:	4641      	mov	r1, r8
 800870c:	3330      	adds	r3, #48	; 0x30
 800870e:	9006      	str	r0, [sp, #24]
 8008710:	4658      	mov	r0, fp
 8008712:	930b      	str	r3, [sp, #44]	; 0x2c
 8008714:	f001 f95e 	bl	80099d4 <__mcmp>
 8008718:	4632      	mov	r2, r6
 800871a:	4681      	mov	r9, r0
 800871c:	4621      	mov	r1, r4
 800871e:	4628      	mov	r0, r5
 8008720:	f001 f974 	bl	8009a0c <__mdiff>
 8008724:	68c2      	ldr	r2, [r0, #12]
 8008726:	4607      	mov	r7, r0
 8008728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872a:	bb02      	cbnz	r2, 800876e <_dtoa_r+0xa7e>
 800872c:	4601      	mov	r1, r0
 800872e:	4658      	mov	r0, fp
 8008730:	f001 f950 	bl	80099d4 <__mcmp>
 8008734:	4602      	mov	r2, r0
 8008736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008738:	4639      	mov	r1, r7
 800873a:	4628      	mov	r0, r5
 800873c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008740:	f000 fec0 	bl	80094c4 <_Bfree>
 8008744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008748:	9f08      	ldr	r7, [sp, #32]
 800874a:	ea43 0102 	orr.w	r1, r3, r2
 800874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008750:	430b      	orrs	r3, r1
 8008752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008754:	d10d      	bne.n	8008772 <_dtoa_r+0xa82>
 8008756:	2b39      	cmp	r3, #57	; 0x39
 8008758:	d029      	beq.n	80087ae <_dtoa_r+0xabe>
 800875a:	f1b9 0f00 	cmp.w	r9, #0
 800875e:	dd01      	ble.n	8008764 <_dtoa_r+0xa74>
 8008760:	9b06      	ldr	r3, [sp, #24]
 8008762:	3331      	adds	r3, #49	; 0x31
 8008764:	9a04      	ldr	r2, [sp, #16]
 8008766:	7013      	strb	r3, [r2, #0]
 8008768:	e776      	b.n	8008658 <_dtoa_r+0x968>
 800876a:	4630      	mov	r0, r6
 800876c:	e7b9      	b.n	80086e2 <_dtoa_r+0x9f2>
 800876e:	2201      	movs	r2, #1
 8008770:	e7e2      	b.n	8008738 <_dtoa_r+0xa48>
 8008772:	f1b9 0f00 	cmp.w	r9, #0
 8008776:	db06      	blt.n	8008786 <_dtoa_r+0xa96>
 8008778:	9922      	ldr	r1, [sp, #136]	; 0x88
 800877a:	ea41 0909 	orr.w	r9, r1, r9
 800877e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008780:	ea59 0101 	orrs.w	r1, r9, r1
 8008784:	d120      	bne.n	80087c8 <_dtoa_r+0xad8>
 8008786:	2a00      	cmp	r2, #0
 8008788:	ddec      	ble.n	8008764 <_dtoa_r+0xa74>
 800878a:	4659      	mov	r1, fp
 800878c:	2201      	movs	r2, #1
 800878e:	4628      	mov	r0, r5
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	f001 f8af 	bl	80098f4 <__lshift>
 8008796:	4621      	mov	r1, r4
 8008798:	4683      	mov	fp, r0
 800879a:	f001 f91b 	bl	80099d4 <__mcmp>
 800879e:	2800      	cmp	r0, #0
 80087a0:	9b08      	ldr	r3, [sp, #32]
 80087a2:	dc02      	bgt.n	80087aa <_dtoa_r+0xaba>
 80087a4:	d1de      	bne.n	8008764 <_dtoa_r+0xa74>
 80087a6:	07da      	lsls	r2, r3, #31
 80087a8:	d5dc      	bpl.n	8008764 <_dtoa_r+0xa74>
 80087aa:	2b39      	cmp	r3, #57	; 0x39
 80087ac:	d1d8      	bne.n	8008760 <_dtoa_r+0xa70>
 80087ae:	2339      	movs	r3, #57	; 0x39
 80087b0:	9a04      	ldr	r2, [sp, #16]
 80087b2:	7013      	strb	r3, [r2, #0]
 80087b4:	463b      	mov	r3, r7
 80087b6:	461f      	mov	r7, r3
 80087b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80087bc:	3b01      	subs	r3, #1
 80087be:	2a39      	cmp	r2, #57	; 0x39
 80087c0:	d050      	beq.n	8008864 <_dtoa_r+0xb74>
 80087c2:	3201      	adds	r2, #1
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	e747      	b.n	8008658 <_dtoa_r+0x968>
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	dd03      	ble.n	80087d4 <_dtoa_r+0xae4>
 80087cc:	2b39      	cmp	r3, #57	; 0x39
 80087ce:	d0ee      	beq.n	80087ae <_dtoa_r+0xabe>
 80087d0:	3301      	adds	r3, #1
 80087d2:	e7c7      	b.n	8008764 <_dtoa_r+0xa74>
 80087d4:	9a08      	ldr	r2, [sp, #32]
 80087d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087dc:	428a      	cmp	r2, r1
 80087de:	d02a      	beq.n	8008836 <_dtoa_r+0xb46>
 80087e0:	4659      	mov	r1, fp
 80087e2:	2300      	movs	r3, #0
 80087e4:	220a      	movs	r2, #10
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 fe8e 	bl	8009508 <__multadd>
 80087ec:	45b0      	cmp	r8, r6
 80087ee:	4683      	mov	fp, r0
 80087f0:	f04f 0300 	mov.w	r3, #0
 80087f4:	f04f 020a 	mov.w	r2, #10
 80087f8:	4641      	mov	r1, r8
 80087fa:	4628      	mov	r0, r5
 80087fc:	d107      	bne.n	800880e <_dtoa_r+0xb1e>
 80087fe:	f000 fe83 	bl	8009508 <__multadd>
 8008802:	4680      	mov	r8, r0
 8008804:	4606      	mov	r6, r0
 8008806:	9b08      	ldr	r3, [sp, #32]
 8008808:	3301      	adds	r3, #1
 800880a:	9308      	str	r3, [sp, #32]
 800880c:	e775      	b.n	80086fa <_dtoa_r+0xa0a>
 800880e:	f000 fe7b 	bl	8009508 <__multadd>
 8008812:	4631      	mov	r1, r6
 8008814:	4680      	mov	r8, r0
 8008816:	2300      	movs	r3, #0
 8008818:	220a      	movs	r2, #10
 800881a:	4628      	mov	r0, r5
 800881c:	f000 fe74 	bl	8009508 <__multadd>
 8008820:	4606      	mov	r6, r0
 8008822:	e7f0      	b.n	8008806 <_dtoa_r+0xb16>
 8008824:	f1b9 0f00 	cmp.w	r9, #0
 8008828:	bfcc      	ite	gt
 800882a:	464f      	movgt	r7, r9
 800882c:	2701      	movle	r7, #1
 800882e:	f04f 0800 	mov.w	r8, #0
 8008832:	9a03      	ldr	r2, [sp, #12]
 8008834:	4417      	add	r7, r2
 8008836:	4659      	mov	r1, fp
 8008838:	2201      	movs	r2, #1
 800883a:	4628      	mov	r0, r5
 800883c:	9308      	str	r3, [sp, #32]
 800883e:	f001 f859 	bl	80098f4 <__lshift>
 8008842:	4621      	mov	r1, r4
 8008844:	4683      	mov	fp, r0
 8008846:	f001 f8c5 	bl	80099d4 <__mcmp>
 800884a:	2800      	cmp	r0, #0
 800884c:	dcb2      	bgt.n	80087b4 <_dtoa_r+0xac4>
 800884e:	d102      	bne.n	8008856 <_dtoa_r+0xb66>
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	07db      	lsls	r3, r3, #31
 8008854:	d4ae      	bmi.n	80087b4 <_dtoa_r+0xac4>
 8008856:	463b      	mov	r3, r7
 8008858:	461f      	mov	r7, r3
 800885a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885e:	2a30      	cmp	r2, #48	; 0x30
 8008860:	d0fa      	beq.n	8008858 <_dtoa_r+0xb68>
 8008862:	e6f9      	b.n	8008658 <_dtoa_r+0x968>
 8008864:	9a03      	ldr	r2, [sp, #12]
 8008866:	429a      	cmp	r2, r3
 8008868:	d1a5      	bne.n	80087b6 <_dtoa_r+0xac6>
 800886a:	2331      	movs	r3, #49	; 0x31
 800886c:	f10a 0a01 	add.w	sl, sl, #1
 8008870:	e779      	b.n	8008766 <_dtoa_r+0xa76>
 8008872:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <_dtoa_r+0xbd4>)
 8008874:	f7ff baa8 	b.w	8007dc8 <_dtoa_r+0xd8>
 8008878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800887a:	2b00      	cmp	r3, #0
 800887c:	f47f aa81 	bne.w	8007d82 <_dtoa_r+0x92>
 8008880:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <_dtoa_r+0xbd8>)
 8008882:	f7ff baa1 	b.w	8007dc8 <_dtoa_r+0xd8>
 8008886:	f1b9 0f00 	cmp.w	r9, #0
 800888a:	dc03      	bgt.n	8008894 <_dtoa_r+0xba4>
 800888c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800888e:	2b02      	cmp	r3, #2
 8008890:	f73f aecb 	bgt.w	800862a <_dtoa_r+0x93a>
 8008894:	9f03      	ldr	r7, [sp, #12]
 8008896:	4621      	mov	r1, r4
 8008898:	4658      	mov	r0, fp
 800889a:	f7ff f99b 	bl	8007bd4 <quorem>
 800889e:	9a03      	ldr	r2, [sp, #12]
 80088a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088a4:	f807 3b01 	strb.w	r3, [r7], #1
 80088a8:	1aba      	subs	r2, r7, r2
 80088aa:	4591      	cmp	r9, r2
 80088ac:	ddba      	ble.n	8008824 <_dtoa_r+0xb34>
 80088ae:	4659      	mov	r1, fp
 80088b0:	2300      	movs	r3, #0
 80088b2:	220a      	movs	r2, #10
 80088b4:	4628      	mov	r0, r5
 80088b6:	f000 fe27 	bl	8009508 <__multadd>
 80088ba:	4683      	mov	fp, r0
 80088bc:	e7eb      	b.n	8008896 <_dtoa_r+0xba6>
 80088be:	bf00      	nop
 80088c0:	0800ae30 	.word	0x0800ae30
 80088c4:	0800ac34 	.word	0x0800ac34
 80088c8:	0800adb1 	.word	0x0800adb1

080088cc <__sflush_r>:
 80088cc:	898a      	ldrh	r2, [r1, #12]
 80088ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d0:	4605      	mov	r5, r0
 80088d2:	0710      	lsls	r0, r2, #28
 80088d4:	460c      	mov	r4, r1
 80088d6:	d457      	bmi.n	8008988 <__sflush_r+0xbc>
 80088d8:	684b      	ldr	r3, [r1, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dc04      	bgt.n	80088e8 <__sflush_r+0x1c>
 80088de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	dc01      	bgt.n	80088e8 <__sflush_r+0x1c>
 80088e4:	2000      	movs	r0, #0
 80088e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ea:	2e00      	cmp	r6, #0
 80088ec:	d0fa      	beq.n	80088e4 <__sflush_r+0x18>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088f4:	682f      	ldr	r7, [r5, #0]
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	d032      	beq.n	8008960 <__sflush_r+0x94>
 80088fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	075a      	lsls	r2, r3, #29
 8008900:	d505      	bpl.n	800890e <__sflush_r+0x42>
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	1ac0      	subs	r0, r0, r3
 8008906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008908:	b10b      	cbz	r3, 800890e <__sflush_r+0x42>
 800890a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800890c:	1ac0      	subs	r0, r0, r3
 800890e:	2300      	movs	r3, #0
 8008910:	4602      	mov	r2, r0
 8008912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008914:	4628      	mov	r0, r5
 8008916:	6a21      	ldr	r1, [r4, #32]
 8008918:	47b0      	blx	r6
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	d106      	bne.n	800892e <__sflush_r+0x62>
 8008920:	6829      	ldr	r1, [r5, #0]
 8008922:	291d      	cmp	r1, #29
 8008924:	d82c      	bhi.n	8008980 <__sflush_r+0xb4>
 8008926:	4a29      	ldr	r2, [pc, #164]	; (80089cc <__sflush_r+0x100>)
 8008928:	40ca      	lsrs	r2, r1
 800892a:	07d6      	lsls	r6, r2, #31
 800892c:	d528      	bpl.n	8008980 <__sflush_r+0xb4>
 800892e:	2200      	movs	r2, #0
 8008930:	6062      	str	r2, [r4, #4]
 8008932:	6922      	ldr	r2, [r4, #16]
 8008934:	04d9      	lsls	r1, r3, #19
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	d504      	bpl.n	8008944 <__sflush_r+0x78>
 800893a:	1c42      	adds	r2, r0, #1
 800893c:	d101      	bne.n	8008942 <__sflush_r+0x76>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	b903      	cbnz	r3, 8008944 <__sflush_r+0x78>
 8008942:	6560      	str	r0, [r4, #84]	; 0x54
 8008944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008946:	602f      	str	r7, [r5, #0]
 8008948:	2900      	cmp	r1, #0
 800894a:	d0cb      	beq.n	80088e4 <__sflush_r+0x18>
 800894c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008950:	4299      	cmp	r1, r3
 8008952:	d002      	beq.n	800895a <__sflush_r+0x8e>
 8008954:	4628      	mov	r0, r5
 8008956:	f001 fa41 	bl	8009ddc <_free_r>
 800895a:	2000      	movs	r0, #0
 800895c:	6360      	str	r0, [r4, #52]	; 0x34
 800895e:	e7c2      	b.n	80088e6 <__sflush_r+0x1a>
 8008960:	6a21      	ldr	r1, [r4, #32]
 8008962:	2301      	movs	r3, #1
 8008964:	4628      	mov	r0, r5
 8008966:	47b0      	blx	r6
 8008968:	1c41      	adds	r1, r0, #1
 800896a:	d1c7      	bne.n	80088fc <__sflush_r+0x30>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d0c4      	beq.n	80088fc <__sflush_r+0x30>
 8008972:	2b1d      	cmp	r3, #29
 8008974:	d001      	beq.n	800897a <__sflush_r+0xae>
 8008976:	2b16      	cmp	r3, #22
 8008978:	d101      	bne.n	800897e <__sflush_r+0xb2>
 800897a:	602f      	str	r7, [r5, #0]
 800897c:	e7b2      	b.n	80088e4 <__sflush_r+0x18>
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	e7ae      	b.n	80088e6 <__sflush_r+0x1a>
 8008988:	690f      	ldr	r7, [r1, #16]
 800898a:	2f00      	cmp	r7, #0
 800898c:	d0aa      	beq.n	80088e4 <__sflush_r+0x18>
 800898e:	0793      	lsls	r3, r2, #30
 8008990:	bf18      	it	ne
 8008992:	2300      	movne	r3, #0
 8008994:	680e      	ldr	r6, [r1, #0]
 8008996:	bf08      	it	eq
 8008998:	694b      	ldreq	r3, [r1, #20]
 800899a:	1bf6      	subs	r6, r6, r7
 800899c:	600f      	str	r7, [r1, #0]
 800899e:	608b      	str	r3, [r1, #8]
 80089a0:	2e00      	cmp	r6, #0
 80089a2:	dd9f      	ble.n	80088e4 <__sflush_r+0x18>
 80089a4:	4633      	mov	r3, r6
 80089a6:	463a      	mov	r2, r7
 80089a8:	4628      	mov	r0, r5
 80089aa:	6a21      	ldr	r1, [r4, #32]
 80089ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80089b0:	47e0      	blx	ip
 80089b2:	2800      	cmp	r0, #0
 80089b4:	dc06      	bgt.n	80089c4 <__sflush_r+0xf8>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	e790      	b.n	80088e6 <__sflush_r+0x1a>
 80089c4:	4407      	add	r7, r0
 80089c6:	1a36      	subs	r6, r6, r0
 80089c8:	e7ea      	b.n	80089a0 <__sflush_r+0xd4>
 80089ca:	bf00      	nop
 80089cc:	20400001 	.word	0x20400001

080089d0 <_fflush_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	690b      	ldr	r3, [r1, #16]
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	b913      	cbnz	r3, 80089e0 <_fflush_r+0x10>
 80089da:	2500      	movs	r5, #0
 80089dc:	4628      	mov	r0, r5
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	b118      	cbz	r0, 80089ea <_fflush_r+0x1a>
 80089e2:	6983      	ldr	r3, [r0, #24]
 80089e4:	b90b      	cbnz	r3, 80089ea <_fflush_r+0x1a>
 80089e6:	f000 f887 	bl	8008af8 <__sinit>
 80089ea:	4b14      	ldr	r3, [pc, #80]	; (8008a3c <_fflush_r+0x6c>)
 80089ec:	429c      	cmp	r4, r3
 80089ee:	d11b      	bne.n	8008a28 <_fflush_r+0x58>
 80089f0:	686c      	ldr	r4, [r5, #4]
 80089f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ef      	beq.n	80089da <_fflush_r+0xa>
 80089fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089fc:	07d0      	lsls	r0, r2, #31
 80089fe:	d404      	bmi.n	8008a0a <_fflush_r+0x3a>
 8008a00:	0599      	lsls	r1, r3, #22
 8008a02:	d402      	bmi.n	8008a0a <_fflush_r+0x3a>
 8008a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a06:	f000 fc80 	bl	800930a <__retarget_lock_acquire_recursive>
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	f7ff ff5d 	bl	80088cc <__sflush_r>
 8008a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a14:	4605      	mov	r5, r0
 8008a16:	07da      	lsls	r2, r3, #31
 8008a18:	d4e0      	bmi.n	80089dc <_fflush_r+0xc>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	059b      	lsls	r3, r3, #22
 8008a1e:	d4dd      	bmi.n	80089dc <_fflush_r+0xc>
 8008a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a22:	f000 fc73 	bl	800930c <__retarget_lock_release_recursive>
 8008a26:	e7d9      	b.n	80089dc <_fflush_r+0xc>
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <_fflush_r+0x70>)
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	d101      	bne.n	8008a32 <_fflush_r+0x62>
 8008a2e:	68ac      	ldr	r4, [r5, #8]
 8008a30:	e7df      	b.n	80089f2 <_fflush_r+0x22>
 8008a32:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <_fflush_r+0x74>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	bf08      	it	eq
 8008a38:	68ec      	ldreq	r4, [r5, #12]
 8008a3a:	e7da      	b.n	80089f2 <_fflush_r+0x22>
 8008a3c:	0800ae64 	.word	0x0800ae64
 8008a40:	0800ae84 	.word	0x0800ae84
 8008a44:	0800ae44 	.word	0x0800ae44

08008a48 <std>:
 8008a48:	2300      	movs	r3, #0
 8008a4a:	b510      	push	{r4, lr}
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a56:	6083      	str	r3, [r0, #8]
 8008a58:	8181      	strh	r1, [r0, #12]
 8008a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a5c:	81c2      	strh	r2, [r0, #14]
 8008a5e:	6183      	str	r3, [r0, #24]
 8008a60:	4619      	mov	r1, r3
 8008a62:	2208      	movs	r2, #8
 8008a64:	305c      	adds	r0, #92	; 0x5c
 8008a66:	f7fd fa0f 	bl	8005e88 <memset>
 8008a6a:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <std+0x38>)
 8008a6c:	6224      	str	r4, [r4, #32]
 8008a6e:	6263      	str	r3, [r4, #36]	; 0x24
 8008a70:	4b04      	ldr	r3, [pc, #16]	; (8008a84 <std+0x3c>)
 8008a72:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a74:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <std+0x40>)
 8008a76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <std+0x44>)
 8008a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a7c:	bd10      	pop	{r4, pc}
 8008a7e:	bf00      	nop
 8008a80:	0800a5b9 	.word	0x0800a5b9
 8008a84:	0800a5db 	.word	0x0800a5db
 8008a88:	0800a613 	.word	0x0800a613
 8008a8c:	0800a637 	.word	0x0800a637

08008a90 <_cleanup_r>:
 8008a90:	4901      	ldr	r1, [pc, #4]	; (8008a98 <_cleanup_r+0x8>)
 8008a92:	f000 b8af 	b.w	8008bf4 <_fwalk_reent>
 8008a96:	bf00      	nop
 8008a98:	080089d1 	.word	0x080089d1

08008a9c <__sfmoreglue>:
 8008a9c:	2268      	movs	r2, #104	; 0x68
 8008a9e:	b570      	push	{r4, r5, r6, lr}
 8008aa0:	1e4d      	subs	r5, r1, #1
 8008aa2:	4355      	muls	r5, r2
 8008aa4:	460e      	mov	r6, r1
 8008aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008aaa:	f001 f9ff 	bl	8009eac <_malloc_r>
 8008aae:	4604      	mov	r4, r0
 8008ab0:	b140      	cbz	r0, 8008ac4 <__sfmoreglue+0x28>
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ab8:	300c      	adds	r0, #12
 8008aba:	60a0      	str	r0, [r4, #8]
 8008abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ac0:	f7fd f9e2 	bl	8005e88 <memset>
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}

08008ac8 <__sfp_lock_acquire>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <__sfp_lock_acquire+0x8>)
 8008aca:	f000 bc1e 	b.w	800930a <__retarget_lock_acquire_recursive>
 8008ace:	bf00      	nop
 8008ad0:	20000569 	.word	0x20000569

08008ad4 <__sfp_lock_release>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__sfp_lock_release+0x8>)
 8008ad6:	f000 bc19 	b.w	800930c <__retarget_lock_release_recursive>
 8008ada:	bf00      	nop
 8008adc:	20000569 	.word	0x20000569

08008ae0 <__sinit_lock_acquire>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__sinit_lock_acquire+0x8>)
 8008ae2:	f000 bc12 	b.w	800930a <__retarget_lock_acquire_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	2000056a 	.word	0x2000056a

08008aec <__sinit_lock_release>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__sinit_lock_release+0x8>)
 8008aee:	f000 bc0d 	b.w	800930c <__retarget_lock_release_recursive>
 8008af2:	bf00      	nop
 8008af4:	2000056a 	.word	0x2000056a

08008af8 <__sinit>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	4604      	mov	r4, r0
 8008afc:	f7ff fff0 	bl	8008ae0 <__sinit_lock_acquire>
 8008b00:	69a3      	ldr	r3, [r4, #24]
 8008b02:	b11b      	cbz	r3, 8008b0c <__sinit+0x14>
 8008b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b08:	f7ff bff0 	b.w	8008aec <__sinit_lock_release>
 8008b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b10:	6523      	str	r3, [r4, #80]	; 0x50
 8008b12:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <__sinit+0x68>)
 8008b14:	4a13      	ldr	r2, [pc, #76]	; (8008b64 <__sinit+0x6c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b1a:	42a3      	cmp	r3, r4
 8008b1c:	bf08      	it	eq
 8008b1e:	2301      	moveq	r3, #1
 8008b20:	4620      	mov	r0, r4
 8008b22:	bf08      	it	eq
 8008b24:	61a3      	streq	r3, [r4, #24]
 8008b26:	f000 f81f 	bl	8008b68 <__sfp>
 8008b2a:	6060      	str	r0, [r4, #4]
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 f81b 	bl	8008b68 <__sfp>
 8008b32:	60a0      	str	r0, [r4, #8]
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 f817 	bl	8008b68 <__sfp>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2104      	movs	r1, #4
 8008b3e:	60e0      	str	r0, [r4, #12]
 8008b40:	6860      	ldr	r0, [r4, #4]
 8008b42:	f7ff ff81 	bl	8008a48 <std>
 8008b46:	2201      	movs	r2, #1
 8008b48:	2109      	movs	r1, #9
 8008b4a:	68a0      	ldr	r0, [r4, #8]
 8008b4c:	f7ff ff7c 	bl	8008a48 <std>
 8008b50:	2202      	movs	r2, #2
 8008b52:	2112      	movs	r1, #18
 8008b54:	68e0      	ldr	r0, [r4, #12]
 8008b56:	f7ff ff77 	bl	8008a48 <std>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	61a3      	str	r3, [r4, #24]
 8008b5e:	e7d1      	b.n	8008b04 <__sinit+0xc>
 8008b60:	0800ac20 	.word	0x0800ac20
 8008b64:	08008a91 	.word	0x08008a91

08008b68 <__sfp>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	4607      	mov	r7, r0
 8008b6c:	f7ff ffac 	bl	8008ac8 <__sfp_lock_acquire>
 8008b70:	4b1e      	ldr	r3, [pc, #120]	; (8008bec <__sfp+0x84>)
 8008b72:	681e      	ldr	r6, [r3, #0]
 8008b74:	69b3      	ldr	r3, [r6, #24]
 8008b76:	b913      	cbnz	r3, 8008b7e <__sfp+0x16>
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7ff ffbd 	bl	8008af8 <__sinit>
 8008b7e:	3648      	adds	r6, #72	; 0x48
 8008b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	d503      	bpl.n	8008b90 <__sfp+0x28>
 8008b88:	6833      	ldr	r3, [r6, #0]
 8008b8a:	b30b      	cbz	r3, 8008bd0 <__sfp+0x68>
 8008b8c:	6836      	ldr	r6, [r6, #0]
 8008b8e:	e7f7      	b.n	8008b80 <__sfp+0x18>
 8008b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b94:	b9d5      	cbnz	r5, 8008bcc <__sfp+0x64>
 8008b96:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <__sfp+0x88>)
 8008b98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b9c:	60e3      	str	r3, [r4, #12]
 8008b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8008ba0:	f000 fbb2 	bl	8009308 <__retarget_lock_init_recursive>
 8008ba4:	f7ff ff96 	bl	8008ad4 <__sfp_lock_release>
 8008ba8:	2208      	movs	r2, #8
 8008baa:	4629      	mov	r1, r5
 8008bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bb4:	6025      	str	r5, [r4, #0]
 8008bb6:	61a5      	str	r5, [r4, #24]
 8008bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bbc:	f7fd f964 	bl	8005e88 <memset>
 8008bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bc8:	4620      	mov	r0, r4
 8008bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bcc:	3468      	adds	r4, #104	; 0x68
 8008bce:	e7d9      	b.n	8008b84 <__sfp+0x1c>
 8008bd0:	2104      	movs	r1, #4
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	f7ff ff62 	bl	8008a9c <__sfmoreglue>
 8008bd8:	4604      	mov	r4, r0
 8008bda:	6030      	str	r0, [r6, #0]
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d1d5      	bne.n	8008b8c <__sfp+0x24>
 8008be0:	f7ff ff78 	bl	8008ad4 <__sfp_lock_release>
 8008be4:	230c      	movs	r3, #12
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	e7ee      	b.n	8008bc8 <__sfp+0x60>
 8008bea:	bf00      	nop
 8008bec:	0800ac20 	.word	0x0800ac20
 8008bf0:	ffff0001 	.word	0xffff0001

08008bf4 <_fwalk_reent>:
 8008bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	4688      	mov	r8, r1
 8008bfc:	2700      	movs	r7, #0
 8008bfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c06:	f1b9 0901 	subs.w	r9, r9, #1
 8008c0a:	d505      	bpl.n	8008c18 <_fwalk_reent+0x24>
 8008c0c:	6824      	ldr	r4, [r4, #0]
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d1f7      	bne.n	8008c02 <_fwalk_reent+0xe>
 8008c12:	4638      	mov	r0, r7
 8008c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c18:	89ab      	ldrh	r3, [r5, #12]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d907      	bls.n	8008c2e <_fwalk_reent+0x3a>
 8008c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c22:	3301      	adds	r3, #1
 8008c24:	d003      	beq.n	8008c2e <_fwalk_reent+0x3a>
 8008c26:	4629      	mov	r1, r5
 8008c28:	4630      	mov	r0, r6
 8008c2a:	47c0      	blx	r8
 8008c2c:	4307      	orrs	r7, r0
 8008c2e:	3568      	adds	r5, #104	; 0x68
 8008c30:	e7e9      	b.n	8008c06 <_fwalk_reent+0x12>

08008c32 <rshift>:
 8008c32:	6903      	ldr	r3, [r0, #16]
 8008c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c38:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c3c:	f100 0414 	add.w	r4, r0, #20
 8008c40:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c44:	dd46      	ble.n	8008cd4 <rshift+0xa2>
 8008c46:	f011 011f 	ands.w	r1, r1, #31
 8008c4a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c4e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c52:	d10c      	bne.n	8008c6e <rshift+0x3c>
 8008c54:	4629      	mov	r1, r5
 8008c56:	f100 0710 	add.w	r7, r0, #16
 8008c5a:	42b1      	cmp	r1, r6
 8008c5c:	d335      	bcc.n	8008cca <rshift+0x98>
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	1eea      	subs	r2, r5, #3
 8008c64:	4296      	cmp	r6, r2
 8008c66:	bf38      	it	cc
 8008c68:	2300      	movcc	r3, #0
 8008c6a:	4423      	add	r3, r4
 8008c6c:	e015      	b.n	8008c9a <rshift+0x68>
 8008c6e:	46a1      	mov	r9, r4
 8008c70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c74:	f1c1 0820 	rsb	r8, r1, #32
 8008c78:	40cf      	lsrs	r7, r1
 8008c7a:	f105 0e04 	add.w	lr, r5, #4
 8008c7e:	4576      	cmp	r6, lr
 8008c80:	46f4      	mov	ip, lr
 8008c82:	d816      	bhi.n	8008cb2 <rshift+0x80>
 8008c84:	1a9a      	subs	r2, r3, r2
 8008c86:	0092      	lsls	r2, r2, #2
 8008c88:	3a04      	subs	r2, #4
 8008c8a:	3501      	adds	r5, #1
 8008c8c:	42ae      	cmp	r6, r5
 8008c8e:	bf38      	it	cc
 8008c90:	2200      	movcc	r2, #0
 8008c92:	18a3      	adds	r3, r4, r2
 8008c94:	50a7      	str	r7, [r4, r2]
 8008c96:	b107      	cbz	r7, 8008c9a <rshift+0x68>
 8008c98:	3304      	adds	r3, #4
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	eba3 0204 	sub.w	r2, r3, r4
 8008ca0:	bf08      	it	eq
 8008ca2:	2300      	moveq	r3, #0
 8008ca4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ca8:	6102      	str	r2, [r0, #16]
 8008caa:	bf08      	it	eq
 8008cac:	6143      	streq	r3, [r0, #20]
 8008cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cb2:	f8dc c000 	ldr.w	ip, [ip]
 8008cb6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cba:	ea4c 0707 	orr.w	r7, ip, r7
 8008cbe:	f849 7b04 	str.w	r7, [r9], #4
 8008cc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cc6:	40cf      	lsrs	r7, r1
 8008cc8:	e7d9      	b.n	8008c7e <rshift+0x4c>
 8008cca:	f851 cb04 	ldr.w	ip, [r1], #4
 8008cce:	f847 cf04 	str.w	ip, [r7, #4]!
 8008cd2:	e7c2      	b.n	8008c5a <rshift+0x28>
 8008cd4:	4623      	mov	r3, r4
 8008cd6:	e7e0      	b.n	8008c9a <rshift+0x68>

08008cd8 <__hexdig_fun>:
 8008cd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d802      	bhi.n	8008ce6 <__hexdig_fun+0xe>
 8008ce0:	3820      	subs	r0, #32
 8008ce2:	b2c0      	uxtb	r0, r0
 8008ce4:	4770      	bx	lr
 8008ce6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d801      	bhi.n	8008cf2 <__hexdig_fun+0x1a>
 8008cee:	3847      	subs	r0, #71	; 0x47
 8008cf0:	e7f7      	b.n	8008ce2 <__hexdig_fun+0xa>
 8008cf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	d801      	bhi.n	8008cfe <__hexdig_fun+0x26>
 8008cfa:	3827      	subs	r0, #39	; 0x27
 8008cfc:	e7f1      	b.n	8008ce2 <__hexdig_fun+0xa>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	4770      	bx	lr
	...

08008d04 <__gethex>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	b08b      	sub	sp, #44	; 0x2c
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	4bb2      	ldr	r3, [pc, #712]	; (8008fd8 <__gethex+0x2d4>)
 8008d0e:	9002      	str	r0, [sp, #8]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	468b      	mov	fp, r1
 8008d14:	4618      	mov	r0, r3
 8008d16:	4690      	mov	r8, r2
 8008d18:	9303      	str	r3, [sp, #12]
 8008d1a:	f7f7 fa23 	bl	8000164 <strlen>
 8008d1e:	4682      	mov	sl, r0
 8008d20:	9b03      	ldr	r3, [sp, #12]
 8008d22:	f8db 2000 	ldr.w	r2, [fp]
 8008d26:	4403      	add	r3, r0
 8008d28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d2c:	9306      	str	r3, [sp, #24]
 8008d2e:	1c93      	adds	r3, r2, #2
 8008d30:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008d34:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008d38:	32fe      	adds	r2, #254	; 0xfe
 8008d3a:	18d1      	adds	r1, r2, r3
 8008d3c:	461f      	mov	r7, r3
 8008d3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d42:	9101      	str	r1, [sp, #4]
 8008d44:	2830      	cmp	r0, #48	; 0x30
 8008d46:	d0f8      	beq.n	8008d3a <__gethex+0x36>
 8008d48:	f7ff ffc6 	bl	8008cd8 <__hexdig_fun>
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d13a      	bne.n	8008dc8 <__gethex+0xc4>
 8008d52:	4652      	mov	r2, sl
 8008d54:	4638      	mov	r0, r7
 8008d56:	9903      	ldr	r1, [sp, #12]
 8008d58:	f001 fc71 	bl	800a63e <strncmp>
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d166      	bne.n	8008e30 <__gethex+0x12c>
 8008d62:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008d66:	eb07 060a 	add.w	r6, r7, sl
 8008d6a:	f7ff ffb5 	bl	8008cd8 <__hexdig_fun>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d060      	beq.n	8008e34 <__gethex+0x130>
 8008d72:	4633      	mov	r3, r6
 8008d74:	7818      	ldrb	r0, [r3, #0]
 8008d76:	461f      	mov	r7, r3
 8008d78:	2830      	cmp	r0, #48	; 0x30
 8008d7a:	f103 0301 	add.w	r3, r3, #1
 8008d7e:	d0f9      	beq.n	8008d74 <__gethex+0x70>
 8008d80:	f7ff ffaa 	bl	8008cd8 <__hexdig_fun>
 8008d84:	2301      	movs	r3, #1
 8008d86:	fab0 f480 	clz	r4, r0
 8008d8a:	4635      	mov	r5, r6
 8008d8c:	0964      	lsrs	r4, r4, #5
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	463a      	mov	r2, r7
 8008d92:	4616      	mov	r6, r2
 8008d94:	7830      	ldrb	r0, [r6, #0]
 8008d96:	3201      	adds	r2, #1
 8008d98:	f7ff ff9e 	bl	8008cd8 <__hexdig_fun>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1f8      	bne.n	8008d92 <__gethex+0x8e>
 8008da0:	4652      	mov	r2, sl
 8008da2:	4630      	mov	r0, r6
 8008da4:	9903      	ldr	r1, [sp, #12]
 8008da6:	f001 fc4a 	bl	800a63e <strncmp>
 8008daa:	b980      	cbnz	r0, 8008dce <__gethex+0xca>
 8008dac:	b94d      	cbnz	r5, 8008dc2 <__gethex+0xbe>
 8008dae:	eb06 050a 	add.w	r5, r6, sl
 8008db2:	462a      	mov	r2, r5
 8008db4:	4616      	mov	r6, r2
 8008db6:	7830      	ldrb	r0, [r6, #0]
 8008db8:	3201      	adds	r2, #1
 8008dba:	f7ff ff8d 	bl	8008cd8 <__hexdig_fun>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d1f8      	bne.n	8008db4 <__gethex+0xb0>
 8008dc2:	1bad      	subs	r5, r5, r6
 8008dc4:	00ad      	lsls	r5, r5, #2
 8008dc6:	e004      	b.n	8008dd2 <__gethex+0xce>
 8008dc8:	2400      	movs	r4, #0
 8008dca:	4625      	mov	r5, r4
 8008dcc:	e7e0      	b.n	8008d90 <__gethex+0x8c>
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	d1f7      	bne.n	8008dc2 <__gethex+0xbe>
 8008dd2:	7833      	ldrb	r3, [r6, #0]
 8008dd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008dd8:	2b50      	cmp	r3, #80	; 0x50
 8008dda:	d139      	bne.n	8008e50 <__gethex+0x14c>
 8008ddc:	7873      	ldrb	r3, [r6, #1]
 8008dde:	2b2b      	cmp	r3, #43	; 0x2b
 8008de0:	d02a      	beq.n	8008e38 <__gethex+0x134>
 8008de2:	2b2d      	cmp	r3, #45	; 0x2d
 8008de4:	d02c      	beq.n	8008e40 <__gethex+0x13c>
 8008de6:	f04f 0900 	mov.w	r9, #0
 8008dea:	1c71      	adds	r1, r6, #1
 8008dec:	7808      	ldrb	r0, [r1, #0]
 8008dee:	f7ff ff73 	bl	8008cd8 <__hexdig_fun>
 8008df2:	1e43      	subs	r3, r0, #1
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b18      	cmp	r3, #24
 8008df8:	d82a      	bhi.n	8008e50 <__gethex+0x14c>
 8008dfa:	f1a0 0210 	sub.w	r2, r0, #16
 8008dfe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e02:	f7ff ff69 	bl	8008cd8 <__hexdig_fun>
 8008e06:	1e43      	subs	r3, r0, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b18      	cmp	r3, #24
 8008e0c:	d91b      	bls.n	8008e46 <__gethex+0x142>
 8008e0e:	f1b9 0f00 	cmp.w	r9, #0
 8008e12:	d000      	beq.n	8008e16 <__gethex+0x112>
 8008e14:	4252      	negs	r2, r2
 8008e16:	4415      	add	r5, r2
 8008e18:	f8cb 1000 	str.w	r1, [fp]
 8008e1c:	b1d4      	cbz	r4, 8008e54 <__gethex+0x150>
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bf14      	ite	ne
 8008e24:	2700      	movne	r7, #0
 8008e26:	2706      	moveq	r7, #6
 8008e28:	4638      	mov	r0, r7
 8008e2a:	b00b      	add	sp, #44	; 0x2c
 8008e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e30:	463e      	mov	r6, r7
 8008e32:	4625      	mov	r5, r4
 8008e34:	2401      	movs	r4, #1
 8008e36:	e7cc      	b.n	8008dd2 <__gethex+0xce>
 8008e38:	f04f 0900 	mov.w	r9, #0
 8008e3c:	1cb1      	adds	r1, r6, #2
 8008e3e:	e7d5      	b.n	8008dec <__gethex+0xe8>
 8008e40:	f04f 0901 	mov.w	r9, #1
 8008e44:	e7fa      	b.n	8008e3c <__gethex+0x138>
 8008e46:	230a      	movs	r3, #10
 8008e48:	fb03 0202 	mla	r2, r3, r2, r0
 8008e4c:	3a10      	subs	r2, #16
 8008e4e:	e7d6      	b.n	8008dfe <__gethex+0xfa>
 8008e50:	4631      	mov	r1, r6
 8008e52:	e7e1      	b.n	8008e18 <__gethex+0x114>
 8008e54:	4621      	mov	r1, r4
 8008e56:	1bf3      	subs	r3, r6, r7
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2b07      	cmp	r3, #7
 8008e5c:	dc0a      	bgt.n	8008e74 <__gethex+0x170>
 8008e5e:	9802      	ldr	r0, [sp, #8]
 8008e60:	f000 faf0 	bl	8009444 <_Balloc>
 8008e64:	4604      	mov	r4, r0
 8008e66:	b940      	cbnz	r0, 8008e7a <__gethex+0x176>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	21de      	movs	r1, #222	; 0xde
 8008e6c:	4b5b      	ldr	r3, [pc, #364]	; (8008fdc <__gethex+0x2d8>)
 8008e6e:	485c      	ldr	r0, [pc, #368]	; (8008fe0 <__gethex+0x2dc>)
 8008e70:	f001 fc18 	bl	800a6a4 <__assert_func>
 8008e74:	3101      	adds	r1, #1
 8008e76:	105b      	asrs	r3, r3, #1
 8008e78:	e7ef      	b.n	8008e5a <__gethex+0x156>
 8008e7a:	f04f 0b00 	mov.w	fp, #0
 8008e7e:	f100 0914 	add.w	r9, r0, #20
 8008e82:	f1ca 0301 	rsb	r3, sl, #1
 8008e86:	f8cd 9010 	str.w	r9, [sp, #16]
 8008e8a:	f8cd b004 	str.w	fp, [sp, #4]
 8008e8e:	9308      	str	r3, [sp, #32]
 8008e90:	42b7      	cmp	r7, r6
 8008e92:	d33f      	bcc.n	8008f14 <__gethex+0x210>
 8008e94:	9f04      	ldr	r7, [sp, #16]
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	f847 3b04 	str.w	r3, [r7], #4
 8008e9c:	eba7 0709 	sub.w	r7, r7, r9
 8008ea0:	10bf      	asrs	r7, r7, #2
 8008ea2:	6127      	str	r7, [r4, #16]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fbbf 	bl	8009628 <__hi0bits>
 8008eaa:	017f      	lsls	r7, r7, #5
 8008eac:	f8d8 6000 	ldr.w	r6, [r8]
 8008eb0:	1a3f      	subs	r7, r7, r0
 8008eb2:	42b7      	cmp	r7, r6
 8008eb4:	dd62      	ble.n	8008f7c <__gethex+0x278>
 8008eb6:	1bbf      	subs	r7, r7, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 ff59 	bl	8009d72 <__any_on>
 8008ec0:	4682      	mov	sl, r0
 8008ec2:	b1a8      	cbz	r0, 8008ef0 <__gethex+0x1ec>
 8008ec4:	f04f 0a01 	mov.w	sl, #1
 8008ec8:	1e7b      	subs	r3, r7, #1
 8008eca:	1159      	asrs	r1, r3, #5
 8008ecc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ed0:	f003 021f 	and.w	r2, r3, #31
 8008ed4:	fa0a f202 	lsl.w	r2, sl, r2
 8008ed8:	420a      	tst	r2, r1
 8008eda:	d009      	beq.n	8008ef0 <__gethex+0x1ec>
 8008edc:	4553      	cmp	r3, sl
 8008ede:	dd05      	ble.n	8008eec <__gethex+0x1e8>
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	1eb9      	subs	r1, r7, #2
 8008ee4:	f000 ff45 	bl	8009d72 <__any_on>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d144      	bne.n	8008f76 <__gethex+0x272>
 8008eec:	f04f 0a02 	mov.w	sl, #2
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7ff fe9d 	bl	8008c32 <rshift>
 8008ef8:	443d      	add	r5, r7
 8008efa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008efe:	42ab      	cmp	r3, r5
 8008f00:	da4a      	bge.n	8008f98 <__gethex+0x294>
 8008f02:	4621      	mov	r1, r4
 8008f04:	9802      	ldr	r0, [sp, #8]
 8008f06:	f000 fadd 	bl	80094c4 <_Bfree>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f0e:	27a3      	movs	r7, #163	; 0xa3
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	e789      	b.n	8008e28 <__gethex+0x124>
 8008f14:	1e73      	subs	r3, r6, #1
 8008f16:	9a06      	ldr	r2, [sp, #24]
 8008f18:	9307      	str	r3, [sp, #28]
 8008f1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d019      	beq.n	8008f56 <__gethex+0x252>
 8008f22:	f1bb 0f20 	cmp.w	fp, #32
 8008f26:	d107      	bne.n	8008f38 <__gethex+0x234>
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	9a01      	ldr	r2, [sp, #4]
 8008f2c:	f843 2b04 	str.w	r2, [r3], #4
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	2300      	movs	r3, #0
 8008f34:	469b      	mov	fp, r3
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f3c:	f7ff fecc 	bl	8008cd8 <__hexdig_fun>
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	f000 000f 	and.w	r0, r0, #15
 8008f46:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f4a:	4303      	orrs	r3, r0
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	f10b 0b04 	add.w	fp, fp, #4
 8008f52:	9b07      	ldr	r3, [sp, #28]
 8008f54:	e00d      	b.n	8008f72 <__gethex+0x26e>
 8008f56:	9a08      	ldr	r2, [sp, #32]
 8008f58:	1e73      	subs	r3, r6, #1
 8008f5a:	4413      	add	r3, r2
 8008f5c:	42bb      	cmp	r3, r7
 8008f5e:	d3e0      	bcc.n	8008f22 <__gethex+0x21e>
 8008f60:	4618      	mov	r0, r3
 8008f62:	4652      	mov	r2, sl
 8008f64:	9903      	ldr	r1, [sp, #12]
 8008f66:	9309      	str	r3, [sp, #36]	; 0x24
 8008f68:	f001 fb69 	bl	800a63e <strncmp>
 8008f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d1d7      	bne.n	8008f22 <__gethex+0x21e>
 8008f72:	461e      	mov	r6, r3
 8008f74:	e78c      	b.n	8008e90 <__gethex+0x18c>
 8008f76:	f04f 0a03 	mov.w	sl, #3
 8008f7a:	e7b9      	b.n	8008ef0 <__gethex+0x1ec>
 8008f7c:	da09      	bge.n	8008f92 <__gethex+0x28e>
 8008f7e:	1bf7      	subs	r7, r6, r7
 8008f80:	4621      	mov	r1, r4
 8008f82:	463a      	mov	r2, r7
 8008f84:	9802      	ldr	r0, [sp, #8]
 8008f86:	f000 fcb5 	bl	80098f4 <__lshift>
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	1bed      	subs	r5, r5, r7
 8008f8e:	f100 0914 	add.w	r9, r0, #20
 8008f92:	f04f 0a00 	mov.w	sl, #0
 8008f96:	e7b0      	b.n	8008efa <__gethex+0x1f6>
 8008f98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f9c:	42a8      	cmp	r0, r5
 8008f9e:	dd72      	ble.n	8009086 <__gethex+0x382>
 8008fa0:	1b45      	subs	r5, r0, r5
 8008fa2:	42ae      	cmp	r6, r5
 8008fa4:	dc35      	bgt.n	8009012 <__gethex+0x30e>
 8008fa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d029      	beq.n	8009002 <__gethex+0x2fe>
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d02b      	beq.n	800900a <__gethex+0x306>
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d11c      	bne.n	8008ff0 <__gethex+0x2ec>
 8008fb6:	42ae      	cmp	r6, r5
 8008fb8:	d11a      	bne.n	8008ff0 <__gethex+0x2ec>
 8008fba:	2e01      	cmp	r6, #1
 8008fbc:	d112      	bne.n	8008fe4 <__gethex+0x2e0>
 8008fbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fc2:	9a05      	ldr	r2, [sp, #20]
 8008fc4:	2762      	movs	r7, #98	; 0x62
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	2301      	movs	r3, #1
 8008fca:	6123      	str	r3, [r4, #16]
 8008fcc:	f8c9 3000 	str.w	r3, [r9]
 8008fd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fd2:	601c      	str	r4, [r3, #0]
 8008fd4:	e728      	b.n	8008e28 <__gethex+0x124>
 8008fd6:	bf00      	nop
 8008fd8:	0800af0c 	.word	0x0800af0c
 8008fdc:	0800ae30 	.word	0x0800ae30
 8008fe0:	0800aea4 	.word	0x0800aea4
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	1e71      	subs	r1, r6, #1
 8008fe8:	f000 fec3 	bl	8009d72 <__any_on>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1e6      	bne.n	8008fbe <__gethex+0x2ba>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	9802      	ldr	r0, [sp, #8]
 8008ff4:	f000 fa66 	bl	80094c4 <_Bfree>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ffc:	2750      	movs	r7, #80	; 0x50
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	e712      	b.n	8008e28 <__gethex+0x124>
 8009002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1f3      	bne.n	8008ff0 <__gethex+0x2ec>
 8009008:	e7d9      	b.n	8008fbe <__gethex+0x2ba>
 800900a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1d6      	bne.n	8008fbe <__gethex+0x2ba>
 8009010:	e7ee      	b.n	8008ff0 <__gethex+0x2ec>
 8009012:	1e6f      	subs	r7, r5, #1
 8009014:	f1ba 0f00 	cmp.w	sl, #0
 8009018:	d132      	bne.n	8009080 <__gethex+0x37c>
 800901a:	b127      	cbz	r7, 8009026 <__gethex+0x322>
 800901c:	4639      	mov	r1, r7
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fea7 	bl	8009d72 <__any_on>
 8009024:	4682      	mov	sl, r0
 8009026:	2101      	movs	r1, #1
 8009028:	117b      	asrs	r3, r7, #5
 800902a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800902e:	f007 071f 	and.w	r7, r7, #31
 8009032:	fa01 f707 	lsl.w	r7, r1, r7
 8009036:	421f      	tst	r7, r3
 8009038:	f04f 0702 	mov.w	r7, #2
 800903c:	4629      	mov	r1, r5
 800903e:	4620      	mov	r0, r4
 8009040:	bf18      	it	ne
 8009042:	f04a 0a02 	orrne.w	sl, sl, #2
 8009046:	1b76      	subs	r6, r6, r5
 8009048:	f7ff fdf3 	bl	8008c32 <rshift>
 800904c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009050:	f1ba 0f00 	cmp.w	sl, #0
 8009054:	d048      	beq.n	80090e8 <__gethex+0x3e4>
 8009056:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d015      	beq.n	800908a <__gethex+0x386>
 800905e:	2b03      	cmp	r3, #3
 8009060:	d017      	beq.n	8009092 <__gethex+0x38e>
 8009062:	2b01      	cmp	r3, #1
 8009064:	d109      	bne.n	800907a <__gethex+0x376>
 8009066:	f01a 0f02 	tst.w	sl, #2
 800906a:	d006      	beq.n	800907a <__gethex+0x376>
 800906c:	f8d9 0000 	ldr.w	r0, [r9]
 8009070:	ea4a 0a00 	orr.w	sl, sl, r0
 8009074:	f01a 0f01 	tst.w	sl, #1
 8009078:	d10e      	bne.n	8009098 <__gethex+0x394>
 800907a:	f047 0710 	orr.w	r7, r7, #16
 800907e:	e033      	b.n	80090e8 <__gethex+0x3e4>
 8009080:	f04f 0a01 	mov.w	sl, #1
 8009084:	e7cf      	b.n	8009026 <__gethex+0x322>
 8009086:	2701      	movs	r7, #1
 8009088:	e7e2      	b.n	8009050 <__gethex+0x34c>
 800908a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800908c:	f1c3 0301 	rsb	r3, r3, #1
 8009090:	9315      	str	r3, [sp, #84]	; 0x54
 8009092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0f0      	beq.n	800907a <__gethex+0x376>
 8009098:	f04f 0c00 	mov.w	ip, #0
 800909c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090a0:	f104 0314 	add.w	r3, r4, #20
 80090a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80090b6:	d01c      	beq.n	80090f2 <__gethex+0x3ee>
 80090b8:	3201      	adds	r2, #1
 80090ba:	6002      	str	r2, [r0, #0]
 80090bc:	2f02      	cmp	r7, #2
 80090be:	f104 0314 	add.w	r3, r4, #20
 80090c2:	d13d      	bne.n	8009140 <__gethex+0x43c>
 80090c4:	f8d8 2000 	ldr.w	r2, [r8]
 80090c8:	3a01      	subs	r2, #1
 80090ca:	42b2      	cmp	r2, r6
 80090cc:	d10a      	bne.n	80090e4 <__gethex+0x3e0>
 80090ce:	2201      	movs	r2, #1
 80090d0:	1171      	asrs	r1, r6, #5
 80090d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090d6:	f006 061f 	and.w	r6, r6, #31
 80090da:	fa02 f606 	lsl.w	r6, r2, r6
 80090de:	421e      	tst	r6, r3
 80090e0:	bf18      	it	ne
 80090e2:	4617      	movne	r7, r2
 80090e4:	f047 0720 	orr.w	r7, r7, #32
 80090e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090ea:	601c      	str	r4, [r3, #0]
 80090ec:	9b05      	ldr	r3, [sp, #20]
 80090ee:	601d      	str	r5, [r3, #0]
 80090f0:	e69a      	b.n	8008e28 <__gethex+0x124>
 80090f2:	4299      	cmp	r1, r3
 80090f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80090f8:	d8d8      	bhi.n	80090ac <__gethex+0x3a8>
 80090fa:	68a3      	ldr	r3, [r4, #8]
 80090fc:	459b      	cmp	fp, r3
 80090fe:	db17      	blt.n	8009130 <__gethex+0x42c>
 8009100:	6861      	ldr	r1, [r4, #4]
 8009102:	9802      	ldr	r0, [sp, #8]
 8009104:	3101      	adds	r1, #1
 8009106:	f000 f99d 	bl	8009444 <_Balloc>
 800910a:	4681      	mov	r9, r0
 800910c:	b918      	cbnz	r0, 8009116 <__gethex+0x412>
 800910e:	4602      	mov	r2, r0
 8009110:	2184      	movs	r1, #132	; 0x84
 8009112:	4b19      	ldr	r3, [pc, #100]	; (8009178 <__gethex+0x474>)
 8009114:	e6ab      	b.n	8008e6e <__gethex+0x16a>
 8009116:	6922      	ldr	r2, [r4, #16]
 8009118:	f104 010c 	add.w	r1, r4, #12
 800911c:	3202      	adds	r2, #2
 800911e:	0092      	lsls	r2, r2, #2
 8009120:	300c      	adds	r0, #12
 8009122:	f000 f981 	bl	8009428 <memcpy>
 8009126:	4621      	mov	r1, r4
 8009128:	9802      	ldr	r0, [sp, #8]
 800912a:	f000 f9cb 	bl	80094c4 <_Bfree>
 800912e:	464c      	mov	r4, r9
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	6122      	str	r2, [r4, #16]
 8009136:	2201      	movs	r2, #1
 8009138:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800913c:	615a      	str	r2, [r3, #20]
 800913e:	e7bd      	b.n	80090bc <__gethex+0x3b8>
 8009140:	6922      	ldr	r2, [r4, #16]
 8009142:	455a      	cmp	r2, fp
 8009144:	dd0b      	ble.n	800915e <__gethex+0x45a>
 8009146:	2101      	movs	r1, #1
 8009148:	4620      	mov	r0, r4
 800914a:	f7ff fd72 	bl	8008c32 <rshift>
 800914e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009152:	3501      	adds	r5, #1
 8009154:	42ab      	cmp	r3, r5
 8009156:	f6ff aed4 	blt.w	8008f02 <__gethex+0x1fe>
 800915a:	2701      	movs	r7, #1
 800915c:	e7c2      	b.n	80090e4 <__gethex+0x3e0>
 800915e:	f016 061f 	ands.w	r6, r6, #31
 8009162:	d0fa      	beq.n	800915a <__gethex+0x456>
 8009164:	4453      	add	r3, sl
 8009166:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800916a:	f000 fa5d 	bl	8009628 <__hi0bits>
 800916e:	f1c6 0620 	rsb	r6, r6, #32
 8009172:	42b0      	cmp	r0, r6
 8009174:	dbe7      	blt.n	8009146 <__gethex+0x442>
 8009176:	e7f0      	b.n	800915a <__gethex+0x456>
 8009178:	0800ae30 	.word	0x0800ae30

0800917c <L_shift>:
 800917c:	f1c2 0208 	rsb	r2, r2, #8
 8009180:	0092      	lsls	r2, r2, #2
 8009182:	b570      	push	{r4, r5, r6, lr}
 8009184:	f1c2 0620 	rsb	r6, r2, #32
 8009188:	6843      	ldr	r3, [r0, #4]
 800918a:	6804      	ldr	r4, [r0, #0]
 800918c:	fa03 f506 	lsl.w	r5, r3, r6
 8009190:	432c      	orrs	r4, r5
 8009192:	40d3      	lsrs	r3, r2
 8009194:	6004      	str	r4, [r0, #0]
 8009196:	f840 3f04 	str.w	r3, [r0, #4]!
 800919a:	4288      	cmp	r0, r1
 800919c:	d3f4      	bcc.n	8009188 <L_shift+0xc>
 800919e:	bd70      	pop	{r4, r5, r6, pc}

080091a0 <__match>:
 80091a0:	b530      	push	{r4, r5, lr}
 80091a2:	6803      	ldr	r3, [r0, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091aa:	b914      	cbnz	r4, 80091b2 <__match+0x12>
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	2001      	movs	r0, #1
 80091b0:	bd30      	pop	{r4, r5, pc}
 80091b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80091ba:	2d19      	cmp	r5, #25
 80091bc:	bf98      	it	ls
 80091be:	3220      	addls	r2, #32
 80091c0:	42a2      	cmp	r2, r4
 80091c2:	d0f0      	beq.n	80091a6 <__match+0x6>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e7f3      	b.n	80091b0 <__match+0x10>

080091c8 <__hexnan>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	2500      	movs	r5, #0
 80091ce:	680b      	ldr	r3, [r1, #0]
 80091d0:	4682      	mov	sl, r0
 80091d2:	115e      	asrs	r6, r3, #5
 80091d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091d8:	f013 031f 	ands.w	r3, r3, #31
 80091dc:	bf18      	it	ne
 80091de:	3604      	addne	r6, #4
 80091e0:	1f37      	subs	r7, r6, #4
 80091e2:	46b9      	mov	r9, r7
 80091e4:	463c      	mov	r4, r7
 80091e6:	46ab      	mov	fp, r5
 80091e8:	b087      	sub	sp, #28
 80091ea:	4690      	mov	r8, r2
 80091ec:	6802      	ldr	r2, [r0, #0]
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	f846 5c04 	str.w	r5, [r6, #-4]
 80091f4:	9502      	str	r5, [sp, #8]
 80091f6:	7851      	ldrb	r1, [r2, #1]
 80091f8:	1c53      	adds	r3, r2, #1
 80091fa:	9303      	str	r3, [sp, #12]
 80091fc:	b341      	cbz	r1, 8009250 <__hexnan+0x88>
 80091fe:	4608      	mov	r0, r1
 8009200:	9205      	str	r2, [sp, #20]
 8009202:	9104      	str	r1, [sp, #16]
 8009204:	f7ff fd68 	bl	8008cd8 <__hexdig_fun>
 8009208:	2800      	cmp	r0, #0
 800920a:	d14f      	bne.n	80092ac <__hexnan+0xe4>
 800920c:	9904      	ldr	r1, [sp, #16]
 800920e:	9a05      	ldr	r2, [sp, #20]
 8009210:	2920      	cmp	r1, #32
 8009212:	d818      	bhi.n	8009246 <__hexnan+0x7e>
 8009214:	9b02      	ldr	r3, [sp, #8]
 8009216:	459b      	cmp	fp, r3
 8009218:	dd13      	ble.n	8009242 <__hexnan+0x7a>
 800921a:	454c      	cmp	r4, r9
 800921c:	d206      	bcs.n	800922c <__hexnan+0x64>
 800921e:	2d07      	cmp	r5, #7
 8009220:	dc04      	bgt.n	800922c <__hexnan+0x64>
 8009222:	462a      	mov	r2, r5
 8009224:	4649      	mov	r1, r9
 8009226:	4620      	mov	r0, r4
 8009228:	f7ff ffa8 	bl	800917c <L_shift>
 800922c:	4544      	cmp	r4, r8
 800922e:	d950      	bls.n	80092d2 <__hexnan+0x10a>
 8009230:	2300      	movs	r3, #0
 8009232:	f1a4 0904 	sub.w	r9, r4, #4
 8009236:	f844 3c04 	str.w	r3, [r4, #-4]
 800923a:	461d      	mov	r5, r3
 800923c:	464c      	mov	r4, r9
 800923e:	f8cd b008 	str.w	fp, [sp, #8]
 8009242:	9a03      	ldr	r2, [sp, #12]
 8009244:	e7d7      	b.n	80091f6 <__hexnan+0x2e>
 8009246:	2929      	cmp	r1, #41	; 0x29
 8009248:	d156      	bne.n	80092f8 <__hexnan+0x130>
 800924a:	3202      	adds	r2, #2
 800924c:	f8ca 2000 	str.w	r2, [sl]
 8009250:	f1bb 0f00 	cmp.w	fp, #0
 8009254:	d050      	beq.n	80092f8 <__hexnan+0x130>
 8009256:	454c      	cmp	r4, r9
 8009258:	d206      	bcs.n	8009268 <__hexnan+0xa0>
 800925a:	2d07      	cmp	r5, #7
 800925c:	dc04      	bgt.n	8009268 <__hexnan+0xa0>
 800925e:	462a      	mov	r2, r5
 8009260:	4649      	mov	r1, r9
 8009262:	4620      	mov	r0, r4
 8009264:	f7ff ff8a 	bl	800917c <L_shift>
 8009268:	4544      	cmp	r4, r8
 800926a:	d934      	bls.n	80092d6 <__hexnan+0x10e>
 800926c:	4623      	mov	r3, r4
 800926e:	f1a8 0204 	sub.w	r2, r8, #4
 8009272:	f853 1b04 	ldr.w	r1, [r3], #4
 8009276:	429f      	cmp	r7, r3
 8009278:	f842 1f04 	str.w	r1, [r2, #4]!
 800927c:	d2f9      	bcs.n	8009272 <__hexnan+0xaa>
 800927e:	1b3b      	subs	r3, r7, r4
 8009280:	f023 0303 	bic.w	r3, r3, #3
 8009284:	3304      	adds	r3, #4
 8009286:	3401      	adds	r4, #1
 8009288:	3e03      	subs	r6, #3
 800928a:	42b4      	cmp	r4, r6
 800928c:	bf88      	it	hi
 800928e:	2304      	movhi	r3, #4
 8009290:	2200      	movs	r2, #0
 8009292:	4443      	add	r3, r8
 8009294:	f843 2b04 	str.w	r2, [r3], #4
 8009298:	429f      	cmp	r7, r3
 800929a:	d2fb      	bcs.n	8009294 <__hexnan+0xcc>
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	b91b      	cbnz	r3, 80092a8 <__hexnan+0xe0>
 80092a0:	4547      	cmp	r7, r8
 80092a2:	d127      	bne.n	80092f4 <__hexnan+0x12c>
 80092a4:	2301      	movs	r3, #1
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	2005      	movs	r0, #5
 80092aa:	e026      	b.n	80092fa <__hexnan+0x132>
 80092ac:	3501      	adds	r5, #1
 80092ae:	2d08      	cmp	r5, #8
 80092b0:	f10b 0b01 	add.w	fp, fp, #1
 80092b4:	dd06      	ble.n	80092c4 <__hexnan+0xfc>
 80092b6:	4544      	cmp	r4, r8
 80092b8:	d9c3      	bls.n	8009242 <__hexnan+0x7a>
 80092ba:	2300      	movs	r3, #0
 80092bc:	2501      	movs	r5, #1
 80092be:	f844 3c04 	str.w	r3, [r4, #-4]
 80092c2:	3c04      	subs	r4, #4
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	f000 000f 	and.w	r0, r0, #15
 80092ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80092ce:	6022      	str	r2, [r4, #0]
 80092d0:	e7b7      	b.n	8009242 <__hexnan+0x7a>
 80092d2:	2508      	movs	r5, #8
 80092d4:	e7b5      	b.n	8009242 <__hexnan+0x7a>
 80092d6:	9b01      	ldr	r3, [sp, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0df      	beq.n	800929c <__hexnan+0xd4>
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	f1c3 0320 	rsb	r3, r3, #32
 80092e4:	fa22 f303 	lsr.w	r3, r2, r3
 80092e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092ec:	401a      	ands	r2, r3
 80092ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80092f2:	e7d3      	b.n	800929c <__hexnan+0xd4>
 80092f4:	3f04      	subs	r7, #4
 80092f6:	e7d1      	b.n	800929c <__hexnan+0xd4>
 80092f8:	2004      	movs	r0, #4
 80092fa:	b007      	add	sp, #28
 80092fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009300 <_localeconv_r>:
 8009300:	4800      	ldr	r0, [pc, #0]	; (8009304 <_localeconv_r+0x4>)
 8009302:	4770      	bx	lr
 8009304:	20000168 	.word	0x20000168

08009308 <__retarget_lock_init_recursive>:
 8009308:	4770      	bx	lr

0800930a <__retarget_lock_acquire_recursive>:
 800930a:	4770      	bx	lr

0800930c <__retarget_lock_release_recursive>:
 800930c:	4770      	bx	lr

0800930e <__swhatbuf_r>:
 800930e:	b570      	push	{r4, r5, r6, lr}
 8009310:	460e      	mov	r6, r1
 8009312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009316:	4614      	mov	r4, r2
 8009318:	2900      	cmp	r1, #0
 800931a:	461d      	mov	r5, r3
 800931c:	b096      	sub	sp, #88	; 0x58
 800931e:	da08      	bge.n	8009332 <__swhatbuf_r+0x24>
 8009320:	2200      	movs	r2, #0
 8009322:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009326:	602a      	str	r2, [r5, #0]
 8009328:	061a      	lsls	r2, r3, #24
 800932a:	d410      	bmi.n	800934e <__swhatbuf_r+0x40>
 800932c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009330:	e00e      	b.n	8009350 <__swhatbuf_r+0x42>
 8009332:	466a      	mov	r2, sp
 8009334:	f001 f9f6 	bl	800a724 <_fstat_r>
 8009338:	2800      	cmp	r0, #0
 800933a:	dbf1      	blt.n	8009320 <__swhatbuf_r+0x12>
 800933c:	9a01      	ldr	r2, [sp, #4]
 800933e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009342:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009346:	425a      	negs	r2, r3
 8009348:	415a      	adcs	r2, r3
 800934a:	602a      	str	r2, [r5, #0]
 800934c:	e7ee      	b.n	800932c <__swhatbuf_r+0x1e>
 800934e:	2340      	movs	r3, #64	; 0x40
 8009350:	2000      	movs	r0, #0
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	b016      	add	sp, #88	; 0x58
 8009356:	bd70      	pop	{r4, r5, r6, pc}

08009358 <__smakebuf_r>:
 8009358:	898b      	ldrh	r3, [r1, #12]
 800935a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800935c:	079d      	lsls	r5, r3, #30
 800935e:	4606      	mov	r6, r0
 8009360:	460c      	mov	r4, r1
 8009362:	d507      	bpl.n	8009374 <__smakebuf_r+0x1c>
 8009364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	2301      	movs	r3, #1
 800936e:	6163      	str	r3, [r4, #20]
 8009370:	b002      	add	sp, #8
 8009372:	bd70      	pop	{r4, r5, r6, pc}
 8009374:	466a      	mov	r2, sp
 8009376:	ab01      	add	r3, sp, #4
 8009378:	f7ff ffc9 	bl	800930e <__swhatbuf_r>
 800937c:	9900      	ldr	r1, [sp, #0]
 800937e:	4605      	mov	r5, r0
 8009380:	4630      	mov	r0, r6
 8009382:	f000 fd93 	bl	8009eac <_malloc_r>
 8009386:	b948      	cbnz	r0, 800939c <__smakebuf_r+0x44>
 8009388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938c:	059a      	lsls	r2, r3, #22
 800938e:	d4ef      	bmi.n	8009370 <__smakebuf_r+0x18>
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	f043 0302 	orr.w	r3, r3, #2
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	e7e3      	b.n	8009364 <__smakebuf_r+0xc>
 800939c:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <__smakebuf_r+0x7c>)
 800939e:	62b3      	str	r3, [r6, #40]	; 0x28
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	6020      	str	r0, [r4, #0]
 80093a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	9b00      	ldr	r3, [sp, #0]
 80093ac:	6120      	str	r0, [r4, #16]
 80093ae:	6163      	str	r3, [r4, #20]
 80093b0:	9b01      	ldr	r3, [sp, #4]
 80093b2:	b15b      	cbz	r3, 80093cc <__smakebuf_r+0x74>
 80093b4:	4630      	mov	r0, r6
 80093b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ba:	f001 f9c5 	bl	800a748 <_isatty_r>
 80093be:	b128      	cbz	r0, 80093cc <__smakebuf_r+0x74>
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f023 0303 	bic.w	r3, r3, #3
 80093c6:	f043 0301 	orr.w	r3, r3, #1
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	89a0      	ldrh	r0, [r4, #12]
 80093ce:	4305      	orrs	r5, r0
 80093d0:	81a5      	strh	r5, [r4, #12]
 80093d2:	e7cd      	b.n	8009370 <__smakebuf_r+0x18>
 80093d4:	08008a91 	.word	0x08008a91

080093d8 <malloc>:
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <malloc+0xc>)
 80093da:	4601      	mov	r1, r0
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	f000 bd65 	b.w	8009eac <_malloc_r>
 80093e2:	bf00      	nop
 80093e4:	20000010 	.word	0x20000010

080093e8 <__ascii_mbtowc>:
 80093e8:	b082      	sub	sp, #8
 80093ea:	b901      	cbnz	r1, 80093ee <__ascii_mbtowc+0x6>
 80093ec:	a901      	add	r1, sp, #4
 80093ee:	b142      	cbz	r2, 8009402 <__ascii_mbtowc+0x1a>
 80093f0:	b14b      	cbz	r3, 8009406 <__ascii_mbtowc+0x1e>
 80093f2:	7813      	ldrb	r3, [r2, #0]
 80093f4:	600b      	str	r3, [r1, #0]
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	1e10      	subs	r0, r2, #0
 80093fa:	bf18      	it	ne
 80093fc:	2001      	movne	r0, #1
 80093fe:	b002      	add	sp, #8
 8009400:	4770      	bx	lr
 8009402:	4610      	mov	r0, r2
 8009404:	e7fb      	b.n	80093fe <__ascii_mbtowc+0x16>
 8009406:	f06f 0001 	mvn.w	r0, #1
 800940a:	e7f8      	b.n	80093fe <__ascii_mbtowc+0x16>

0800940c <memchr>:
 800940c:	4603      	mov	r3, r0
 800940e:	b510      	push	{r4, lr}
 8009410:	b2c9      	uxtb	r1, r1
 8009412:	4402      	add	r2, r0
 8009414:	4293      	cmp	r3, r2
 8009416:	4618      	mov	r0, r3
 8009418:	d101      	bne.n	800941e <memchr+0x12>
 800941a:	2000      	movs	r0, #0
 800941c:	e003      	b.n	8009426 <memchr+0x1a>
 800941e:	7804      	ldrb	r4, [r0, #0]
 8009420:	3301      	adds	r3, #1
 8009422:	428c      	cmp	r4, r1
 8009424:	d1f6      	bne.n	8009414 <memchr+0x8>
 8009426:	bd10      	pop	{r4, pc}

08009428 <memcpy>:
 8009428:	440a      	add	r2, r1
 800942a:	4291      	cmp	r1, r2
 800942c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009430:	d100      	bne.n	8009434 <memcpy+0xc>
 8009432:	4770      	bx	lr
 8009434:	b510      	push	{r4, lr}
 8009436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800943a:	4291      	cmp	r1, r2
 800943c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009440:	d1f9      	bne.n	8009436 <memcpy+0xe>
 8009442:	bd10      	pop	{r4, pc}

08009444 <_Balloc>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	b976      	cbnz	r6, 800946c <_Balloc+0x28>
 800944e:	2010      	movs	r0, #16
 8009450:	f7ff ffc2 	bl	80093d8 <malloc>
 8009454:	4602      	mov	r2, r0
 8009456:	6260      	str	r0, [r4, #36]	; 0x24
 8009458:	b920      	cbnz	r0, 8009464 <_Balloc+0x20>
 800945a:	2166      	movs	r1, #102	; 0x66
 800945c:	4b17      	ldr	r3, [pc, #92]	; (80094bc <_Balloc+0x78>)
 800945e:	4818      	ldr	r0, [pc, #96]	; (80094c0 <_Balloc+0x7c>)
 8009460:	f001 f920 	bl	800a6a4 <__assert_func>
 8009464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009468:	6006      	str	r6, [r0, #0]
 800946a:	60c6      	str	r6, [r0, #12]
 800946c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800946e:	68f3      	ldr	r3, [r6, #12]
 8009470:	b183      	cbz	r3, 8009494 <_Balloc+0x50>
 8009472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800947a:	b9b8      	cbnz	r0, 80094ac <_Balloc+0x68>
 800947c:	2101      	movs	r1, #1
 800947e:	fa01 f605 	lsl.w	r6, r1, r5
 8009482:	1d72      	adds	r2, r6, #5
 8009484:	4620      	mov	r0, r4
 8009486:	0092      	lsls	r2, r2, #2
 8009488:	f000 fc94 	bl	8009db4 <_calloc_r>
 800948c:	b160      	cbz	r0, 80094a8 <_Balloc+0x64>
 800948e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009492:	e00e      	b.n	80094b2 <_Balloc+0x6e>
 8009494:	2221      	movs	r2, #33	; 0x21
 8009496:	2104      	movs	r1, #4
 8009498:	4620      	mov	r0, r4
 800949a:	f000 fc8b 	bl	8009db4 <_calloc_r>
 800949e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094a0:	60f0      	str	r0, [r6, #12]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e4      	bne.n	8009472 <_Balloc+0x2e>
 80094a8:	2000      	movs	r0, #0
 80094aa:	bd70      	pop	{r4, r5, r6, pc}
 80094ac:	6802      	ldr	r2, [r0, #0]
 80094ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094b2:	2300      	movs	r3, #0
 80094b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094b8:	e7f7      	b.n	80094aa <_Balloc+0x66>
 80094ba:	bf00      	nop
 80094bc:	0800adbe 	.word	0x0800adbe
 80094c0:	0800af20 	.word	0x0800af20

080094c4 <_Bfree>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094c8:	4605      	mov	r5, r0
 80094ca:	460c      	mov	r4, r1
 80094cc:	b976      	cbnz	r6, 80094ec <_Bfree+0x28>
 80094ce:	2010      	movs	r0, #16
 80094d0:	f7ff ff82 	bl	80093d8 <malloc>
 80094d4:	4602      	mov	r2, r0
 80094d6:	6268      	str	r0, [r5, #36]	; 0x24
 80094d8:	b920      	cbnz	r0, 80094e4 <_Bfree+0x20>
 80094da:	218a      	movs	r1, #138	; 0x8a
 80094dc:	4b08      	ldr	r3, [pc, #32]	; (8009500 <_Bfree+0x3c>)
 80094de:	4809      	ldr	r0, [pc, #36]	; (8009504 <_Bfree+0x40>)
 80094e0:	f001 f8e0 	bl	800a6a4 <__assert_func>
 80094e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094e8:	6006      	str	r6, [r0, #0]
 80094ea:	60c6      	str	r6, [r0, #12]
 80094ec:	b13c      	cbz	r4, 80094fe <_Bfree+0x3a>
 80094ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094f0:	6862      	ldr	r2, [r4, #4]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094f8:	6021      	str	r1, [r4, #0]
 80094fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	0800adbe 	.word	0x0800adbe
 8009504:	0800af20 	.word	0x0800af20

08009508 <__multadd>:
 8009508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950c:	4607      	mov	r7, r0
 800950e:	460c      	mov	r4, r1
 8009510:	461e      	mov	r6, r3
 8009512:	2000      	movs	r0, #0
 8009514:	690d      	ldr	r5, [r1, #16]
 8009516:	f101 0c14 	add.w	ip, r1, #20
 800951a:	f8dc 3000 	ldr.w	r3, [ip]
 800951e:	3001      	adds	r0, #1
 8009520:	b299      	uxth	r1, r3
 8009522:	fb02 6101 	mla	r1, r2, r1, r6
 8009526:	0c1e      	lsrs	r6, r3, #16
 8009528:	0c0b      	lsrs	r3, r1, #16
 800952a:	fb02 3306 	mla	r3, r2, r6, r3
 800952e:	b289      	uxth	r1, r1
 8009530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009534:	4285      	cmp	r5, r0
 8009536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800953a:	f84c 1b04 	str.w	r1, [ip], #4
 800953e:	dcec      	bgt.n	800951a <__multadd+0x12>
 8009540:	b30e      	cbz	r6, 8009586 <__multadd+0x7e>
 8009542:	68a3      	ldr	r3, [r4, #8]
 8009544:	42ab      	cmp	r3, r5
 8009546:	dc19      	bgt.n	800957c <__multadd+0x74>
 8009548:	6861      	ldr	r1, [r4, #4]
 800954a:	4638      	mov	r0, r7
 800954c:	3101      	adds	r1, #1
 800954e:	f7ff ff79 	bl	8009444 <_Balloc>
 8009552:	4680      	mov	r8, r0
 8009554:	b928      	cbnz	r0, 8009562 <__multadd+0x5a>
 8009556:	4602      	mov	r2, r0
 8009558:	21b5      	movs	r1, #181	; 0xb5
 800955a:	4b0c      	ldr	r3, [pc, #48]	; (800958c <__multadd+0x84>)
 800955c:	480c      	ldr	r0, [pc, #48]	; (8009590 <__multadd+0x88>)
 800955e:	f001 f8a1 	bl	800a6a4 <__assert_func>
 8009562:	6922      	ldr	r2, [r4, #16]
 8009564:	f104 010c 	add.w	r1, r4, #12
 8009568:	3202      	adds	r2, #2
 800956a:	0092      	lsls	r2, r2, #2
 800956c:	300c      	adds	r0, #12
 800956e:	f7ff ff5b 	bl	8009428 <memcpy>
 8009572:	4621      	mov	r1, r4
 8009574:	4638      	mov	r0, r7
 8009576:	f7ff ffa5 	bl	80094c4 <_Bfree>
 800957a:	4644      	mov	r4, r8
 800957c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009580:	3501      	adds	r5, #1
 8009582:	615e      	str	r6, [r3, #20]
 8009584:	6125      	str	r5, [r4, #16]
 8009586:	4620      	mov	r0, r4
 8009588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800958c:	0800ae30 	.word	0x0800ae30
 8009590:	0800af20 	.word	0x0800af20

08009594 <__s2b>:
 8009594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009598:	4615      	mov	r5, r2
 800959a:	2209      	movs	r2, #9
 800959c:	461f      	mov	r7, r3
 800959e:	3308      	adds	r3, #8
 80095a0:	460c      	mov	r4, r1
 80095a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80095a6:	4606      	mov	r6, r0
 80095a8:	2201      	movs	r2, #1
 80095aa:	2100      	movs	r1, #0
 80095ac:	429a      	cmp	r2, r3
 80095ae:	db09      	blt.n	80095c4 <__s2b+0x30>
 80095b0:	4630      	mov	r0, r6
 80095b2:	f7ff ff47 	bl	8009444 <_Balloc>
 80095b6:	b940      	cbnz	r0, 80095ca <__s2b+0x36>
 80095b8:	4602      	mov	r2, r0
 80095ba:	21ce      	movs	r1, #206	; 0xce
 80095bc:	4b18      	ldr	r3, [pc, #96]	; (8009620 <__s2b+0x8c>)
 80095be:	4819      	ldr	r0, [pc, #100]	; (8009624 <__s2b+0x90>)
 80095c0:	f001 f870 	bl	800a6a4 <__assert_func>
 80095c4:	0052      	lsls	r2, r2, #1
 80095c6:	3101      	adds	r1, #1
 80095c8:	e7f0      	b.n	80095ac <__s2b+0x18>
 80095ca:	9b08      	ldr	r3, [sp, #32]
 80095cc:	2d09      	cmp	r5, #9
 80095ce:	6143      	str	r3, [r0, #20]
 80095d0:	f04f 0301 	mov.w	r3, #1
 80095d4:	6103      	str	r3, [r0, #16]
 80095d6:	dd16      	ble.n	8009606 <__s2b+0x72>
 80095d8:	f104 0909 	add.w	r9, r4, #9
 80095dc:	46c8      	mov	r8, r9
 80095de:	442c      	add	r4, r5
 80095e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095e4:	4601      	mov	r1, r0
 80095e6:	220a      	movs	r2, #10
 80095e8:	4630      	mov	r0, r6
 80095ea:	3b30      	subs	r3, #48	; 0x30
 80095ec:	f7ff ff8c 	bl	8009508 <__multadd>
 80095f0:	45a0      	cmp	r8, r4
 80095f2:	d1f5      	bne.n	80095e0 <__s2b+0x4c>
 80095f4:	f1a5 0408 	sub.w	r4, r5, #8
 80095f8:	444c      	add	r4, r9
 80095fa:	1b2d      	subs	r5, r5, r4
 80095fc:	1963      	adds	r3, r4, r5
 80095fe:	42bb      	cmp	r3, r7
 8009600:	db04      	blt.n	800960c <__s2b+0x78>
 8009602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009606:	2509      	movs	r5, #9
 8009608:	340a      	adds	r4, #10
 800960a:	e7f6      	b.n	80095fa <__s2b+0x66>
 800960c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009610:	4601      	mov	r1, r0
 8009612:	220a      	movs	r2, #10
 8009614:	4630      	mov	r0, r6
 8009616:	3b30      	subs	r3, #48	; 0x30
 8009618:	f7ff ff76 	bl	8009508 <__multadd>
 800961c:	e7ee      	b.n	80095fc <__s2b+0x68>
 800961e:	bf00      	nop
 8009620:	0800ae30 	.word	0x0800ae30
 8009624:	0800af20 	.word	0x0800af20

08009628 <__hi0bits>:
 8009628:	0c02      	lsrs	r2, r0, #16
 800962a:	0412      	lsls	r2, r2, #16
 800962c:	4603      	mov	r3, r0
 800962e:	b9ca      	cbnz	r2, 8009664 <__hi0bits+0x3c>
 8009630:	0403      	lsls	r3, r0, #16
 8009632:	2010      	movs	r0, #16
 8009634:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009638:	bf04      	itt	eq
 800963a:	021b      	lsleq	r3, r3, #8
 800963c:	3008      	addeq	r0, #8
 800963e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009642:	bf04      	itt	eq
 8009644:	011b      	lsleq	r3, r3, #4
 8009646:	3004      	addeq	r0, #4
 8009648:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800964c:	bf04      	itt	eq
 800964e:	009b      	lsleq	r3, r3, #2
 8009650:	3002      	addeq	r0, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	db05      	blt.n	8009662 <__hi0bits+0x3a>
 8009656:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800965a:	f100 0001 	add.w	r0, r0, #1
 800965e:	bf08      	it	eq
 8009660:	2020      	moveq	r0, #32
 8009662:	4770      	bx	lr
 8009664:	2000      	movs	r0, #0
 8009666:	e7e5      	b.n	8009634 <__hi0bits+0xc>

08009668 <__lo0bits>:
 8009668:	6803      	ldr	r3, [r0, #0]
 800966a:	4602      	mov	r2, r0
 800966c:	f013 0007 	ands.w	r0, r3, #7
 8009670:	d00b      	beq.n	800968a <__lo0bits+0x22>
 8009672:	07d9      	lsls	r1, r3, #31
 8009674:	d421      	bmi.n	80096ba <__lo0bits+0x52>
 8009676:	0798      	lsls	r0, r3, #30
 8009678:	bf49      	itett	mi
 800967a:	085b      	lsrmi	r3, r3, #1
 800967c:	089b      	lsrpl	r3, r3, #2
 800967e:	2001      	movmi	r0, #1
 8009680:	6013      	strmi	r3, [r2, #0]
 8009682:	bf5c      	itt	pl
 8009684:	2002      	movpl	r0, #2
 8009686:	6013      	strpl	r3, [r2, #0]
 8009688:	4770      	bx	lr
 800968a:	b299      	uxth	r1, r3
 800968c:	b909      	cbnz	r1, 8009692 <__lo0bits+0x2a>
 800968e:	2010      	movs	r0, #16
 8009690:	0c1b      	lsrs	r3, r3, #16
 8009692:	b2d9      	uxtb	r1, r3
 8009694:	b909      	cbnz	r1, 800969a <__lo0bits+0x32>
 8009696:	3008      	adds	r0, #8
 8009698:	0a1b      	lsrs	r3, r3, #8
 800969a:	0719      	lsls	r1, r3, #28
 800969c:	bf04      	itt	eq
 800969e:	091b      	lsreq	r3, r3, #4
 80096a0:	3004      	addeq	r0, #4
 80096a2:	0799      	lsls	r1, r3, #30
 80096a4:	bf04      	itt	eq
 80096a6:	089b      	lsreq	r3, r3, #2
 80096a8:	3002      	addeq	r0, #2
 80096aa:	07d9      	lsls	r1, r3, #31
 80096ac:	d403      	bmi.n	80096b6 <__lo0bits+0x4e>
 80096ae:	085b      	lsrs	r3, r3, #1
 80096b0:	f100 0001 	add.w	r0, r0, #1
 80096b4:	d003      	beq.n	80096be <__lo0bits+0x56>
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	4770      	bx	lr
 80096ba:	2000      	movs	r0, #0
 80096bc:	4770      	bx	lr
 80096be:	2020      	movs	r0, #32
 80096c0:	4770      	bx	lr
	...

080096c4 <__i2b>:
 80096c4:	b510      	push	{r4, lr}
 80096c6:	460c      	mov	r4, r1
 80096c8:	2101      	movs	r1, #1
 80096ca:	f7ff febb 	bl	8009444 <_Balloc>
 80096ce:	4602      	mov	r2, r0
 80096d0:	b928      	cbnz	r0, 80096de <__i2b+0x1a>
 80096d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096d6:	4b04      	ldr	r3, [pc, #16]	; (80096e8 <__i2b+0x24>)
 80096d8:	4804      	ldr	r0, [pc, #16]	; (80096ec <__i2b+0x28>)
 80096da:	f000 ffe3 	bl	800a6a4 <__assert_func>
 80096de:	2301      	movs	r3, #1
 80096e0:	6144      	str	r4, [r0, #20]
 80096e2:	6103      	str	r3, [r0, #16]
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	bf00      	nop
 80096e8:	0800ae30 	.word	0x0800ae30
 80096ec:	0800af20 	.word	0x0800af20

080096f0 <__multiply>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	4691      	mov	r9, r2
 80096f6:	690a      	ldr	r2, [r1, #16]
 80096f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096fc:	460c      	mov	r4, r1
 80096fe:	429a      	cmp	r2, r3
 8009700:	bfbe      	ittt	lt
 8009702:	460b      	movlt	r3, r1
 8009704:	464c      	movlt	r4, r9
 8009706:	4699      	movlt	r9, r3
 8009708:	6927      	ldr	r7, [r4, #16]
 800970a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	6861      	ldr	r1, [r4, #4]
 8009712:	eb07 060a 	add.w	r6, r7, sl
 8009716:	42b3      	cmp	r3, r6
 8009718:	b085      	sub	sp, #20
 800971a:	bfb8      	it	lt
 800971c:	3101      	addlt	r1, #1
 800971e:	f7ff fe91 	bl	8009444 <_Balloc>
 8009722:	b930      	cbnz	r0, 8009732 <__multiply+0x42>
 8009724:	4602      	mov	r2, r0
 8009726:	f240 115d 	movw	r1, #349	; 0x15d
 800972a:	4b43      	ldr	r3, [pc, #268]	; (8009838 <__multiply+0x148>)
 800972c:	4843      	ldr	r0, [pc, #268]	; (800983c <__multiply+0x14c>)
 800972e:	f000 ffb9 	bl	800a6a4 <__assert_func>
 8009732:	f100 0514 	add.w	r5, r0, #20
 8009736:	462b      	mov	r3, r5
 8009738:	2200      	movs	r2, #0
 800973a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800973e:	4543      	cmp	r3, r8
 8009740:	d321      	bcc.n	8009786 <__multiply+0x96>
 8009742:	f104 0314 	add.w	r3, r4, #20
 8009746:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800974a:	f109 0314 	add.w	r3, r9, #20
 800974e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009752:	9202      	str	r2, [sp, #8]
 8009754:	1b3a      	subs	r2, r7, r4
 8009756:	3a15      	subs	r2, #21
 8009758:	f022 0203 	bic.w	r2, r2, #3
 800975c:	3204      	adds	r2, #4
 800975e:	f104 0115 	add.w	r1, r4, #21
 8009762:	428f      	cmp	r7, r1
 8009764:	bf38      	it	cc
 8009766:	2204      	movcc	r2, #4
 8009768:	9201      	str	r2, [sp, #4]
 800976a:	9a02      	ldr	r2, [sp, #8]
 800976c:	9303      	str	r3, [sp, #12]
 800976e:	429a      	cmp	r2, r3
 8009770:	d80c      	bhi.n	800978c <__multiply+0x9c>
 8009772:	2e00      	cmp	r6, #0
 8009774:	dd03      	ble.n	800977e <__multiply+0x8e>
 8009776:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800977a:	2b00      	cmp	r3, #0
 800977c:	d059      	beq.n	8009832 <__multiply+0x142>
 800977e:	6106      	str	r6, [r0, #16]
 8009780:	b005      	add	sp, #20
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	f843 2b04 	str.w	r2, [r3], #4
 800978a:	e7d8      	b.n	800973e <__multiply+0x4e>
 800978c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009790:	f1ba 0f00 	cmp.w	sl, #0
 8009794:	d023      	beq.n	80097de <__multiply+0xee>
 8009796:	46a9      	mov	r9, r5
 8009798:	f04f 0c00 	mov.w	ip, #0
 800979c:	f104 0e14 	add.w	lr, r4, #20
 80097a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097a4:	f8d9 1000 	ldr.w	r1, [r9]
 80097a8:	fa1f fb82 	uxth.w	fp, r2
 80097ac:	b289      	uxth	r1, r1
 80097ae:	fb0a 110b 	mla	r1, sl, fp, r1
 80097b2:	4461      	add	r1, ip
 80097b4:	f8d9 c000 	ldr.w	ip, [r9]
 80097b8:	0c12      	lsrs	r2, r2, #16
 80097ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80097be:	fb0a c202 	mla	r2, sl, r2, ip
 80097c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097c6:	b289      	uxth	r1, r1
 80097c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097cc:	4577      	cmp	r7, lr
 80097ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097d2:	f849 1b04 	str.w	r1, [r9], #4
 80097d6:	d8e3      	bhi.n	80097a0 <__multiply+0xb0>
 80097d8:	9a01      	ldr	r2, [sp, #4]
 80097da:	f845 c002 	str.w	ip, [r5, r2]
 80097de:	9a03      	ldr	r2, [sp, #12]
 80097e0:	3304      	adds	r3, #4
 80097e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097e6:	f1b9 0f00 	cmp.w	r9, #0
 80097ea:	d020      	beq.n	800982e <__multiply+0x13e>
 80097ec:	46ae      	mov	lr, r5
 80097ee:	f04f 0a00 	mov.w	sl, #0
 80097f2:	6829      	ldr	r1, [r5, #0]
 80097f4:	f104 0c14 	add.w	ip, r4, #20
 80097f8:	f8bc b000 	ldrh.w	fp, [ip]
 80097fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009800:	b289      	uxth	r1, r1
 8009802:	fb09 220b 	mla	r2, r9, fp, r2
 8009806:	4492      	add	sl, r2
 8009808:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800980c:	f84e 1b04 	str.w	r1, [lr], #4
 8009810:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009814:	f8be 1000 	ldrh.w	r1, [lr]
 8009818:	0c12      	lsrs	r2, r2, #16
 800981a:	fb09 1102 	mla	r1, r9, r2, r1
 800981e:	4567      	cmp	r7, ip
 8009820:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009828:	d8e6      	bhi.n	80097f8 <__multiply+0x108>
 800982a:	9a01      	ldr	r2, [sp, #4]
 800982c:	50a9      	str	r1, [r5, r2]
 800982e:	3504      	adds	r5, #4
 8009830:	e79b      	b.n	800976a <__multiply+0x7a>
 8009832:	3e01      	subs	r6, #1
 8009834:	e79d      	b.n	8009772 <__multiply+0x82>
 8009836:	bf00      	nop
 8009838:	0800ae30 	.word	0x0800ae30
 800983c:	0800af20 	.word	0x0800af20

08009840 <__pow5mult>:
 8009840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009844:	4615      	mov	r5, r2
 8009846:	f012 0203 	ands.w	r2, r2, #3
 800984a:	4606      	mov	r6, r0
 800984c:	460f      	mov	r7, r1
 800984e:	d007      	beq.n	8009860 <__pow5mult+0x20>
 8009850:	4c25      	ldr	r4, [pc, #148]	; (80098e8 <__pow5mult+0xa8>)
 8009852:	3a01      	subs	r2, #1
 8009854:	2300      	movs	r3, #0
 8009856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800985a:	f7ff fe55 	bl	8009508 <__multadd>
 800985e:	4607      	mov	r7, r0
 8009860:	10ad      	asrs	r5, r5, #2
 8009862:	d03d      	beq.n	80098e0 <__pow5mult+0xa0>
 8009864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009866:	b97c      	cbnz	r4, 8009888 <__pow5mult+0x48>
 8009868:	2010      	movs	r0, #16
 800986a:	f7ff fdb5 	bl	80093d8 <malloc>
 800986e:	4602      	mov	r2, r0
 8009870:	6270      	str	r0, [r6, #36]	; 0x24
 8009872:	b928      	cbnz	r0, 8009880 <__pow5mult+0x40>
 8009874:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009878:	4b1c      	ldr	r3, [pc, #112]	; (80098ec <__pow5mult+0xac>)
 800987a:	481d      	ldr	r0, [pc, #116]	; (80098f0 <__pow5mult+0xb0>)
 800987c:	f000 ff12 	bl	800a6a4 <__assert_func>
 8009880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009884:	6004      	str	r4, [r0, #0]
 8009886:	60c4      	str	r4, [r0, #12]
 8009888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800988c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009890:	b94c      	cbnz	r4, 80098a6 <__pow5mult+0x66>
 8009892:	f240 2171 	movw	r1, #625	; 0x271
 8009896:	4630      	mov	r0, r6
 8009898:	f7ff ff14 	bl	80096c4 <__i2b>
 800989c:	2300      	movs	r3, #0
 800989e:	4604      	mov	r4, r0
 80098a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80098a4:	6003      	str	r3, [r0, #0]
 80098a6:	f04f 0900 	mov.w	r9, #0
 80098aa:	07eb      	lsls	r3, r5, #31
 80098ac:	d50a      	bpl.n	80098c4 <__pow5mult+0x84>
 80098ae:	4639      	mov	r1, r7
 80098b0:	4622      	mov	r2, r4
 80098b2:	4630      	mov	r0, r6
 80098b4:	f7ff ff1c 	bl	80096f0 <__multiply>
 80098b8:	4680      	mov	r8, r0
 80098ba:	4639      	mov	r1, r7
 80098bc:	4630      	mov	r0, r6
 80098be:	f7ff fe01 	bl	80094c4 <_Bfree>
 80098c2:	4647      	mov	r7, r8
 80098c4:	106d      	asrs	r5, r5, #1
 80098c6:	d00b      	beq.n	80098e0 <__pow5mult+0xa0>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	b938      	cbnz	r0, 80098dc <__pow5mult+0x9c>
 80098cc:	4622      	mov	r2, r4
 80098ce:	4621      	mov	r1, r4
 80098d0:	4630      	mov	r0, r6
 80098d2:	f7ff ff0d 	bl	80096f0 <__multiply>
 80098d6:	6020      	str	r0, [r4, #0]
 80098d8:	f8c0 9000 	str.w	r9, [r0]
 80098dc:	4604      	mov	r4, r0
 80098de:	e7e4      	b.n	80098aa <__pow5mult+0x6a>
 80098e0:	4638      	mov	r0, r7
 80098e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e6:	bf00      	nop
 80098e8:	0800b070 	.word	0x0800b070
 80098ec:	0800adbe 	.word	0x0800adbe
 80098f0:	0800af20 	.word	0x0800af20

080098f4 <__lshift>:
 80098f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f8:	460c      	mov	r4, r1
 80098fa:	4607      	mov	r7, r0
 80098fc:	4691      	mov	r9, r2
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	6849      	ldr	r1, [r1, #4]
 8009902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009906:	68a3      	ldr	r3, [r4, #8]
 8009908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800990c:	f108 0601 	add.w	r6, r8, #1
 8009910:	42b3      	cmp	r3, r6
 8009912:	db0b      	blt.n	800992c <__lshift+0x38>
 8009914:	4638      	mov	r0, r7
 8009916:	f7ff fd95 	bl	8009444 <_Balloc>
 800991a:	4605      	mov	r5, r0
 800991c:	b948      	cbnz	r0, 8009932 <__lshift+0x3e>
 800991e:	4602      	mov	r2, r0
 8009920:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009924:	4b29      	ldr	r3, [pc, #164]	; (80099cc <__lshift+0xd8>)
 8009926:	482a      	ldr	r0, [pc, #168]	; (80099d0 <__lshift+0xdc>)
 8009928:	f000 febc 	bl	800a6a4 <__assert_func>
 800992c:	3101      	adds	r1, #1
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	e7ee      	b.n	8009910 <__lshift+0x1c>
 8009932:	2300      	movs	r3, #0
 8009934:	f100 0114 	add.w	r1, r0, #20
 8009938:	f100 0210 	add.w	r2, r0, #16
 800993c:	4618      	mov	r0, r3
 800993e:	4553      	cmp	r3, sl
 8009940:	db37      	blt.n	80099b2 <__lshift+0xbe>
 8009942:	6920      	ldr	r0, [r4, #16]
 8009944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009948:	f104 0314 	add.w	r3, r4, #20
 800994c:	f019 091f 	ands.w	r9, r9, #31
 8009950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009958:	d02f      	beq.n	80099ba <__lshift+0xc6>
 800995a:	468a      	mov	sl, r1
 800995c:	f04f 0c00 	mov.w	ip, #0
 8009960:	f1c9 0e20 	rsb	lr, r9, #32
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	fa02 f209 	lsl.w	r2, r2, r9
 800996a:	ea42 020c 	orr.w	r2, r2, ip
 800996e:	f84a 2b04 	str.w	r2, [sl], #4
 8009972:	f853 2b04 	ldr.w	r2, [r3], #4
 8009976:	4298      	cmp	r0, r3
 8009978:	fa22 fc0e 	lsr.w	ip, r2, lr
 800997c:	d8f2      	bhi.n	8009964 <__lshift+0x70>
 800997e:	1b03      	subs	r3, r0, r4
 8009980:	3b15      	subs	r3, #21
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	3304      	adds	r3, #4
 8009988:	f104 0215 	add.w	r2, r4, #21
 800998c:	4290      	cmp	r0, r2
 800998e:	bf38      	it	cc
 8009990:	2304      	movcc	r3, #4
 8009992:	f841 c003 	str.w	ip, [r1, r3]
 8009996:	f1bc 0f00 	cmp.w	ip, #0
 800999a:	d001      	beq.n	80099a0 <__lshift+0xac>
 800999c:	f108 0602 	add.w	r6, r8, #2
 80099a0:	3e01      	subs	r6, #1
 80099a2:	4638      	mov	r0, r7
 80099a4:	4621      	mov	r1, r4
 80099a6:	612e      	str	r6, [r5, #16]
 80099a8:	f7ff fd8c 	bl	80094c4 <_Bfree>
 80099ac:	4628      	mov	r0, r5
 80099ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80099b6:	3301      	adds	r3, #1
 80099b8:	e7c1      	b.n	800993e <__lshift+0x4a>
 80099ba:	3904      	subs	r1, #4
 80099bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c0:	4298      	cmp	r0, r3
 80099c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80099c6:	d8f9      	bhi.n	80099bc <__lshift+0xc8>
 80099c8:	e7ea      	b.n	80099a0 <__lshift+0xac>
 80099ca:	bf00      	nop
 80099cc:	0800ae30 	.word	0x0800ae30
 80099d0:	0800af20 	.word	0x0800af20

080099d4 <__mcmp>:
 80099d4:	4603      	mov	r3, r0
 80099d6:	690a      	ldr	r2, [r1, #16]
 80099d8:	6900      	ldr	r0, [r0, #16]
 80099da:	b530      	push	{r4, r5, lr}
 80099dc:	1a80      	subs	r0, r0, r2
 80099de:	d10d      	bne.n	80099fc <__mcmp+0x28>
 80099e0:	3314      	adds	r3, #20
 80099e2:	3114      	adds	r1, #20
 80099e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099f4:	4295      	cmp	r5, r2
 80099f6:	d002      	beq.n	80099fe <__mcmp+0x2a>
 80099f8:	d304      	bcc.n	8009a04 <__mcmp+0x30>
 80099fa:	2001      	movs	r0, #1
 80099fc:	bd30      	pop	{r4, r5, pc}
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	d3f4      	bcc.n	80099ec <__mcmp+0x18>
 8009a02:	e7fb      	b.n	80099fc <__mcmp+0x28>
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295
 8009a08:	e7f8      	b.n	80099fc <__mcmp+0x28>
	...

08009a0c <__mdiff>:
 8009a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	460d      	mov	r5, r1
 8009a12:	4607      	mov	r7, r0
 8009a14:	4611      	mov	r1, r2
 8009a16:	4628      	mov	r0, r5
 8009a18:	4614      	mov	r4, r2
 8009a1a:	f7ff ffdb 	bl	80099d4 <__mcmp>
 8009a1e:	1e06      	subs	r6, r0, #0
 8009a20:	d111      	bne.n	8009a46 <__mdiff+0x3a>
 8009a22:	4631      	mov	r1, r6
 8009a24:	4638      	mov	r0, r7
 8009a26:	f7ff fd0d 	bl	8009444 <_Balloc>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	b928      	cbnz	r0, 8009a3a <__mdiff+0x2e>
 8009a2e:	f240 2132 	movw	r1, #562	; 0x232
 8009a32:	4b3a      	ldr	r3, [pc, #232]	; (8009b1c <__mdiff+0x110>)
 8009a34:	483a      	ldr	r0, [pc, #232]	; (8009b20 <__mdiff+0x114>)
 8009a36:	f000 fe35 	bl	800a6a4 <__assert_func>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a40:	4610      	mov	r0, r2
 8009a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	bfa4      	itt	ge
 8009a48:	4623      	movge	r3, r4
 8009a4a:	462c      	movge	r4, r5
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	6861      	ldr	r1, [r4, #4]
 8009a50:	bfa6      	itte	ge
 8009a52:	461d      	movge	r5, r3
 8009a54:	2600      	movge	r6, #0
 8009a56:	2601      	movlt	r6, #1
 8009a58:	f7ff fcf4 	bl	8009444 <_Balloc>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	b918      	cbnz	r0, 8009a68 <__mdiff+0x5c>
 8009a60:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a64:	4b2d      	ldr	r3, [pc, #180]	; (8009b1c <__mdiff+0x110>)
 8009a66:	e7e5      	b.n	8009a34 <__mdiff+0x28>
 8009a68:	f102 0814 	add.w	r8, r2, #20
 8009a6c:	46c2      	mov	sl, r8
 8009a6e:	f04f 0c00 	mov.w	ip, #0
 8009a72:	6927      	ldr	r7, [r4, #16]
 8009a74:	60c6      	str	r6, [r0, #12]
 8009a76:	692e      	ldr	r6, [r5, #16]
 8009a78:	f104 0014 	add.w	r0, r4, #20
 8009a7c:	f105 0914 	add.w	r9, r5, #20
 8009a80:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009a84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a88:	3410      	adds	r4, #16
 8009a8a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009a8e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a92:	fa1f f18b 	uxth.w	r1, fp
 8009a96:	448c      	add	ip, r1
 8009a98:	b299      	uxth	r1, r3
 8009a9a:	0c1b      	lsrs	r3, r3, #16
 8009a9c:	ebac 0101 	sub.w	r1, ip, r1
 8009aa0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009aa4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009aa8:	b289      	uxth	r1, r1
 8009aaa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009aae:	454e      	cmp	r6, r9
 8009ab0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009ab4:	f84a 3b04 	str.w	r3, [sl], #4
 8009ab8:	d8e7      	bhi.n	8009a8a <__mdiff+0x7e>
 8009aba:	1b73      	subs	r3, r6, r5
 8009abc:	3b15      	subs	r3, #21
 8009abe:	f023 0303 	bic.w	r3, r3, #3
 8009ac2:	3515      	adds	r5, #21
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	42ae      	cmp	r6, r5
 8009ac8:	bf38      	it	cc
 8009aca:	2304      	movcc	r3, #4
 8009acc:	4418      	add	r0, r3
 8009ace:	4443      	add	r3, r8
 8009ad0:	461e      	mov	r6, r3
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	4575      	cmp	r5, lr
 8009ad6:	d30e      	bcc.n	8009af6 <__mdiff+0xea>
 8009ad8:	f10e 0103 	add.w	r1, lr, #3
 8009adc:	1a09      	subs	r1, r1, r0
 8009ade:	f021 0103 	bic.w	r1, r1, #3
 8009ae2:	3803      	subs	r0, #3
 8009ae4:	4586      	cmp	lr, r0
 8009ae6:	bf38      	it	cc
 8009ae8:	2100      	movcc	r1, #0
 8009aea:	4419      	add	r1, r3
 8009aec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009af0:	b18b      	cbz	r3, 8009b16 <__mdiff+0x10a>
 8009af2:	6117      	str	r7, [r2, #16]
 8009af4:	e7a4      	b.n	8009a40 <__mdiff+0x34>
 8009af6:	f855 8b04 	ldr.w	r8, [r5], #4
 8009afa:	fa1f f188 	uxth.w	r1, r8
 8009afe:	4461      	add	r1, ip
 8009b00:	140c      	asrs	r4, r1, #16
 8009b02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b06:	b289      	uxth	r1, r1
 8009b08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b0c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009b10:	f846 1b04 	str.w	r1, [r6], #4
 8009b14:	e7de      	b.n	8009ad4 <__mdiff+0xc8>
 8009b16:	3f01      	subs	r7, #1
 8009b18:	e7e8      	b.n	8009aec <__mdiff+0xe0>
 8009b1a:	bf00      	nop
 8009b1c:	0800ae30 	.word	0x0800ae30
 8009b20:	0800af20 	.word	0x0800af20

08009b24 <__ulp>:
 8009b24:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <__ulp+0x48>)
 8009b26:	400b      	ands	r3, r1
 8009b28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd02      	ble.n	8009b36 <__ulp+0x12>
 8009b30:	2000      	movs	r0, #0
 8009b32:	4619      	mov	r1, r3
 8009b34:	4770      	bx	lr
 8009b36:	425b      	negs	r3, r3
 8009b38:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009b3c:	f04f 0000 	mov.w	r0, #0
 8009b40:	f04f 0100 	mov.w	r1, #0
 8009b44:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b48:	da04      	bge.n	8009b54 <__ulp+0x30>
 8009b4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b4e:	fa43 f102 	asr.w	r1, r3, r2
 8009b52:	4770      	bx	lr
 8009b54:	f1a2 0314 	sub.w	r3, r2, #20
 8009b58:	2b1e      	cmp	r3, #30
 8009b5a:	bfd6      	itet	le
 8009b5c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009b60:	2301      	movgt	r3, #1
 8009b62:	fa22 f303 	lsrle.w	r3, r2, r3
 8009b66:	4618      	mov	r0, r3
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	7ff00000 	.word	0x7ff00000

08009b70 <__b2d>:
 8009b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	6907      	ldr	r7, [r0, #16]
 8009b76:	f100 0914 	add.w	r9, r0, #20
 8009b7a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009b7e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009b82:	f1a7 0804 	sub.w	r8, r7, #4
 8009b86:	4630      	mov	r0, r6
 8009b88:	f7ff fd4e 	bl	8009628 <__hi0bits>
 8009b8c:	f1c0 0320 	rsb	r3, r0, #32
 8009b90:	280a      	cmp	r0, #10
 8009b92:	600b      	str	r3, [r1, #0]
 8009b94:	491f      	ldr	r1, [pc, #124]	; (8009c14 <__b2d+0xa4>)
 8009b96:	dc17      	bgt.n	8009bc8 <__b2d+0x58>
 8009b98:	45c1      	cmp	r9, r8
 8009b9a:	bf28      	it	cs
 8009b9c:	2200      	movcs	r2, #0
 8009b9e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ba2:	fa26 f30c 	lsr.w	r3, r6, ip
 8009ba6:	bf38      	it	cc
 8009ba8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009bac:	ea43 0501 	orr.w	r5, r3, r1
 8009bb0:	f100 0315 	add.w	r3, r0, #21
 8009bb4:	fa06 f303 	lsl.w	r3, r6, r3
 8009bb8:	fa22 f20c 	lsr.w	r2, r2, ip
 8009bbc:	ea43 0402 	orr.w	r4, r3, r2
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc8:	45c1      	cmp	r9, r8
 8009bca:	bf2e      	itee	cs
 8009bcc:	2200      	movcs	r2, #0
 8009bce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009bd2:	f1a7 0808 	subcc.w	r8, r7, #8
 8009bd6:	f1b0 030b 	subs.w	r3, r0, #11
 8009bda:	d016      	beq.n	8009c0a <__b2d+0x9a>
 8009bdc:	f1c3 0720 	rsb	r7, r3, #32
 8009be0:	fa22 f107 	lsr.w	r1, r2, r7
 8009be4:	45c8      	cmp	r8, r9
 8009be6:	fa06 f603 	lsl.w	r6, r6, r3
 8009bea:	ea46 0601 	orr.w	r6, r6, r1
 8009bee:	bf94      	ite	ls
 8009bf0:	2100      	movls	r1, #0
 8009bf2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009bf6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009bfa:	fa02 f003 	lsl.w	r0, r2, r3
 8009bfe:	40f9      	lsrs	r1, r7
 8009c00:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009c04:	ea40 0401 	orr.w	r4, r0, r1
 8009c08:	e7da      	b.n	8009bc0 <__b2d+0x50>
 8009c0a:	4614      	mov	r4, r2
 8009c0c:	ea46 0501 	orr.w	r5, r6, r1
 8009c10:	e7d6      	b.n	8009bc0 <__b2d+0x50>
 8009c12:	bf00      	nop
 8009c14:	3ff00000 	.word	0x3ff00000

08009c18 <__d2b>:
 8009c18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009c22:	4690      	mov	r8, r2
 8009c24:	461d      	mov	r5, r3
 8009c26:	f7ff fc0d 	bl	8009444 <_Balloc>
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	b930      	cbnz	r0, 8009c3c <__d2b+0x24>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	f240 310a 	movw	r1, #778	; 0x30a
 8009c34:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <__d2b+0xb0>)
 8009c36:	4825      	ldr	r0, [pc, #148]	; (8009ccc <__d2b+0xb4>)
 8009c38:	f000 fd34 	bl	800a6a4 <__assert_func>
 8009c3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009c40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009c44:	bb2d      	cbnz	r5, 8009c92 <__d2b+0x7a>
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	f1b8 0300 	subs.w	r3, r8, #0
 8009c4c:	d026      	beq.n	8009c9c <__d2b+0x84>
 8009c4e:	4668      	mov	r0, sp
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	f7ff fd09 	bl	8009668 <__lo0bits>
 8009c56:	9900      	ldr	r1, [sp, #0]
 8009c58:	b1f0      	cbz	r0, 8009c98 <__d2b+0x80>
 8009c5a:	9a01      	ldr	r2, [sp, #4]
 8009c5c:	f1c0 0320 	rsb	r3, r0, #32
 8009c60:	fa02 f303 	lsl.w	r3, r2, r3
 8009c64:	430b      	orrs	r3, r1
 8009c66:	40c2      	lsrs	r2, r0
 8009c68:	6163      	str	r3, [r4, #20]
 8009c6a:	9201      	str	r2, [sp, #4]
 8009c6c:	9b01      	ldr	r3, [sp, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	bf14      	ite	ne
 8009c72:	2102      	movne	r1, #2
 8009c74:	2101      	moveq	r1, #1
 8009c76:	61a3      	str	r3, [r4, #24]
 8009c78:	6121      	str	r1, [r4, #16]
 8009c7a:	b1c5      	cbz	r5, 8009cae <__d2b+0x96>
 8009c7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c80:	4405      	add	r5, r0
 8009c82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c86:	603d      	str	r5, [r7, #0]
 8009c88:	6030      	str	r0, [r6, #0]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	b002      	add	sp, #8
 8009c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c96:	e7d6      	b.n	8009c46 <__d2b+0x2e>
 8009c98:	6161      	str	r1, [r4, #20]
 8009c9a:	e7e7      	b.n	8009c6c <__d2b+0x54>
 8009c9c:	a801      	add	r0, sp, #4
 8009c9e:	f7ff fce3 	bl	8009668 <__lo0bits>
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	6121      	str	r1, [r4, #16]
 8009ca8:	6163      	str	r3, [r4, #20]
 8009caa:	3020      	adds	r0, #32
 8009cac:	e7e5      	b.n	8009c7a <__d2b+0x62>
 8009cae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009cb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cb6:	6038      	str	r0, [r7, #0]
 8009cb8:	6918      	ldr	r0, [r3, #16]
 8009cba:	f7ff fcb5 	bl	8009628 <__hi0bits>
 8009cbe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009cc2:	6031      	str	r1, [r6, #0]
 8009cc4:	e7e1      	b.n	8009c8a <__d2b+0x72>
 8009cc6:	bf00      	nop
 8009cc8:	0800ae30 	.word	0x0800ae30
 8009ccc:	0800af20 	.word	0x0800af20

08009cd0 <__ratio>:
 8009cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	4688      	mov	r8, r1
 8009cd6:	4669      	mov	r1, sp
 8009cd8:	4681      	mov	r9, r0
 8009cda:	f7ff ff49 	bl	8009b70 <__b2d>
 8009cde:	460f      	mov	r7, r1
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	460d      	mov	r5, r1
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	a901      	add	r1, sp, #4
 8009ce8:	f7ff ff42 	bl	8009b70 <__b2d>
 8009cec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cf0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cf4:	468b      	mov	fp, r1
 8009cf6:	eba3 0c02 	sub.w	ip, r3, r2
 8009cfa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cfe:	1a9b      	subs	r3, r3, r2
 8009d00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bfd5      	itete	le
 8009d08:	460a      	movle	r2, r1
 8009d0a:	462a      	movgt	r2, r5
 8009d0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d10:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d14:	bfd8      	it	le
 8009d16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d1a:	465b      	mov	r3, fp
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4620      	mov	r0, r4
 8009d22:	f7f6 fd0d 	bl	8000740 <__aeabi_ddiv>
 8009d26:	b003      	add	sp, #12
 8009d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d2c <__copybits>:
 8009d2c:	3901      	subs	r1, #1
 8009d2e:	b570      	push	{r4, r5, r6, lr}
 8009d30:	1149      	asrs	r1, r1, #5
 8009d32:	6914      	ldr	r4, [r2, #16]
 8009d34:	3101      	adds	r1, #1
 8009d36:	f102 0314 	add.w	r3, r2, #20
 8009d3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d42:	1f05      	subs	r5, r0, #4
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	d30c      	bcc.n	8009d62 <__copybits+0x36>
 8009d48:	1aa3      	subs	r3, r4, r2
 8009d4a:	3b11      	subs	r3, #17
 8009d4c:	f023 0303 	bic.w	r3, r3, #3
 8009d50:	3211      	adds	r2, #17
 8009d52:	42a2      	cmp	r2, r4
 8009d54:	bf88      	it	hi
 8009d56:	2300      	movhi	r3, #0
 8009d58:	4418      	add	r0, r3
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4288      	cmp	r0, r1
 8009d5e:	d305      	bcc.n	8009d6c <__copybits+0x40>
 8009d60:	bd70      	pop	{r4, r5, r6, pc}
 8009d62:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d66:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d6a:	e7eb      	b.n	8009d44 <__copybits+0x18>
 8009d6c:	f840 3b04 	str.w	r3, [r0], #4
 8009d70:	e7f4      	b.n	8009d5c <__copybits+0x30>

08009d72 <__any_on>:
 8009d72:	f100 0214 	add.w	r2, r0, #20
 8009d76:	6900      	ldr	r0, [r0, #16]
 8009d78:	114b      	asrs	r3, r1, #5
 8009d7a:	4298      	cmp	r0, r3
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	db11      	blt.n	8009da4 <__any_on+0x32>
 8009d80:	dd0a      	ble.n	8009d98 <__any_on+0x26>
 8009d82:	f011 011f 	ands.w	r1, r1, #31
 8009d86:	d007      	beq.n	8009d98 <__any_on+0x26>
 8009d88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d8c:	fa24 f001 	lsr.w	r0, r4, r1
 8009d90:	fa00 f101 	lsl.w	r1, r0, r1
 8009d94:	428c      	cmp	r4, r1
 8009d96:	d10b      	bne.n	8009db0 <__any_on+0x3e>
 8009d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d803      	bhi.n	8009da8 <__any_on+0x36>
 8009da0:	2000      	movs	r0, #0
 8009da2:	bd10      	pop	{r4, pc}
 8009da4:	4603      	mov	r3, r0
 8009da6:	e7f7      	b.n	8009d98 <__any_on+0x26>
 8009da8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009dac:	2900      	cmp	r1, #0
 8009dae:	d0f5      	beq.n	8009d9c <__any_on+0x2a>
 8009db0:	2001      	movs	r0, #1
 8009db2:	e7f6      	b.n	8009da2 <__any_on+0x30>

08009db4 <_calloc_r>:
 8009db4:	b570      	push	{r4, r5, r6, lr}
 8009db6:	fba1 5402 	umull	r5, r4, r1, r2
 8009dba:	b934      	cbnz	r4, 8009dca <_calloc_r+0x16>
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f000 f875 	bl	8009eac <_malloc_r>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	b928      	cbnz	r0, 8009dd2 <_calloc_r+0x1e>
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	bd70      	pop	{r4, r5, r6, pc}
 8009dca:	220c      	movs	r2, #12
 8009dcc:	2600      	movs	r6, #0
 8009dce:	6002      	str	r2, [r0, #0]
 8009dd0:	e7f9      	b.n	8009dc6 <_calloc_r+0x12>
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	f7fc f857 	bl	8005e88 <memset>
 8009dda:	e7f4      	b.n	8009dc6 <_calloc_r+0x12>

08009ddc <_free_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4605      	mov	r5, r0
 8009de0:	2900      	cmp	r1, #0
 8009de2:	d040      	beq.n	8009e66 <_free_r+0x8a>
 8009de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009de8:	1f0c      	subs	r4, r1, #4
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bfb8      	it	lt
 8009dee:	18e4      	addlt	r4, r4, r3
 8009df0:	f000 fce6 	bl	800a7c0 <__malloc_lock>
 8009df4:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <_free_r+0x8c>)
 8009df6:	6813      	ldr	r3, [r2, #0]
 8009df8:	b933      	cbnz	r3, 8009e08 <_free_r+0x2c>
 8009dfa:	6063      	str	r3, [r4, #4]
 8009dfc:	6014      	str	r4, [r2, #0]
 8009dfe:	4628      	mov	r0, r5
 8009e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e04:	f000 bce2 	b.w	800a7cc <__malloc_unlock>
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d908      	bls.n	8009e1e <_free_r+0x42>
 8009e0c:	6820      	ldr	r0, [r4, #0]
 8009e0e:	1821      	adds	r1, r4, r0
 8009e10:	428b      	cmp	r3, r1
 8009e12:	bf01      	itttt	eq
 8009e14:	6819      	ldreq	r1, [r3, #0]
 8009e16:	685b      	ldreq	r3, [r3, #4]
 8009e18:	1809      	addeq	r1, r1, r0
 8009e1a:	6021      	streq	r1, [r4, #0]
 8009e1c:	e7ed      	b.n	8009dfa <_free_r+0x1e>
 8009e1e:	461a      	mov	r2, r3
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	b10b      	cbz	r3, 8009e28 <_free_r+0x4c>
 8009e24:	42a3      	cmp	r3, r4
 8009e26:	d9fa      	bls.n	8009e1e <_free_r+0x42>
 8009e28:	6811      	ldr	r1, [r2, #0]
 8009e2a:	1850      	adds	r0, r2, r1
 8009e2c:	42a0      	cmp	r0, r4
 8009e2e:	d10b      	bne.n	8009e48 <_free_r+0x6c>
 8009e30:	6820      	ldr	r0, [r4, #0]
 8009e32:	4401      	add	r1, r0
 8009e34:	1850      	adds	r0, r2, r1
 8009e36:	4283      	cmp	r3, r0
 8009e38:	6011      	str	r1, [r2, #0]
 8009e3a:	d1e0      	bne.n	8009dfe <_free_r+0x22>
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	4401      	add	r1, r0
 8009e42:	6011      	str	r1, [r2, #0]
 8009e44:	6053      	str	r3, [r2, #4]
 8009e46:	e7da      	b.n	8009dfe <_free_r+0x22>
 8009e48:	d902      	bls.n	8009e50 <_free_r+0x74>
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	e7d6      	b.n	8009dfe <_free_r+0x22>
 8009e50:	6820      	ldr	r0, [r4, #0]
 8009e52:	1821      	adds	r1, r4, r0
 8009e54:	428b      	cmp	r3, r1
 8009e56:	bf01      	itttt	eq
 8009e58:	6819      	ldreq	r1, [r3, #0]
 8009e5a:	685b      	ldreq	r3, [r3, #4]
 8009e5c:	1809      	addeq	r1, r1, r0
 8009e5e:	6021      	streq	r1, [r4, #0]
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	6054      	str	r4, [r2, #4]
 8009e64:	e7cb      	b.n	8009dfe <_free_r+0x22>
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	2000056c 	.word	0x2000056c

08009e6c <sbrk_aligned>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	4e0e      	ldr	r6, [pc, #56]	; (8009ea8 <sbrk_aligned+0x3c>)
 8009e70:	460c      	mov	r4, r1
 8009e72:	6831      	ldr	r1, [r6, #0]
 8009e74:	4605      	mov	r5, r0
 8009e76:	b911      	cbnz	r1, 8009e7e <sbrk_aligned+0x12>
 8009e78:	f000 fb8e 	bl	800a598 <_sbrk_r>
 8009e7c:	6030      	str	r0, [r6, #0]
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f000 fb89 	bl	800a598 <_sbrk_r>
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	d00a      	beq.n	8009ea0 <sbrk_aligned+0x34>
 8009e8a:	1cc4      	adds	r4, r0, #3
 8009e8c:	f024 0403 	bic.w	r4, r4, #3
 8009e90:	42a0      	cmp	r0, r4
 8009e92:	d007      	beq.n	8009ea4 <sbrk_aligned+0x38>
 8009e94:	1a21      	subs	r1, r4, r0
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 fb7e 	bl	800a598 <_sbrk_r>
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d101      	bne.n	8009ea4 <sbrk_aligned+0x38>
 8009ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	20000570 	.word	0x20000570

08009eac <_malloc_r>:
 8009eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb0:	1ccd      	adds	r5, r1, #3
 8009eb2:	f025 0503 	bic.w	r5, r5, #3
 8009eb6:	3508      	adds	r5, #8
 8009eb8:	2d0c      	cmp	r5, #12
 8009eba:	bf38      	it	cc
 8009ebc:	250c      	movcc	r5, #12
 8009ebe:	2d00      	cmp	r5, #0
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	db01      	blt.n	8009ec8 <_malloc_r+0x1c>
 8009ec4:	42a9      	cmp	r1, r5
 8009ec6:	d905      	bls.n	8009ed4 <_malloc_r+0x28>
 8009ec8:	230c      	movs	r3, #12
 8009eca:	2600      	movs	r6, #0
 8009ecc:	603b      	str	r3, [r7, #0]
 8009ece:	4630      	mov	r0, r6
 8009ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed4:	4e2e      	ldr	r6, [pc, #184]	; (8009f90 <_malloc_r+0xe4>)
 8009ed6:	f000 fc73 	bl	800a7c0 <__malloc_lock>
 8009eda:	6833      	ldr	r3, [r6, #0]
 8009edc:	461c      	mov	r4, r3
 8009ede:	bb34      	cbnz	r4, 8009f2e <_malloc_r+0x82>
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	f7ff ffc2 	bl	8009e6c <sbrk_aligned>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	4604      	mov	r4, r0
 8009eec:	d14d      	bne.n	8009f8a <_malloc_r+0xde>
 8009eee:	6834      	ldr	r4, [r6, #0]
 8009ef0:	4626      	mov	r6, r4
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	d140      	bne.n	8009f78 <_malloc_r+0xcc>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4638      	mov	r0, r7
 8009efc:	eb04 0803 	add.w	r8, r4, r3
 8009f00:	f000 fb4a 	bl	800a598 <_sbrk_r>
 8009f04:	4580      	cmp	r8, r0
 8009f06:	d13a      	bne.n	8009f7e <_malloc_r+0xd2>
 8009f08:	6821      	ldr	r1, [r4, #0]
 8009f0a:	3503      	adds	r5, #3
 8009f0c:	1a6d      	subs	r5, r5, r1
 8009f0e:	f025 0503 	bic.w	r5, r5, #3
 8009f12:	3508      	adds	r5, #8
 8009f14:	2d0c      	cmp	r5, #12
 8009f16:	bf38      	it	cc
 8009f18:	250c      	movcc	r5, #12
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	f7ff ffa5 	bl	8009e6c <sbrk_aligned>
 8009f22:	3001      	adds	r0, #1
 8009f24:	d02b      	beq.n	8009f7e <_malloc_r+0xd2>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	442b      	add	r3, r5
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	e00e      	b.n	8009f4c <_malloc_r+0xa0>
 8009f2e:	6822      	ldr	r2, [r4, #0]
 8009f30:	1b52      	subs	r2, r2, r5
 8009f32:	d41e      	bmi.n	8009f72 <_malloc_r+0xc6>
 8009f34:	2a0b      	cmp	r2, #11
 8009f36:	d916      	bls.n	8009f66 <_malloc_r+0xba>
 8009f38:	1961      	adds	r1, r4, r5
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	6025      	str	r5, [r4, #0]
 8009f3e:	bf18      	it	ne
 8009f40:	6059      	strne	r1, [r3, #4]
 8009f42:	6863      	ldr	r3, [r4, #4]
 8009f44:	bf08      	it	eq
 8009f46:	6031      	streq	r1, [r6, #0]
 8009f48:	5162      	str	r2, [r4, r5]
 8009f4a:	604b      	str	r3, [r1, #4]
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f104 060b 	add.w	r6, r4, #11
 8009f52:	f000 fc3b 	bl	800a7cc <__malloc_unlock>
 8009f56:	f026 0607 	bic.w	r6, r6, #7
 8009f5a:	1d23      	adds	r3, r4, #4
 8009f5c:	1af2      	subs	r2, r6, r3
 8009f5e:	d0b6      	beq.n	8009ece <_malloc_r+0x22>
 8009f60:	1b9b      	subs	r3, r3, r6
 8009f62:	50a3      	str	r3, [r4, r2]
 8009f64:	e7b3      	b.n	8009ece <_malloc_r+0x22>
 8009f66:	6862      	ldr	r2, [r4, #4]
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	bf0c      	ite	eq
 8009f6c:	6032      	streq	r2, [r6, #0]
 8009f6e:	605a      	strne	r2, [r3, #4]
 8009f70:	e7ec      	b.n	8009f4c <_malloc_r+0xa0>
 8009f72:	4623      	mov	r3, r4
 8009f74:	6864      	ldr	r4, [r4, #4]
 8009f76:	e7b2      	b.n	8009ede <_malloc_r+0x32>
 8009f78:	4634      	mov	r4, r6
 8009f7a:	6876      	ldr	r6, [r6, #4]
 8009f7c:	e7b9      	b.n	8009ef2 <_malloc_r+0x46>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	4638      	mov	r0, r7
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	f000 fc22 	bl	800a7cc <__malloc_unlock>
 8009f88:	e7a1      	b.n	8009ece <_malloc_r+0x22>
 8009f8a:	6025      	str	r5, [r4, #0]
 8009f8c:	e7de      	b.n	8009f4c <_malloc_r+0xa0>
 8009f8e:	bf00      	nop
 8009f90:	2000056c 	.word	0x2000056c

08009f94 <__ssputs_r>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	688e      	ldr	r6, [r1, #8]
 8009f9a:	4682      	mov	sl, r0
 8009f9c:	429e      	cmp	r6, r3
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	4690      	mov	r8, r2
 8009fa2:	461f      	mov	r7, r3
 8009fa4:	d838      	bhi.n	800a018 <__ssputs_r+0x84>
 8009fa6:	898a      	ldrh	r2, [r1, #12]
 8009fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fac:	d032      	beq.n	800a014 <__ssputs_r+0x80>
 8009fae:	6825      	ldr	r5, [r4, #0]
 8009fb0:	6909      	ldr	r1, [r1, #16]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	eba5 0901 	sub.w	r9, r5, r1
 8009fb8:	6965      	ldr	r5, [r4, #20]
 8009fba:	444b      	add	r3, r9
 8009fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fc4:	106d      	asrs	r5, r5, #1
 8009fc6:	429d      	cmp	r5, r3
 8009fc8:	bf38      	it	cc
 8009fca:	461d      	movcc	r5, r3
 8009fcc:	0553      	lsls	r3, r2, #21
 8009fce:	d531      	bpl.n	800a034 <__ssputs_r+0xa0>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7ff ff6b 	bl	8009eac <_malloc_r>
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	b950      	cbnz	r0, 8009ff0 <__ssputs_r+0x5c>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe0:	f8ca 3000 	str.w	r3, [sl]
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff0:	464a      	mov	r2, r9
 8009ff2:	6921      	ldr	r1, [r4, #16]
 8009ff4:	f7ff fa18 	bl	8009428 <memcpy>
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a002:	81a3      	strh	r3, [r4, #12]
 800a004:	6126      	str	r6, [r4, #16]
 800a006:	444e      	add	r6, r9
 800a008:	6026      	str	r6, [r4, #0]
 800a00a:	463e      	mov	r6, r7
 800a00c:	6165      	str	r5, [r4, #20]
 800a00e:	eba5 0509 	sub.w	r5, r5, r9
 800a012:	60a5      	str	r5, [r4, #8]
 800a014:	42be      	cmp	r6, r7
 800a016:	d900      	bls.n	800a01a <__ssputs_r+0x86>
 800a018:	463e      	mov	r6, r7
 800a01a:	4632      	mov	r2, r6
 800a01c:	4641      	mov	r1, r8
 800a01e:	6820      	ldr	r0, [r4, #0]
 800a020:	f000 fbb4 	bl	800a78c <memmove>
 800a024:	68a3      	ldr	r3, [r4, #8]
 800a026:	2000      	movs	r0, #0
 800a028:	1b9b      	subs	r3, r3, r6
 800a02a:	60a3      	str	r3, [r4, #8]
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	4433      	add	r3, r6
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	e7db      	b.n	8009fec <__ssputs_r+0x58>
 800a034:	462a      	mov	r2, r5
 800a036:	f000 fbcf 	bl	800a7d8 <_realloc_r>
 800a03a:	4606      	mov	r6, r0
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d1e1      	bne.n	800a004 <__ssputs_r+0x70>
 800a040:	4650      	mov	r0, sl
 800a042:	6921      	ldr	r1, [r4, #16]
 800a044:	f7ff feca 	bl	8009ddc <_free_r>
 800a048:	e7c7      	b.n	8009fda <__ssputs_r+0x46>
	...

0800a04c <_svfiprintf_r>:
 800a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	4698      	mov	r8, r3
 800a052:	898b      	ldrh	r3, [r1, #12]
 800a054:	4607      	mov	r7, r0
 800a056:	061b      	lsls	r3, r3, #24
 800a058:	460d      	mov	r5, r1
 800a05a:	4614      	mov	r4, r2
 800a05c:	b09d      	sub	sp, #116	; 0x74
 800a05e:	d50e      	bpl.n	800a07e <_svfiprintf_r+0x32>
 800a060:	690b      	ldr	r3, [r1, #16]
 800a062:	b963      	cbnz	r3, 800a07e <_svfiprintf_r+0x32>
 800a064:	2140      	movs	r1, #64	; 0x40
 800a066:	f7ff ff21 	bl	8009eac <_malloc_r>
 800a06a:	6028      	str	r0, [r5, #0]
 800a06c:	6128      	str	r0, [r5, #16]
 800a06e:	b920      	cbnz	r0, 800a07a <_svfiprintf_r+0x2e>
 800a070:	230c      	movs	r3, #12
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	f04f 30ff 	mov.w	r0, #4294967295
 800a078:	e0d1      	b.n	800a21e <_svfiprintf_r+0x1d2>
 800a07a:	2340      	movs	r3, #64	; 0x40
 800a07c:	616b      	str	r3, [r5, #20]
 800a07e:	2300      	movs	r3, #0
 800a080:	9309      	str	r3, [sp, #36]	; 0x24
 800a082:	2320      	movs	r3, #32
 800a084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a088:	2330      	movs	r3, #48	; 0x30
 800a08a:	f04f 0901 	mov.w	r9, #1
 800a08e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a092:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a238 <_svfiprintf_r+0x1ec>
 800a096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a09a:	4623      	mov	r3, r4
 800a09c:	469a      	mov	sl, r3
 800a09e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0a2:	b10a      	cbz	r2, 800a0a8 <_svfiprintf_r+0x5c>
 800a0a4:	2a25      	cmp	r2, #37	; 0x25
 800a0a6:	d1f9      	bne.n	800a09c <_svfiprintf_r+0x50>
 800a0a8:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ac:	d00b      	beq.n	800a0c6 <_svfiprintf_r+0x7a>
 800a0ae:	465b      	mov	r3, fp
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	f7ff ff6d 	bl	8009f94 <__ssputs_r>
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	f000 80aa 	beq.w	800a214 <_svfiprintf_r+0x1c8>
 800a0c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c2:	445a      	add	r2, fp
 800a0c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 80a2 	beq.w	800a214 <_svfiprintf_r+0x1c8>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0da:	f10a 0a01 	add.w	sl, sl, #1
 800a0de:	9304      	str	r3, [sp, #16]
 800a0e0:	9307      	str	r3, [sp, #28]
 800a0e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0e6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e8:	4654      	mov	r4, sl
 800a0ea:	2205      	movs	r2, #5
 800a0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f0:	4851      	ldr	r0, [pc, #324]	; (800a238 <_svfiprintf_r+0x1ec>)
 800a0f2:	f7ff f98b 	bl	800940c <memchr>
 800a0f6:	9a04      	ldr	r2, [sp, #16]
 800a0f8:	b9d8      	cbnz	r0, 800a132 <_svfiprintf_r+0xe6>
 800a0fa:	06d0      	lsls	r0, r2, #27
 800a0fc:	bf44      	itt	mi
 800a0fe:	2320      	movmi	r3, #32
 800a100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a104:	0711      	lsls	r1, r2, #28
 800a106:	bf44      	itt	mi
 800a108:	232b      	movmi	r3, #43	; 0x2b
 800a10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a10e:	f89a 3000 	ldrb.w	r3, [sl]
 800a112:	2b2a      	cmp	r3, #42	; 0x2a
 800a114:	d015      	beq.n	800a142 <_svfiprintf_r+0xf6>
 800a116:	4654      	mov	r4, sl
 800a118:	2000      	movs	r0, #0
 800a11a:	f04f 0c0a 	mov.w	ip, #10
 800a11e:	9a07      	ldr	r2, [sp, #28]
 800a120:	4621      	mov	r1, r4
 800a122:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a126:	3b30      	subs	r3, #48	; 0x30
 800a128:	2b09      	cmp	r3, #9
 800a12a:	d94e      	bls.n	800a1ca <_svfiprintf_r+0x17e>
 800a12c:	b1b0      	cbz	r0, 800a15c <_svfiprintf_r+0x110>
 800a12e:	9207      	str	r2, [sp, #28]
 800a130:	e014      	b.n	800a15c <_svfiprintf_r+0x110>
 800a132:	eba0 0308 	sub.w	r3, r0, r8
 800a136:	fa09 f303 	lsl.w	r3, r9, r3
 800a13a:	4313      	orrs	r3, r2
 800a13c:	46a2      	mov	sl, r4
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	e7d2      	b.n	800a0e8 <_svfiprintf_r+0x9c>
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	1d19      	adds	r1, r3, #4
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	9103      	str	r1, [sp, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bfbb      	ittet	lt
 800a14e:	425b      	neglt	r3, r3
 800a150:	f042 0202 	orrlt.w	r2, r2, #2
 800a154:	9307      	strge	r3, [sp, #28]
 800a156:	9307      	strlt	r3, [sp, #28]
 800a158:	bfb8      	it	lt
 800a15a:	9204      	strlt	r2, [sp, #16]
 800a15c:	7823      	ldrb	r3, [r4, #0]
 800a15e:	2b2e      	cmp	r3, #46	; 0x2e
 800a160:	d10c      	bne.n	800a17c <_svfiprintf_r+0x130>
 800a162:	7863      	ldrb	r3, [r4, #1]
 800a164:	2b2a      	cmp	r3, #42	; 0x2a
 800a166:	d135      	bne.n	800a1d4 <_svfiprintf_r+0x188>
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	3402      	adds	r4, #2
 800a16c:	1d1a      	adds	r2, r3, #4
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	9203      	str	r2, [sp, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	bfb8      	it	lt
 800a176:	f04f 33ff 	movlt.w	r3, #4294967295
 800a17a:	9305      	str	r3, [sp, #20]
 800a17c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a23c <_svfiprintf_r+0x1f0>
 800a180:	2203      	movs	r2, #3
 800a182:	4650      	mov	r0, sl
 800a184:	7821      	ldrb	r1, [r4, #0]
 800a186:	f7ff f941 	bl	800940c <memchr>
 800a18a:	b140      	cbz	r0, 800a19e <_svfiprintf_r+0x152>
 800a18c:	2340      	movs	r3, #64	; 0x40
 800a18e:	eba0 000a 	sub.w	r0, r0, sl
 800a192:	fa03 f000 	lsl.w	r0, r3, r0
 800a196:	9b04      	ldr	r3, [sp, #16]
 800a198:	3401      	adds	r4, #1
 800a19a:	4303      	orrs	r3, r0
 800a19c:	9304      	str	r3, [sp, #16]
 800a19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a2:	2206      	movs	r2, #6
 800a1a4:	4826      	ldr	r0, [pc, #152]	; (800a240 <_svfiprintf_r+0x1f4>)
 800a1a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1aa:	f7ff f92f 	bl	800940c <memchr>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d038      	beq.n	800a224 <_svfiprintf_r+0x1d8>
 800a1b2:	4b24      	ldr	r3, [pc, #144]	; (800a244 <_svfiprintf_r+0x1f8>)
 800a1b4:	bb1b      	cbnz	r3, 800a1fe <_svfiprintf_r+0x1b2>
 800a1b6:	9b03      	ldr	r3, [sp, #12]
 800a1b8:	3307      	adds	r3, #7
 800a1ba:	f023 0307 	bic.w	r3, r3, #7
 800a1be:	3308      	adds	r3, #8
 800a1c0:	9303      	str	r3, [sp, #12]
 800a1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c4:	4433      	add	r3, r6
 800a1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c8:	e767      	b.n	800a09a <_svfiprintf_r+0x4e>
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	2001      	movs	r0, #1
 800a1ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1d2:	e7a5      	b.n	800a120 <_svfiprintf_r+0xd4>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f04f 0c0a 	mov.w	ip, #10
 800a1da:	4619      	mov	r1, r3
 800a1dc:	3401      	adds	r4, #1
 800a1de:	9305      	str	r3, [sp, #20]
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1e6:	3a30      	subs	r2, #48	; 0x30
 800a1e8:	2a09      	cmp	r2, #9
 800a1ea:	d903      	bls.n	800a1f4 <_svfiprintf_r+0x1a8>
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0c5      	beq.n	800a17c <_svfiprintf_r+0x130>
 800a1f0:	9105      	str	r1, [sp, #20]
 800a1f2:	e7c3      	b.n	800a17c <_svfiprintf_r+0x130>
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1fc:	e7f0      	b.n	800a1e0 <_svfiprintf_r+0x194>
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	462a      	mov	r2, r5
 800a204:	4638      	mov	r0, r7
 800a206:	4b10      	ldr	r3, [pc, #64]	; (800a248 <_svfiprintf_r+0x1fc>)
 800a208:	a904      	add	r1, sp, #16
 800a20a:	f7fb fee3 	bl	8005fd4 <_printf_float>
 800a20e:	1c42      	adds	r2, r0, #1
 800a210:	4606      	mov	r6, r0
 800a212:	d1d6      	bne.n	800a1c2 <_svfiprintf_r+0x176>
 800a214:	89ab      	ldrh	r3, [r5, #12]
 800a216:	065b      	lsls	r3, r3, #25
 800a218:	f53f af2c 	bmi.w	800a074 <_svfiprintf_r+0x28>
 800a21c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a21e:	b01d      	add	sp, #116	; 0x74
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	ab03      	add	r3, sp, #12
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	462a      	mov	r2, r5
 800a22a:	4638      	mov	r0, r7
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <_svfiprintf_r+0x1fc>)
 800a22e:	a904      	add	r1, sp, #16
 800a230:	f7fc f96c 	bl	800650c <_printf_i>
 800a234:	e7eb      	b.n	800a20e <_svfiprintf_r+0x1c2>
 800a236:	bf00      	nop
 800a238:	0800b07c 	.word	0x0800b07c
 800a23c:	0800b082 	.word	0x0800b082
 800a240:	0800b086 	.word	0x0800b086
 800a244:	08005fd5 	.word	0x08005fd5
 800a248:	08009f95 	.word	0x08009f95

0800a24c <__sfputc_r>:
 800a24c:	6893      	ldr	r3, [r2, #8]
 800a24e:	b410      	push	{r4}
 800a250:	3b01      	subs	r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	6093      	str	r3, [r2, #8]
 800a256:	da07      	bge.n	800a268 <__sfputc_r+0x1c>
 800a258:	6994      	ldr	r4, [r2, #24]
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	db01      	blt.n	800a262 <__sfputc_r+0x16>
 800a25e:	290a      	cmp	r1, #10
 800a260:	d102      	bne.n	800a268 <__sfputc_r+0x1c>
 800a262:	bc10      	pop	{r4}
 800a264:	f7fd bbf6 	b.w	8007a54 <__swbuf_r>
 800a268:	6813      	ldr	r3, [r2, #0]
 800a26a:	1c58      	adds	r0, r3, #1
 800a26c:	6010      	str	r0, [r2, #0]
 800a26e:	7019      	strb	r1, [r3, #0]
 800a270:	4608      	mov	r0, r1
 800a272:	bc10      	pop	{r4}
 800a274:	4770      	bx	lr

0800a276 <__sfputs_r>:
 800a276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a278:	4606      	mov	r6, r0
 800a27a:	460f      	mov	r7, r1
 800a27c:	4614      	mov	r4, r2
 800a27e:	18d5      	adds	r5, r2, r3
 800a280:	42ac      	cmp	r4, r5
 800a282:	d101      	bne.n	800a288 <__sfputs_r+0x12>
 800a284:	2000      	movs	r0, #0
 800a286:	e007      	b.n	800a298 <__sfputs_r+0x22>
 800a288:	463a      	mov	r2, r7
 800a28a:	4630      	mov	r0, r6
 800a28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a290:	f7ff ffdc 	bl	800a24c <__sfputc_r>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d1f3      	bne.n	800a280 <__sfputs_r+0xa>
 800a298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a29c <_vfiprintf_r>:
 800a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	4614      	mov	r4, r2
 800a2a4:	4698      	mov	r8, r3
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	b09d      	sub	sp, #116	; 0x74
 800a2aa:	b118      	cbz	r0, 800a2b4 <_vfiprintf_r+0x18>
 800a2ac:	6983      	ldr	r3, [r0, #24]
 800a2ae:	b90b      	cbnz	r3, 800a2b4 <_vfiprintf_r+0x18>
 800a2b0:	f7fe fc22 	bl	8008af8 <__sinit>
 800a2b4:	4b89      	ldr	r3, [pc, #548]	; (800a4dc <_vfiprintf_r+0x240>)
 800a2b6:	429d      	cmp	r5, r3
 800a2b8:	d11b      	bne.n	800a2f2 <_vfiprintf_r+0x56>
 800a2ba:	6875      	ldr	r5, [r6, #4]
 800a2bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2be:	07d9      	lsls	r1, r3, #31
 800a2c0:	d405      	bmi.n	800a2ce <_vfiprintf_r+0x32>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	059a      	lsls	r2, r3, #22
 800a2c6:	d402      	bmi.n	800a2ce <_vfiprintf_r+0x32>
 800a2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ca:	f7ff f81e 	bl	800930a <__retarget_lock_acquire_recursive>
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	071b      	lsls	r3, r3, #28
 800a2d2:	d501      	bpl.n	800a2d8 <_vfiprintf_r+0x3c>
 800a2d4:	692b      	ldr	r3, [r5, #16]
 800a2d6:	b9eb      	cbnz	r3, 800a314 <_vfiprintf_r+0x78>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7fd fc0c 	bl	8007af8 <__swsetup_r>
 800a2e0:	b1c0      	cbz	r0, 800a314 <_vfiprintf_r+0x78>
 800a2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2e4:	07dc      	lsls	r4, r3, #31
 800a2e6:	d50e      	bpl.n	800a306 <_vfiprintf_r+0x6a>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	b01d      	add	sp, #116	; 0x74
 800a2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f2:	4b7b      	ldr	r3, [pc, #492]	; (800a4e0 <_vfiprintf_r+0x244>)
 800a2f4:	429d      	cmp	r5, r3
 800a2f6:	d101      	bne.n	800a2fc <_vfiprintf_r+0x60>
 800a2f8:	68b5      	ldr	r5, [r6, #8]
 800a2fa:	e7df      	b.n	800a2bc <_vfiprintf_r+0x20>
 800a2fc:	4b79      	ldr	r3, [pc, #484]	; (800a4e4 <_vfiprintf_r+0x248>)
 800a2fe:	429d      	cmp	r5, r3
 800a300:	bf08      	it	eq
 800a302:	68f5      	ldreq	r5, [r6, #12]
 800a304:	e7da      	b.n	800a2bc <_vfiprintf_r+0x20>
 800a306:	89ab      	ldrh	r3, [r5, #12]
 800a308:	0598      	lsls	r0, r3, #22
 800a30a:	d4ed      	bmi.n	800a2e8 <_vfiprintf_r+0x4c>
 800a30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30e:	f7fe fffd 	bl	800930c <__retarget_lock_release_recursive>
 800a312:	e7e9      	b.n	800a2e8 <_vfiprintf_r+0x4c>
 800a314:	2300      	movs	r3, #0
 800a316:	9309      	str	r3, [sp, #36]	; 0x24
 800a318:	2320      	movs	r3, #32
 800a31a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a31e:	2330      	movs	r3, #48	; 0x30
 800a320:	f04f 0901 	mov.w	r9, #1
 800a324:	f8cd 800c 	str.w	r8, [sp, #12]
 800a328:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a4e8 <_vfiprintf_r+0x24c>
 800a32c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a330:	4623      	mov	r3, r4
 800a332:	469a      	mov	sl, r3
 800a334:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a338:	b10a      	cbz	r2, 800a33e <_vfiprintf_r+0xa2>
 800a33a:	2a25      	cmp	r2, #37	; 0x25
 800a33c:	d1f9      	bne.n	800a332 <_vfiprintf_r+0x96>
 800a33e:	ebba 0b04 	subs.w	fp, sl, r4
 800a342:	d00b      	beq.n	800a35c <_vfiprintf_r+0xc0>
 800a344:	465b      	mov	r3, fp
 800a346:	4622      	mov	r2, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	4630      	mov	r0, r6
 800a34c:	f7ff ff93 	bl	800a276 <__sfputs_r>
 800a350:	3001      	adds	r0, #1
 800a352:	f000 80aa 	beq.w	800a4aa <_vfiprintf_r+0x20e>
 800a356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a358:	445a      	add	r2, fp
 800a35a:	9209      	str	r2, [sp, #36]	; 0x24
 800a35c:	f89a 3000 	ldrb.w	r3, [sl]
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 80a2 	beq.w	800a4aa <_vfiprintf_r+0x20e>
 800a366:	2300      	movs	r3, #0
 800a368:	f04f 32ff 	mov.w	r2, #4294967295
 800a36c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a370:	f10a 0a01 	add.w	sl, sl, #1
 800a374:	9304      	str	r3, [sp, #16]
 800a376:	9307      	str	r3, [sp, #28]
 800a378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a37c:	931a      	str	r3, [sp, #104]	; 0x68
 800a37e:	4654      	mov	r4, sl
 800a380:	2205      	movs	r2, #5
 800a382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a386:	4858      	ldr	r0, [pc, #352]	; (800a4e8 <_vfiprintf_r+0x24c>)
 800a388:	f7ff f840 	bl	800940c <memchr>
 800a38c:	9a04      	ldr	r2, [sp, #16]
 800a38e:	b9d8      	cbnz	r0, 800a3c8 <_vfiprintf_r+0x12c>
 800a390:	06d1      	lsls	r1, r2, #27
 800a392:	bf44      	itt	mi
 800a394:	2320      	movmi	r3, #32
 800a396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a39a:	0713      	lsls	r3, r2, #28
 800a39c:	bf44      	itt	mi
 800a39e:	232b      	movmi	r3, #43	; 0x2b
 800a3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3aa:	d015      	beq.n	800a3d8 <_vfiprintf_r+0x13c>
 800a3ac:	4654      	mov	r4, sl
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	f04f 0c0a 	mov.w	ip, #10
 800a3b4:	9a07      	ldr	r2, [sp, #28]
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3bc:	3b30      	subs	r3, #48	; 0x30
 800a3be:	2b09      	cmp	r3, #9
 800a3c0:	d94e      	bls.n	800a460 <_vfiprintf_r+0x1c4>
 800a3c2:	b1b0      	cbz	r0, 800a3f2 <_vfiprintf_r+0x156>
 800a3c4:	9207      	str	r2, [sp, #28]
 800a3c6:	e014      	b.n	800a3f2 <_vfiprintf_r+0x156>
 800a3c8:	eba0 0308 	sub.w	r3, r0, r8
 800a3cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	46a2      	mov	sl, r4
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	e7d2      	b.n	800a37e <_vfiprintf_r+0xe2>
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	1d19      	adds	r1, r3, #4
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	9103      	str	r1, [sp, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	bfbb      	ittet	lt
 800a3e4:	425b      	neglt	r3, r3
 800a3e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ea:	9307      	strge	r3, [sp, #28]
 800a3ec:	9307      	strlt	r3, [sp, #28]
 800a3ee:	bfb8      	it	lt
 800a3f0:	9204      	strlt	r2, [sp, #16]
 800a3f2:	7823      	ldrb	r3, [r4, #0]
 800a3f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f6:	d10c      	bne.n	800a412 <_vfiprintf_r+0x176>
 800a3f8:	7863      	ldrb	r3, [r4, #1]
 800a3fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fc:	d135      	bne.n	800a46a <_vfiprintf_r+0x1ce>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	3402      	adds	r4, #2
 800a402:	1d1a      	adds	r2, r3, #4
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	9203      	str	r2, [sp, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bfb8      	it	lt
 800a40c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a4ec <_vfiprintf_r+0x250>
 800a416:	2203      	movs	r2, #3
 800a418:	4650      	mov	r0, sl
 800a41a:	7821      	ldrb	r1, [r4, #0]
 800a41c:	f7fe fff6 	bl	800940c <memchr>
 800a420:	b140      	cbz	r0, 800a434 <_vfiprintf_r+0x198>
 800a422:	2340      	movs	r3, #64	; 0x40
 800a424:	eba0 000a 	sub.w	r0, r0, sl
 800a428:	fa03 f000 	lsl.w	r0, r3, r0
 800a42c:	9b04      	ldr	r3, [sp, #16]
 800a42e:	3401      	adds	r4, #1
 800a430:	4303      	orrs	r3, r0
 800a432:	9304      	str	r3, [sp, #16]
 800a434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a438:	2206      	movs	r2, #6
 800a43a:	482d      	ldr	r0, [pc, #180]	; (800a4f0 <_vfiprintf_r+0x254>)
 800a43c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a440:	f7fe ffe4 	bl	800940c <memchr>
 800a444:	2800      	cmp	r0, #0
 800a446:	d03f      	beq.n	800a4c8 <_vfiprintf_r+0x22c>
 800a448:	4b2a      	ldr	r3, [pc, #168]	; (800a4f4 <_vfiprintf_r+0x258>)
 800a44a:	bb1b      	cbnz	r3, 800a494 <_vfiprintf_r+0x1f8>
 800a44c:	9b03      	ldr	r3, [sp, #12]
 800a44e:	3307      	adds	r3, #7
 800a450:	f023 0307 	bic.w	r3, r3, #7
 800a454:	3308      	adds	r3, #8
 800a456:	9303      	str	r3, [sp, #12]
 800a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45a:	443b      	add	r3, r7
 800a45c:	9309      	str	r3, [sp, #36]	; 0x24
 800a45e:	e767      	b.n	800a330 <_vfiprintf_r+0x94>
 800a460:	460c      	mov	r4, r1
 800a462:	2001      	movs	r0, #1
 800a464:	fb0c 3202 	mla	r2, ip, r2, r3
 800a468:	e7a5      	b.n	800a3b6 <_vfiprintf_r+0x11a>
 800a46a:	2300      	movs	r3, #0
 800a46c:	f04f 0c0a 	mov.w	ip, #10
 800a470:	4619      	mov	r1, r3
 800a472:	3401      	adds	r4, #1
 800a474:	9305      	str	r3, [sp, #20]
 800a476:	4620      	mov	r0, r4
 800a478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a47c:	3a30      	subs	r2, #48	; 0x30
 800a47e:	2a09      	cmp	r2, #9
 800a480:	d903      	bls.n	800a48a <_vfiprintf_r+0x1ee>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0c5      	beq.n	800a412 <_vfiprintf_r+0x176>
 800a486:	9105      	str	r1, [sp, #20]
 800a488:	e7c3      	b.n	800a412 <_vfiprintf_r+0x176>
 800a48a:	4604      	mov	r4, r0
 800a48c:	2301      	movs	r3, #1
 800a48e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a492:	e7f0      	b.n	800a476 <_vfiprintf_r+0x1da>
 800a494:	ab03      	add	r3, sp, #12
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	462a      	mov	r2, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	4b16      	ldr	r3, [pc, #88]	; (800a4f8 <_vfiprintf_r+0x25c>)
 800a49e:	a904      	add	r1, sp, #16
 800a4a0:	f7fb fd98 	bl	8005fd4 <_printf_float>
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	1c78      	adds	r0, r7, #1
 800a4a8:	d1d6      	bne.n	800a458 <_vfiprintf_r+0x1bc>
 800a4aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4ac:	07d9      	lsls	r1, r3, #31
 800a4ae:	d405      	bmi.n	800a4bc <_vfiprintf_r+0x220>
 800a4b0:	89ab      	ldrh	r3, [r5, #12]
 800a4b2:	059a      	lsls	r2, r3, #22
 800a4b4:	d402      	bmi.n	800a4bc <_vfiprintf_r+0x220>
 800a4b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4b8:	f7fe ff28 	bl	800930c <__retarget_lock_release_recursive>
 800a4bc:	89ab      	ldrh	r3, [r5, #12]
 800a4be:	065b      	lsls	r3, r3, #25
 800a4c0:	f53f af12 	bmi.w	800a2e8 <_vfiprintf_r+0x4c>
 800a4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4c6:	e711      	b.n	800a2ec <_vfiprintf_r+0x50>
 800a4c8:	ab03      	add	r3, sp, #12
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	462a      	mov	r2, r5
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <_vfiprintf_r+0x25c>)
 800a4d2:	a904      	add	r1, sp, #16
 800a4d4:	f7fc f81a 	bl	800650c <_printf_i>
 800a4d8:	e7e4      	b.n	800a4a4 <_vfiprintf_r+0x208>
 800a4da:	bf00      	nop
 800a4dc:	0800ae64 	.word	0x0800ae64
 800a4e0:	0800ae84 	.word	0x0800ae84
 800a4e4:	0800ae44 	.word	0x0800ae44
 800a4e8:	0800b07c 	.word	0x0800b07c
 800a4ec:	0800b082 	.word	0x0800b082
 800a4f0:	0800b086 	.word	0x0800b086
 800a4f4:	08005fd5 	.word	0x08005fd5
 800a4f8:	0800a277 	.word	0x0800a277

0800a4fc <_putc_r>:
 800a4fc:	b570      	push	{r4, r5, r6, lr}
 800a4fe:	460d      	mov	r5, r1
 800a500:	4614      	mov	r4, r2
 800a502:	4606      	mov	r6, r0
 800a504:	b118      	cbz	r0, 800a50e <_putc_r+0x12>
 800a506:	6983      	ldr	r3, [r0, #24]
 800a508:	b90b      	cbnz	r3, 800a50e <_putc_r+0x12>
 800a50a:	f7fe faf5 	bl	8008af8 <__sinit>
 800a50e:	4b1c      	ldr	r3, [pc, #112]	; (800a580 <_putc_r+0x84>)
 800a510:	429c      	cmp	r4, r3
 800a512:	d124      	bne.n	800a55e <_putc_r+0x62>
 800a514:	6874      	ldr	r4, [r6, #4]
 800a516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a518:	07d8      	lsls	r0, r3, #31
 800a51a:	d405      	bmi.n	800a528 <_putc_r+0x2c>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	0599      	lsls	r1, r3, #22
 800a520:	d402      	bmi.n	800a528 <_putc_r+0x2c>
 800a522:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a524:	f7fe fef1 	bl	800930a <__retarget_lock_acquire_recursive>
 800a528:	68a3      	ldr	r3, [r4, #8]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	da05      	bge.n	800a53e <_putc_r+0x42>
 800a532:	69a2      	ldr	r2, [r4, #24]
 800a534:	4293      	cmp	r3, r2
 800a536:	db1c      	blt.n	800a572 <_putc_r+0x76>
 800a538:	b2eb      	uxtb	r3, r5
 800a53a:	2b0a      	cmp	r3, #10
 800a53c:	d019      	beq.n	800a572 <_putc_r+0x76>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	6022      	str	r2, [r4, #0]
 800a544:	701d      	strb	r5, [r3, #0]
 800a546:	b2ed      	uxtb	r5, r5
 800a548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a54a:	07da      	lsls	r2, r3, #31
 800a54c:	d405      	bmi.n	800a55a <_putc_r+0x5e>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	059b      	lsls	r3, r3, #22
 800a552:	d402      	bmi.n	800a55a <_putc_r+0x5e>
 800a554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a556:	f7fe fed9 	bl	800930c <__retarget_lock_release_recursive>
 800a55a:	4628      	mov	r0, r5
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	4b09      	ldr	r3, [pc, #36]	; (800a584 <_putc_r+0x88>)
 800a560:	429c      	cmp	r4, r3
 800a562:	d101      	bne.n	800a568 <_putc_r+0x6c>
 800a564:	68b4      	ldr	r4, [r6, #8]
 800a566:	e7d6      	b.n	800a516 <_putc_r+0x1a>
 800a568:	4b07      	ldr	r3, [pc, #28]	; (800a588 <_putc_r+0x8c>)
 800a56a:	429c      	cmp	r4, r3
 800a56c:	bf08      	it	eq
 800a56e:	68f4      	ldreq	r4, [r6, #12]
 800a570:	e7d1      	b.n	800a516 <_putc_r+0x1a>
 800a572:	4629      	mov	r1, r5
 800a574:	4622      	mov	r2, r4
 800a576:	4630      	mov	r0, r6
 800a578:	f7fd fa6c 	bl	8007a54 <__swbuf_r>
 800a57c:	4605      	mov	r5, r0
 800a57e:	e7e3      	b.n	800a548 <_putc_r+0x4c>
 800a580:	0800ae64 	.word	0x0800ae64
 800a584:	0800ae84 	.word	0x0800ae84
 800a588:	0800ae44 	.word	0x0800ae44

0800a58c <nan>:
 800a58c:	2000      	movs	r0, #0
 800a58e:	4901      	ldr	r1, [pc, #4]	; (800a594 <nan+0x8>)
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	7ff80000 	.word	0x7ff80000

0800a598 <_sbrk_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	2300      	movs	r3, #0
 800a59c:	4d05      	ldr	r5, [pc, #20]	; (800a5b4 <_sbrk_r+0x1c>)
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	f7f8 f836 	bl	8002614 <_sbrk>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_sbrk_r+0x1a>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_sbrk_r+0x1a>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	20000574 	.word	0x20000574

0800a5b8 <__sread>:
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c0:	f000 f93a 	bl	800a838 <_read_r>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	bfab      	itete	ge
 800a5c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a5cc:	181b      	addge	r3, r3, r0
 800a5ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5d2:	bfac      	ite	ge
 800a5d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5d6:	81a3      	strhlt	r3, [r4, #12]
 800a5d8:	bd10      	pop	{r4, pc}

0800a5da <__swrite>:
 800a5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5de:	461f      	mov	r7, r3
 800a5e0:	898b      	ldrh	r3, [r1, #12]
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	05db      	lsls	r3, r3, #23
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	4616      	mov	r6, r2
 800a5ea:	d505      	bpl.n	800a5f8 <__swrite+0x1e>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f4:	f000 f8b8 	bl	800a768 <_lseek_r>
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	4632      	mov	r2, r6
 800a5fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	4628      	mov	r0, r5
 800a604:	463b      	mov	r3, r7
 800a606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a60e:	f000 b837 	b.w	800a680 <_write_r>

0800a612 <__sseek>:
 800a612:	b510      	push	{r4, lr}
 800a614:	460c      	mov	r4, r1
 800a616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61a:	f000 f8a5 	bl	800a768 <_lseek_r>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	bf15      	itete	ne
 800a624:	6560      	strne	r0, [r4, #84]	; 0x54
 800a626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a62a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a62e:	81a3      	strheq	r3, [r4, #12]
 800a630:	bf18      	it	ne
 800a632:	81a3      	strhne	r3, [r4, #12]
 800a634:	bd10      	pop	{r4, pc}

0800a636 <__sclose>:
 800a636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63a:	f000 b851 	b.w	800a6e0 <_close_r>

0800a63e <strncmp>:
 800a63e:	4603      	mov	r3, r0
 800a640:	b510      	push	{r4, lr}
 800a642:	b172      	cbz	r2, 800a662 <strncmp+0x24>
 800a644:	3901      	subs	r1, #1
 800a646:	1884      	adds	r4, r0, r2
 800a648:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a64c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a650:	4290      	cmp	r0, r2
 800a652:	d101      	bne.n	800a658 <strncmp+0x1a>
 800a654:	42a3      	cmp	r3, r4
 800a656:	d101      	bne.n	800a65c <strncmp+0x1e>
 800a658:	1a80      	subs	r0, r0, r2
 800a65a:	bd10      	pop	{r4, pc}
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d1f3      	bne.n	800a648 <strncmp+0xa>
 800a660:	e7fa      	b.n	800a658 <strncmp+0x1a>
 800a662:	4610      	mov	r0, r2
 800a664:	e7f9      	b.n	800a65a <strncmp+0x1c>

0800a666 <__ascii_wctomb>:
 800a666:	4603      	mov	r3, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	b141      	cbz	r1, 800a67e <__ascii_wctomb+0x18>
 800a66c:	2aff      	cmp	r2, #255	; 0xff
 800a66e:	d904      	bls.n	800a67a <__ascii_wctomb+0x14>
 800a670:	228a      	movs	r2, #138	; 0x8a
 800a672:	f04f 30ff 	mov.w	r0, #4294967295
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	4770      	bx	lr
 800a67a:	2001      	movs	r0, #1
 800a67c:	700a      	strb	r2, [r1, #0]
 800a67e:	4770      	bx	lr

0800a680 <_write_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4604      	mov	r4, r0
 800a684:	4608      	mov	r0, r1
 800a686:	4611      	mov	r1, r2
 800a688:	2200      	movs	r2, #0
 800a68a:	4d05      	ldr	r5, [pc, #20]	; (800a6a0 <_write_r+0x20>)
 800a68c:	602a      	str	r2, [r5, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	f7f7 ff74 	bl	800257c <_write>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_write_r+0x1e>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_write_r+0x1e>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20000574 	.word	0x20000574

0800a6a4 <__assert_func>:
 800a6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6a6:	4614      	mov	r4, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4b09      	ldr	r3, [pc, #36]	; (800a6d0 <__assert_func+0x2c>)
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68d8      	ldr	r0, [r3, #12]
 800a6b2:	b14c      	cbz	r4, 800a6c8 <__assert_func+0x24>
 800a6b4:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <__assert_func+0x30>)
 800a6b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6ba:	9100      	str	r1, [sp, #0]
 800a6bc:	462b      	mov	r3, r5
 800a6be:	4906      	ldr	r1, [pc, #24]	; (800a6d8 <__assert_func+0x34>)
 800a6c0:	f000 f81e 	bl	800a700 <fiprintf>
 800a6c4:	f000 f8ca 	bl	800a85c <abort>
 800a6c8:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <__assert_func+0x38>)
 800a6ca:	461c      	mov	r4, r3
 800a6cc:	e7f3      	b.n	800a6b6 <__assert_func+0x12>
 800a6ce:	bf00      	nop
 800a6d0:	20000010 	.word	0x20000010
 800a6d4:	0800b08d 	.word	0x0800b08d
 800a6d8:	0800b09a 	.word	0x0800b09a
 800a6dc:	0800b0c8 	.word	0x0800b0c8

0800a6e0 <_close_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	4d05      	ldr	r5, [pc, #20]	; (800a6fc <_close_r+0x1c>)
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	f7f7 ff62 	bl	80025b4 <_close>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_close_r+0x1a>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_close_r+0x1a>
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	20000574 	.word	0x20000574

0800a700 <fiprintf>:
 800a700:	b40e      	push	{r1, r2, r3}
 800a702:	b503      	push	{r0, r1, lr}
 800a704:	4601      	mov	r1, r0
 800a706:	ab03      	add	r3, sp, #12
 800a708:	4805      	ldr	r0, [pc, #20]	; (800a720 <fiprintf+0x20>)
 800a70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70e:	6800      	ldr	r0, [r0, #0]
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	f7ff fdc3 	bl	800a29c <_vfiprintf_r>
 800a716:	b002      	add	sp, #8
 800a718:	f85d eb04 	ldr.w	lr, [sp], #4
 800a71c:	b003      	add	sp, #12
 800a71e:	4770      	bx	lr
 800a720:	20000010 	.word	0x20000010

0800a724 <_fstat_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	2300      	movs	r3, #0
 800a728:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_fstat_r+0x20>)
 800a72a:	4604      	mov	r4, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	4611      	mov	r1, r2
 800a730:	602b      	str	r3, [r5, #0]
 800a732:	f7f7 ff4a 	bl	80025ca <_fstat>
 800a736:	1c43      	adds	r3, r0, #1
 800a738:	d102      	bne.n	800a740 <_fstat_r+0x1c>
 800a73a:	682b      	ldr	r3, [r5, #0]
 800a73c:	b103      	cbz	r3, 800a740 <_fstat_r+0x1c>
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	bd38      	pop	{r3, r4, r5, pc}
 800a742:	bf00      	nop
 800a744:	20000574 	.word	0x20000574

0800a748 <_isatty_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	2300      	movs	r3, #0
 800a74c:	4d05      	ldr	r5, [pc, #20]	; (800a764 <_isatty_r+0x1c>)
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f7 ff48 	bl	80025e8 <_isatty>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_isatty_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_isatty_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	20000574 	.word	0x20000574

0800a768 <_lseek_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	2200      	movs	r2, #0
 800a772:	4d05      	ldr	r5, [pc, #20]	; (800a788 <_lseek_r+0x20>)
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f7 ff40 	bl	80025fc <_lseek>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_lseek_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_lseek_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	20000574 	.word	0x20000574

0800a78c <memmove>:
 800a78c:	4288      	cmp	r0, r1
 800a78e:	b510      	push	{r4, lr}
 800a790:	eb01 0402 	add.w	r4, r1, r2
 800a794:	d902      	bls.n	800a79c <memmove+0x10>
 800a796:	4284      	cmp	r4, r0
 800a798:	4623      	mov	r3, r4
 800a79a:	d807      	bhi.n	800a7ac <memmove+0x20>
 800a79c:	1e43      	subs	r3, r0, #1
 800a79e:	42a1      	cmp	r1, r4
 800a7a0:	d008      	beq.n	800a7b4 <memmove+0x28>
 800a7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7aa:	e7f8      	b.n	800a79e <memmove+0x12>
 800a7ac:	4601      	mov	r1, r0
 800a7ae:	4402      	add	r2, r0
 800a7b0:	428a      	cmp	r2, r1
 800a7b2:	d100      	bne.n	800a7b6 <memmove+0x2a>
 800a7b4:	bd10      	pop	{r4, pc}
 800a7b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7be:	e7f7      	b.n	800a7b0 <memmove+0x24>

0800a7c0 <__malloc_lock>:
 800a7c0:	4801      	ldr	r0, [pc, #4]	; (800a7c8 <__malloc_lock+0x8>)
 800a7c2:	f7fe bda2 	b.w	800930a <__retarget_lock_acquire_recursive>
 800a7c6:	bf00      	nop
 800a7c8:	20000568 	.word	0x20000568

0800a7cc <__malloc_unlock>:
 800a7cc:	4801      	ldr	r0, [pc, #4]	; (800a7d4 <__malloc_unlock+0x8>)
 800a7ce:	f7fe bd9d 	b.w	800930c <__retarget_lock_release_recursive>
 800a7d2:	bf00      	nop
 800a7d4:	20000568 	.word	0x20000568

0800a7d8 <_realloc_r>:
 800a7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4614      	mov	r4, r2
 800a7e0:	460e      	mov	r6, r1
 800a7e2:	b921      	cbnz	r1, 800a7ee <_realloc_r+0x16>
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ea:	f7ff bb5f 	b.w	8009eac <_malloc_r>
 800a7ee:	b92a      	cbnz	r2, 800a7fc <_realloc_r+0x24>
 800a7f0:	f7ff faf4 	bl	8009ddc <_free_r>
 800a7f4:	4625      	mov	r5, r4
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7fc:	f000 f835 	bl	800a86a <_malloc_usable_size_r>
 800a800:	4284      	cmp	r4, r0
 800a802:	4607      	mov	r7, r0
 800a804:	d802      	bhi.n	800a80c <_realloc_r+0x34>
 800a806:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a80a:	d812      	bhi.n	800a832 <_realloc_r+0x5a>
 800a80c:	4621      	mov	r1, r4
 800a80e:	4640      	mov	r0, r8
 800a810:	f7ff fb4c 	bl	8009eac <_malloc_r>
 800a814:	4605      	mov	r5, r0
 800a816:	2800      	cmp	r0, #0
 800a818:	d0ed      	beq.n	800a7f6 <_realloc_r+0x1e>
 800a81a:	42bc      	cmp	r4, r7
 800a81c:	4622      	mov	r2, r4
 800a81e:	4631      	mov	r1, r6
 800a820:	bf28      	it	cs
 800a822:	463a      	movcs	r2, r7
 800a824:	f7fe fe00 	bl	8009428 <memcpy>
 800a828:	4631      	mov	r1, r6
 800a82a:	4640      	mov	r0, r8
 800a82c:	f7ff fad6 	bl	8009ddc <_free_r>
 800a830:	e7e1      	b.n	800a7f6 <_realloc_r+0x1e>
 800a832:	4635      	mov	r5, r6
 800a834:	e7df      	b.n	800a7f6 <_realloc_r+0x1e>
	...

0800a838 <_read_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	4611      	mov	r1, r2
 800a840:	2200      	movs	r2, #0
 800a842:	4d05      	ldr	r5, [pc, #20]	; (800a858 <_read_r+0x20>)
 800a844:	602a      	str	r2, [r5, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	f7f7 fe7b 	bl	8002542 <_read>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_read_r+0x1e>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_read_r+0x1e>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	20000574 	.word	0x20000574

0800a85c <abort>:
 800a85c:	2006      	movs	r0, #6
 800a85e:	b508      	push	{r3, lr}
 800a860:	f000 f834 	bl	800a8cc <raise>
 800a864:	2001      	movs	r0, #1
 800a866:	f7f7 fe62 	bl	800252e <_exit>

0800a86a <_malloc_usable_size_r>:
 800a86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a86e:	1f18      	subs	r0, r3, #4
 800a870:	2b00      	cmp	r3, #0
 800a872:	bfbc      	itt	lt
 800a874:	580b      	ldrlt	r3, [r1, r0]
 800a876:	18c0      	addlt	r0, r0, r3
 800a878:	4770      	bx	lr

0800a87a <_raise_r>:
 800a87a:	291f      	cmp	r1, #31
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	d904      	bls.n	800a88e <_raise_r+0x14>
 800a884:	2316      	movs	r3, #22
 800a886:	6003      	str	r3, [r0, #0]
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	bd38      	pop	{r3, r4, r5, pc}
 800a88e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a890:	b112      	cbz	r2, 800a898 <_raise_r+0x1e>
 800a892:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a896:	b94b      	cbnz	r3, 800a8ac <_raise_r+0x32>
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 f831 	bl	800a900 <_getpid_r>
 800a89e:	462a      	mov	r2, r5
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a8:	f000 b818 	b.w	800a8dc <_kill_r>
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d00a      	beq.n	800a8c6 <_raise_r+0x4c>
 800a8b0:	1c59      	adds	r1, r3, #1
 800a8b2:	d103      	bne.n	800a8bc <_raise_r+0x42>
 800a8b4:	2316      	movs	r3, #22
 800a8b6:	6003      	str	r3, [r0, #0]
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	e7e7      	b.n	800a88c <_raise_r+0x12>
 800a8bc:	2400      	movs	r4, #0
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8c4:	4798      	blx	r3
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	e7e0      	b.n	800a88c <_raise_r+0x12>
	...

0800a8cc <raise>:
 800a8cc:	4b02      	ldr	r3, [pc, #8]	; (800a8d8 <raise+0xc>)
 800a8ce:	4601      	mov	r1, r0
 800a8d0:	6818      	ldr	r0, [r3, #0]
 800a8d2:	f7ff bfd2 	b.w	800a87a <_raise_r>
 800a8d6:	bf00      	nop
 800a8d8:	20000010 	.word	0x20000010

0800a8dc <_kill_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	2300      	movs	r3, #0
 800a8e0:	4d06      	ldr	r5, [pc, #24]	; (800a8fc <_kill_r+0x20>)
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	602b      	str	r3, [r5, #0]
 800a8ea:	f7f7 fe10 	bl	800250e <_kill>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	d102      	bne.n	800a8f8 <_kill_r+0x1c>
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	b103      	cbz	r3, 800a8f8 <_kill_r+0x1c>
 800a8f6:	6023      	str	r3, [r4, #0]
 800a8f8:	bd38      	pop	{r3, r4, r5, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000574 	.word	0x20000574

0800a900 <_getpid_r>:
 800a900:	f7f7 bdfe 	b.w	8002500 <_getpid>

0800a904 <_init>:
 800a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a906:	bf00      	nop
 800a908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a90a:	bc08      	pop	{r3}
 800a90c:	469e      	mov	lr, r3
 800a90e:	4770      	bx	lr

0800a910 <_fini>:
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	bf00      	nop
 800a914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a916:	bc08      	pop	{r3}
 800a918:	469e      	mov	lr, r3
 800a91a:	4770      	bx	lr
